// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EfPostgresql.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20221122054659_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "timescaledb");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EfPostgresql.Domain.PointTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Point>("Pt")
                        .HasColumnType("geometry")
                        .HasColumnName("pt");

                    b.HasKey("Id");

                    b.ToTable("point_test");
                });

            modelBuilder.Entity("EfPostgresql.Domain.SensorStat", b =>
                {
                    b.Property<int>("Sid")
                        .HasColumnType("integer")
                        .HasColumnName("sid");

                    b.Property<DateTime>("CtrTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("crt_time");

                    b.Property<bool>("State")
                        .HasColumnType("boolean")
                        .HasColumnName("state");

                    b.HasKey("Sid", "CtrTime");

                    b.ToTable("sensor_stat1");
                });
#pragma warning restore 612, 618
        }
    }
}

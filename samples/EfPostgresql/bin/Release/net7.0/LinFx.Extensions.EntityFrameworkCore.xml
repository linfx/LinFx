<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinFx.Extensions.EntityFrameworkCore</name>
    </assembly>
    <members>
        <member name="T:LinFx.Extensions.EntityFrameworkCore.DependencyInjection.DbContextConfigurationContext">
            <summary>
            数据库配置上下文
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.DependencyInjection.DbContextConfigurationContext.DbContextOptions">
            <summary>
            数据库上下文配置
            </summary>
        </member>
        <member name="T:LinFx.Extensions.EntityFrameworkCore.DependencyInjection.DbContextConfigurationContext`1">
            <summary>
            数据库配置上下文
            </summary>
            <typeparam name="TDbContext"></typeparam>
        </member>
        <member name="T:LinFx.Extensions.EntityFrameworkCore.DependencyInjection.DbContextCreationContext">
            <summary>
            DbContext创建上下文
            </summary>
        </member>
        <member name="T:LinFx.Extensions.EntityFrameworkCore.DependencyInjection.DbContextOptionsFactory">
            <summary>
            数据库上下文配置工厂
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.DependencyInjection.DbContextOptionsFactory.Create``1(System.IServiceProvider)">
            <summary>
            创建数据库上下文配置对象
            </summary>
            <typeparam name="TDbContext">数据库上下文</typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.DependencyInjection.DbContextOptionsFactory.GetDbContextOptions``1(System.IServiceProvider)">
            <summary>
            获取 DbOptions 配置
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.EntityFrameworkCore.DependencyInjection.DbContextRegistrationOptions">
            <summary>
            数据库注册配置对象
            </summary>
        </member>
        <member name="T:LinFx.Extensions.EntityFrameworkCore.DependencyInjection.EfRepositoryRegistrar">
            <summary>
            仓储注册器
            </summary>
        </member>
        <member name="T:LinFx.Extensions.EntityFrameworkCore.EfDbContext">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.EfDbContext.CurrentTenantId">
            <summary>
            当前租户ID
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.EfDbContext.IsMultiTenantFilterEnabled">
            <summary>
            是否启用租户过滤
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.EfDbContext.IsSoftDeleteFilterEnabled">
            <summary>
            是否启用软件删除过滤
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.EfDbContext.CurrentTenant">
            <summary>
            当前租户
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.EfDbContext.DataFilter">
            <summary>
            数据过滤
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.EfDbContext.AuditPropertySetter">
            <summary>
            属性自动设置器
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.EfDbContext.AuditingManager">
            <summary>
            审记日志管理器
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.EfDbContext.UnitOfWorkManager">
            <summary>
            工作单元管理器
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.EfDbContext.Clock">
            <summary>
            系统时钟
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.EfDbContext.DistributedEventBus">
            <summary>
            分步式事件总线
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.EfDbContext.LocalEventBus">
            <summary>
            本地事件总线
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EntityFrameworkCore.EfDbContext.Logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.TrySetDatabaseProvider(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            设置数据库提供者
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            保存
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:LinFx.Extensions.Data.DbConcurrencyException"></exception>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.PublishEntityEvents(LinFx.Domain.Entities.Events.EntityEventReport)">
            <summary>
            发布领域事件
            </summary>
            <param name="changeReport"></param>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.SaveChangesOnDbContextAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method will call the DbContext <see cref="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)"/> method directly of EF Core, which doesn't apply concepts of abp.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.Initialize(LinFx.Extensions.EntityFrameworkCore.EfDbContextInitializationContext)">
            <summary>
            初始化
            </summary>
            <param name="initializationContext"></param>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.HandlePropertiesBeforeSave">
            <summary>
            保存前属性处理
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.CreateEventReport">
            <summary>
            创建领域事件
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.ConfigureBaseProperties``1(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
            配置基础属性
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="modelBuilder"></param>
            <param name="mutableEntityType"></param>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.ConfigureGlobalFilters``1(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
            配置全局过滤器
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="modelBuilder"></param>
            <param name="mutableEntityType"></param>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.ShouldFilterEntity``1(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
            是否过滤
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.CreateFilterExpression``1">
            <summary>
            创建过滤表达式
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContext.CombineExpressions``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            合并表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression1"></param>
            <param name="expression2"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.EntityFrameworkCore.EfDbContextOptions">
            <summary>
            数据库上下文选项
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContextOptions.PreConfigure(System.Action{LinFx.Extensions.EntityFrameworkCore.DependencyInjection.DbContextConfigurationContext})">
            <summary>
            预配置
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContextOptions.Configure(System.Action{LinFx.Extensions.EntityFrameworkCore.DependencyInjection.DbContextConfigurationContext})">
            <summary>
            配置
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContextOptions.PreConfigure``1(System.Action{LinFx.Extensions.EntityFrameworkCore.DependencyInjection.DbContextConfigurationContext{``0}})">
            <summary>
            预配置
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <param name="action"></param>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EfDbContextOptions.Configure``1(System.Action{LinFx.Extensions.EntityFrameworkCore.DependencyInjection.DbContextConfigurationContext{``0}})">
            <summary>
            配置
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <param name="action"></param>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EntityHistory.EntityHistoryHelper.GetPropertyChanges(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            Gets the property changes for this entry.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.EntityHistory.EntityHistoryHelper.UpdateChangeList(System.Collections.Generic.List{LinFx.Extensions.Auditing.EntityChangeInfo})">
            <summary>
            Updates change time, entity id and foreign keys after SaveChanges is called.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.PagedResultExtensions.ToPageResultAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            获取分页结果
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <param name="page">当前页</param>
            <param name="limit">页大小</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.PagedResultExtensions.ToPageResultAsync``1(System.Linq.IQueryable{``0},LinFx.Application.Dtos.IPagedResultRequest)">
            <summary>
            获取分页结果
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <param name="request">分页请求</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.PagedResultExtensions.ToPageResultAsync``2(System.Linq.IQueryable{``0},LinFx.Application.Dtos.IPagedResultRequest)">
            <summary>
            获取分页结果
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TModel"></typeparam>
            <param name="query"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.EntityFrameworkCore.IDbContextProvider`1">
            <summary>
            数据库上下文提供者
            </summary>
            <typeparam name="TDbContext"></typeparam>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.IDbContextProvider`1.GetDbContextAsync">
            <summary>
            获取数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.EntityFrameworkCore.IEfDbContext">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.IEfDbContext.SaveChangesOnDbContextAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method will call the DbContext <see cref="M:LinFx.Extensions.EntityFrameworkCore.IEfDbContext.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)"/> method directly of EF Core, which doesn't apply concepts of abp.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.EntityFrameworkCore.Repositories.EfRepository`2">
            <summary>
            Ef 仓储
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.Repositories.EfRepository`2.GetDbContextAsync">
            <summary>
            获取数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.EntityFrameworkCore.Uow.UnitOfWorkDbContextProvider`1">
            <summary>
            工作单元数据库上下文提供者
            </summary>
            <typeparam name="TDbContext"></typeparam>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.Uow.UnitOfWorkDbContextProvider`1.GetDbContextAsync">
            <summary>
            获取数据库上下文
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.Uow.UnitOfWorkDbContextProvider`1.CreateDbContextAsync(LinFx.Extensions.Uow.IUnitOfWork,System.String,System.String)">
            <summary>
            创建数据库上下文
            </summary>
            <param name="unitOfWork"></param>
            <param name="connectionStringName"></param>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.Uow.UnitOfWorkDbContextProvider`1.CreateDbContextAsync(LinFx.Extensions.Uow.IUnitOfWork)">
            <summary>
            创建数据库上下文
            </summary>
            <param name="unitOfWork"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.Uow.UnitOfWorkDbContextProvider`1.CreateDbContextWithTransactionAsync(LinFx.Extensions.Uow.IUnitOfWork)">
            <summary>
            创建数据库上下文
            </summary>
            <param name="unitOfWork"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.EntityFrameworkCore.Uow.UnitOfWorkDbContextProvider`1.ResolveConnectionStringAsync(System.String)">
            <summary>
            根据名称解析具体的连接字符串
            </summary>
            <param name="connectionStringName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.IncludeIf``2(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Specifies the related objects to include in the query results.
            </summary>
            <param name="source">The source <see cref="T:System.Linq.IQueryable`1"/> on which to call Include.</param>
            <param name="condition">A boolean value to determine to include <paramref name="path"/> or not.</param>
            <param name="path">The type of navigation property being included.</param>
        </member>
    </members>
</doc>

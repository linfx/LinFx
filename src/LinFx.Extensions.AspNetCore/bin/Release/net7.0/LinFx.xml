<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinFx</name>
    </assembly>
    <members>
        <member name="M:LinFx.Application.ApplicationBase.InitializeModulesAsync">
            <summary>
            初始化模块
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Application.ApplicationBase.LoadModules(Microsoft.Extensions.DependencyInjection.IServiceCollection,LinFx.Application.ApplicationCreationOptions)">
            <summary>
            加载模块
            </summary>
        </member>
        <member name="P:LinFx.Application.ApplicationCreationOptions.Configuration">
            <summary>
            The options in this property only take effect when IConfiguration not registered.
            </summary>
        </member>
        <member name="T:LinFx.Application.ApplicationInitializationContext">
            <summary>
            应用初始化上下文
            </summary>
        </member>
        <member name="P:LinFx.Application.Dtos.IFilterRequest.Filter">
            <summary>
            过滤条件
            </summary>
        </member>
        <member name="T:LinFx.Application.Dtos.IHasTotalCount">
            <summary>
            This interface is defined to standardize to set "Total Count of Items" to a DTO.
            </summary>
        </member>
        <member name="P:LinFx.Application.Dtos.IHasTotalCount.TotalCount">
            <summary>
            Total count of Items.
            </summary>
        </member>
        <member name="T:LinFx.Application.Dtos.ILimitedResultRequest">
            <summary>
            This interface is defined to standardize to request a limited result.
            </summary>
        </member>
        <member name="P:LinFx.Application.Dtos.ILimitedResultRequest.PageSize">
            <summary>
            Max expected result count.
            </summary>
        </member>
        <member name="T:LinFx.Application.Dtos.IListResult`1">
            <summary>
            This interface is defined to standardize to return a list of items to clients.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:LinFx.Application.Dtos.IListResult`1.Items"/> list</typeparam>
        </member>
        <member name="P:LinFx.Application.Dtos.IListResult`1.Items">
            <summary>
            List of items.
            </summary>
        </member>
        <member name="T:LinFx.Application.Dtos.IPagedAndSortedResultRequest">
            <summary>
            This interface is defined to standardize to request a paged and sorted result.
            </summary>
        </member>
        <member name="T:LinFx.Application.Dtos.IPagedResult`1">
            <summary>
            This interface is defined to standardize to return a page of items to clients.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:LinFx.Application.Dtos.IListResult`1.Items"/> list</typeparam>
        </member>
        <member name="T:LinFx.Application.Dtos.IPagedResultRequest">
            <summary>
            This interface is defined to standardize to request a paged result.
            </summary>
        </member>
        <member name="P:LinFx.Application.Dtos.IPagedResultRequest.Page">
            <summary>
            Skip count (beginning of the page).
            </summary>
        </member>
        <member name="T:LinFx.Application.Dtos.ISortedResultRequest">
            <summary>
            This interface is defined to standardize to request a sorted result.
            </summary>
        </member>
        <member name="P:LinFx.Application.Dtos.ISortedResultRequest.Sorting">
            <summary>
            Sorting information.
            Should include sorting field and optionally a direction (ASC or DESC)
            Can contain more than one field separated by comma (,).
            </summary>
            <example>
            Examples:
            "Name"
            "Name DESC"
            "Name ASC, Age DESC"
            </example>
        </member>
        <member name="P:LinFx.Application.Dtos.LimitedResultRequest.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="T:LinFx.Application.Dtos.ListResult`1">
            <summary>
            Implements <see cref="T:LinFx.Application.Dtos.IListResult`1"/>.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:LinFx.Application.Dtos.ListResult`1.Items"/> list</typeparam>
        </member>
        <member name="P:LinFx.Application.Dtos.ListResult`1.Items">
            <inheritdoc />
        </member>
        <member name="M:LinFx.Application.Dtos.ListResult`1.#ctor">
            <summary>
            Creates a new <see cref="T:LinFx.Application.Dtos.ListResult`1"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Application.Dtos.ListResult`1.#ctor(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:LinFx.Application.Dtos.ListResult`1"/> object.
            </summary>
            <param name="items">List of items</param>
        </member>
        <member name="P:LinFx.Application.Dtos.PagedAndSortedFilterResultRequest.Filter">
             <summary>
            过滤
             </summary>
        </member>
        <member name="P:LinFx.Application.Dtos.FilterPagedAndSortedFilterResultRequest`1.Expression">
            <summary>
            过滤条件
            </summary>
        </member>
        <member name="T:LinFx.Application.Dtos.PagedAndSortedResultRequest">
            <summary>
            Simply implements <see cref="T:LinFx.Application.Dtos.IPagedAndSortedResultRequest"/>.
            </summary>
        </member>
        <member name="P:LinFx.Application.Dtos.PagedAndSortedResultRequest.Sorting">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:LinFx.Application.Dtos.PagedResult`1">
            <summary>
            Implements <see cref="T:LinFx.Application.Dtos.IPagedResult`1"/>.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:LinFx.Application.Dtos.ListResult`1.Items"/> list</typeparam>
        </member>
        <member name="P:LinFx.Application.Dtos.PagedResult`1.TotalCount">
            <summary>
            总数
            </summary>
        </member>
        <member name="P:LinFx.Application.Dtos.PagedResult`1.Page">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:LinFx.Application.Dtos.PagedResult`1.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="M:LinFx.Application.Dtos.PagedResult`1.#ctor">
            <summary>
            Creates a new <see cref="T:LinFx.Application.Dtos.PagedResult`1"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Application.Dtos.PagedResult`1.#ctor(System.Int64,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:LinFx.Application.Dtos.PagedResult`1"/> object.
            </summary>
            <param name="totalCount">Total count of Items</param>
            <param name="items">List of items in current page</param>
        </member>
        <member name="M:LinFx.Application.Dtos.PagedResult`1.#ctor(LinFx.Application.Dtos.IPagedResultRequest,System.Int64,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:LinFx.Application.Dtos.PagedResult`1"/> object.
            </summary>
            <param name="request"><see cref="T:LinFx.Application.Dtos.IPagedResultRequest"></see></param>
            <param name="totalCount"></param>
            <param name="items"></param>
        </member>
        <member name="M:LinFx.Application.Dtos.PagedResult`1.#ctor(System.Int32,System.Int32,System.Int64,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:LinFx.Application.Dtos.PagedResult`1"/> object.
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalCount"></param>
            <param name="items"></param>
        </member>
        <member name="T:LinFx.Application.Dtos.PagedResultRequest">
            <summary>
            Simply implements <see cref="T:LinFx.Application.Dtos.IPagedResultRequest"/>.
            </summary>
        </member>
        <member name="P:LinFx.Application.Dtos.PagedResultRequest.Page">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:LinFx.Application.IApplication.StartupModuleType">
            <summary>
            Type of the startup (entrance) module of the application.
            </summary>
        </member>
        <member name="P:LinFx.Application.IApplication.Services">
            <summary>
            List of services registered to this application.
            Can not add new services to this collection after application initialize.
            </summary>
        </member>
        <member name="P:LinFx.Application.IApplication.ServiceProvider">
            <summary>
            Reference to the root service provider used by the application.
            This can not be used before initialize the application.
            </summary>
        </member>
        <member name="M:LinFx.Application.IApplication.ShutdownAsync">
            <summary>
            Used to gracefully shutdown the application and all modules.
            </summary>
        </member>
        <member name="M:LinFx.Application.IApplicationWithExternalServiceProvider.SetServiceProvider(System.IServiceProvider)">
            <summary>
            Sets the service provider, but not initializes the modules.
            </summary>
        </member>
        <member name="M:LinFx.Application.IApplicationWithExternalServiceProvider.InitializeAsync(System.IServiceProvider)">
            <summary>
            Sets the service provider and initializes all the modules.
            If <see cref="M:LinFx.Application.IApplicationWithExternalServiceProvider.SetServiceProvider(System.IServiceProvider)"/> was called before, the same
            <see cref="T:System.IServiceProvider"/> instance should be passed to this method.
            </summary>
        </member>
        <member name="M:LinFx.Application.IApplicationWithInternalServiceProvider.CreateServiceProvider">
            <summary>
            Creates the service provider, but not initializes the modules.
            Multiple calls returns the same service provider without creating again.
            </summary>
        </member>
        <member name="M:LinFx.Application.IApplicationWithInternalServiceProvider.InitializeAsync">
            <summary>
            Creates the service provider and initializes all the modules.
            If <see cref="M:LinFx.Application.IApplicationWithInternalServiceProvider.CreateServiceProvider"/> method was called before,
            it does not re-create it, but uses the previous one.
            </summary>
        </member>
        <member name="T:LinFx.Application.Services.ApplicationService">
            <summary>
            应用服务
            </summary>
        </member>
        <member name="P:LinFx.Application.Services.ApplicationService.UnitOfWorkManager">
            <summary>
            工作单元管理器
            </summary>
        </member>
        <member name="P:LinFx.Application.Services.ApplicationService.LoggerFactory">
            <summary>
            日志厂工
            </summary>
        </member>
        <member name="P:LinFx.Application.Services.ApplicationService.CurrentTenant">
            <summary>
            当前租户
            </summary>
        </member>
        <member name="P:LinFx.Application.Services.ApplicationService.DataFilter">
            <summary>
            数据过滤
            </summary>
        </member>
        <member name="P:LinFx.Application.Services.ApplicationService.CurrentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="P:LinFx.Application.Services.ApplicationService.SettingProvider">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:LinFx.Application.Services.ApplicationService.Clock">
            <summary>
            时钟
            </summary>
        </member>
        <member name="P:LinFx.Application.Services.ApplicationService.CurrentUnitOfWork">
            <summary>
            当前工作单元
            </summary>
        </member>
        <member name="P:LinFx.Application.Services.ApplicationService.Logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="T:LinFx.Application.Services.IApplicationService">
            <summary>
            This interface must be implemented by all application services to register and identify them by convention.
            </summary>
        </member>
        <member name="T:LinFx.Collections.ITypeList">
            <summary>
            A shortcut for <see cref="T:LinFx.Collections.ITypeList`1"/> to use object as base type.
            </summary>
        </member>
        <member name="T:LinFx.Collections.ITypeList`1">
            <summary>
            Extends <see cref="T:System.Collections.Generic.IList`1"/> to add restriction a specific base type.
            </summary>
            <typeparam name="TBaseType">Base Type of <see cref="T:System.Type"/>s in this list</typeparam>
        </member>
        <member name="M:LinFx.Collections.ITypeList`1.Add``1">
            <summary>
            Adds a type to list.
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:LinFx.Collections.ITypeList`1.TryAdd``1">
            <summary>
            Adds a type to list if it's not already in the list.
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:LinFx.Collections.ITypeList`1.Contains``1">
            <summary>
            Checks if a type exists in the list.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinFx.Collections.ITypeList`1.Remove``1">
            <summary>
            Removes a type from list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:LinFx.Collections.TypeList">
            <summary>
            A shortcut for <see cref="T:LinFx.Collections.TypeList`1"/> to use object as base type.
            </summary>
        </member>
        <member name="T:LinFx.Collections.TypeList`1">
            <summary>
            Extends <see cref="T:System.Collections.Generic.List`1"/> to add restriction a specific base type.
            </summary>
            <typeparam name="TBaseType">Base Type of <see cref="T:System.Type"/>s in this list</typeparam>
        </member>
        <member name="P:LinFx.Collections.TypeList`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:LinFx.Collections.TypeList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LinFx.Collections.TypeList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> at the specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.#ctor">
            <summary>
            Creates a new <see cref="T:LinFx.Collections.TypeList`1"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Add``1">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Add(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Insert(System.Int32,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.IndexOf(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Contains``1">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Contains(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Remove``1">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Remove(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.CopyTo(System.Type[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:LinFx.DisposeAction">
            <summary>
            This class can be used to provide an action when
            Dipose method is called.
            </summary>
        </member>
        <member name="M:LinFx.DisposeAction.#ctor(System.Action)">
            <summary>
            Creates a new <see cref="T:LinFx.DisposeAction"/> object.
            </summary>
            <param name="action">Action to be executed when this object is disposed.</param>
        </member>
        <member name="T:LinFx.Domain.Entities.AggregateRoot">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.AggregateRoot.ExtraProperties">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.AggregateRoot.ConcurrencyStamp">
            <summary>
            同步标记
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.AggregateRoot`1">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.AggregateRoot`1.ExtraProperties">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.AggregateRoot`1.ConcurrencyStamp">
            <summary>
            同步标记
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.Auditing.AuditedAggregateRoot">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.IAuditedObject"/> for aggregate roots.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.AuditedAggregateRoot.LastModificationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.AuditedAggregateRoot.LastModifierId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Entities.Auditing.AuditedAggregateRoot`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.IAuditedObject"/> for aggregate roots.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.AuditedAggregateRoot`1.LastModificationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.AuditedAggregateRoot`1.LastModifierId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Entities.Auditing.AuditedEntity">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.IAuditedObject"/>.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.AuditedEntity.LastModificationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.AuditedEntity.LastModifierId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Entities.Auditing.AuditedEntity`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.IAuditedObject"/>.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.AuditedEntity`1.LastModificationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.AuditedEntity`1.LastModifierId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Entities.Auditing.CreationAuditedAggregateRoot">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.ICreationAuditedObject"/> for aggregate roots.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.CreationAuditedAggregateRoot.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.CreationAuditedAggregateRoot.CreatorId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.ICreationAuditedObject"/> for aggregate roots.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1.CreatorId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Entities.Auditing.CreationAuditedEntity">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.ICreationAuditedObject" /> for an entity.
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.Auditing.CreationAuditedEntity`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.ICreationAuditedObject"/> for an entity.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="T:LinFx.Domain.Entities.Auditing.FullAuditedAggregateRoot">
            <summary>
            Implements <see cref="T:LinFx.Extensions.Auditing.IFullAuditedObject"/> to be a base class for full-audited aggregate roots.
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.Auditing.FullAuditedAggregateRoot`1">
            <summary>
            Implements <see cref="T:LinFx.Extensions.Auditing.IFullAuditedObject"/> to be a base class for full-audited aggregate roots.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="T:LinFx.Domain.Entities.Auditing.FullAuditedEntity">
            <summary>
            Implements <see cref="T:LinFx.Extensions.Auditing.IFullAuditedObject"/> to be a base class for full-audited entities.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.FullAuditedEntity.IsDeleted">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.FullAuditedEntity.DeleterId">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.FullAuditedEntity.DeletionTime">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Entities.Auditing.FullAuditedEntity`1">
            <summary>
            Implements <see cref="T:LinFx.Extensions.Auditing.IFullAuditedObject"/> to be a base class for full-audited entities.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.FullAuditedEntity`1.IsDeleted">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.FullAuditedEntity`1.DeleterId">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Entities.Auditing.FullAuditedEntity`1.DeletionTime">
            <inheritdoc />
        </member>
        <member name="M:LinFx.Domain.Entities.BasicAggregateRoot`1.GetLocalEvents">
            <summary>
            获得所有本地事件
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Domain.Entities.BasicAggregateRoot`1.GetDistributedEvents">
            <summary>
            获得所有分布式事件
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Domain.Entities.BasicAggregateRoot`1.AddLocalEvent(System.Object)">
            <summary>
            添加本地事件
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:LinFx.Domain.Entities.BasicAggregateRoot`1.AddDistributedEvent(System.Object)">
            <summary>
            填加分步式事件
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="T:LinFx.Domain.Entities.Entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="M:LinFx.Domain.Entities.Entity.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LinFx.Domain.Entities.Entity`1">
            <summary>
            实体
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:LinFx.Domain.Entities.Entity`1.Id">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Domain.Entities.Entity`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LinFx.Domain.Entities.EntityHelper">
            <summary>
            Some helper methods for entities.
            </summary>
        </member>
        <member name="M:LinFx.Domain.Entities.EntityHelper.FindPrimaryKeyType``1">
            <summary>
            Tries to find the primary key type of the given entity type.
            May return null if given type does not implement <see cref="T:LinFx.Domain.Entities.IEntity`1"/>
            </summary>
        </member>
        <member name="M:LinFx.Domain.Entities.EntityHelper.FindPrimaryKeyType(System.Type)">
            <summary>
            Tries to find the primary key type of the given entity type.
            May return null if given type does not implement <see cref="T:LinFx.Domain.Entities.IEntity`1"/>
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.EntityNotFoundException">
            <summary>
            This exception is thrown if an entity excepted to be found but not found.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.EntityNotFoundException.EntityType">
            <summary>
            Type of the entity.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.EntityNotFoundException.Id">
            <summary>
            Id of the Entity.
            </summary>
        </member>
        <member name="M:LinFx.Domain.Entities.EntityNotFoundException.#ctor">
            <summary>
            Creates a new <see cref="T:LinFx.Domain.Entities.EntityNotFoundException"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Domain.Entities.EntityNotFoundException.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:LinFx.Domain.Entities.EntityNotFoundException"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Domain.Entities.EntityNotFoundException.#ctor(System.Type,System.Object)">
            <summary>
            Creates a new <see cref="T:LinFx.Domain.Entities.EntityNotFoundException"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Domain.Entities.EntityNotFoundException.#ctor(System.Type,System.Object,System.Exception)">
            <summary>
            Creates a new <see cref="T:LinFx.Domain.Entities.EntityNotFoundException"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Domain.Entities.EntityNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:LinFx.Domain.Entities.EntityNotFoundException"/> object.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:LinFx.Domain.Entities.EntityNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:LinFx.Domain.Entities.EntityNotFoundException"/> object.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="F:LinFx.Domain.Entities.EntityPropertyChangeInfo.MaxPropertyNameLength">
            <summary>
            Maximum length of <see cref="P:LinFx.Domain.Entities.EntityPropertyChangeInfo.PropertyName"/> property.
            Value: 96.
            </summary>
        </member>
        <member name="F:LinFx.Domain.Entities.EntityPropertyChangeInfo.MaxValueLength">
            <summary>
            Maximum length of <see cref="P:LinFx.Domain.Entities.EntityPropertyChangeInfo.NewValue"/> and <see cref="P:LinFx.Domain.Entities.EntityPropertyChangeInfo.OriginalValue"/> properties.
            Value: 512.
            </summary>
        </member>
        <member name="F:LinFx.Domain.Entities.EntityPropertyChangeInfo.MaxPropertyTypeFullNameLength">
            <summary>
            Maximum length of <see cref="P:LinFx.Domain.Entities.EntityPropertyChangeInfo.PropertyTypeFullName"/> property.
            Value: 512.
            </summary>
        </member>
        <member name="M:LinFx.Domain.Entities.Events.Distributed.AutoEntityDistributedEventSelectorListExtensions.Add``1(LinFx.Domain.Entities.Events.Distributed.IAutoEntityDistributedEventSelectorList)">
            <summary>
            Adds a specific entity type and the types derived from that entity type.
            </summary>
            <typeparam name="TEntity">Type of the entity</typeparam>
        </member>
        <member name="M:LinFx.Domain.Entities.Events.Distributed.AutoEntityDistributedEventSelectorListExtensions.Remove``1(LinFx.Domain.Entities.Events.Distributed.IAutoEntityDistributedEventSelectorList)">
            <summary>
            Remove a specific entity type and the types derived from that entity type.
            </summary>
            <typeparam name="TEntity">Type of the entity</typeparam>
        </member>
        <member name="M:LinFx.Domain.Entities.Events.Distributed.AutoEntityDistributedEventSelectorListExtensions.AddAll(LinFx.Domain.Entities.Events.Distributed.IAutoEntityDistributedEventSelectorList)">
            <summary>
            Adds all entity types.
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.Events.DomainEventEntry">
            <summary>
            领域事件
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.Events.EntityChangedEventData`1">
            <summary>
            Used to pass data for an event when an entity (<see cref="T:LinFx.Domain.Entities.IEntity"/>) is changed (created, updated or deleted).
            See <see cref="T:LinFx.Domain.Entities.Events.EntityCreatedEventData`1"/>, <see cref="T:LinFx.Domain.Entities.Events.EntityDeletedEventData`1"/> and <see cref="T:LinFx.Domain.Entities.Events.EntityUpdatedEventData`1"/> classes.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:LinFx.Domain.Entities.Events.EntityChangedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">Changed entity in this event</param>
        </member>
        <member name="T:LinFx.Domain.Entities.Events.EntityChangeEventHelper">
            <summary>
            Used to trigger entity change events.
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.Events.EntityCreatedEventData`1">
            <summary>
            This type of event can be used to notify just after creation of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:LinFx.Domain.Entities.Events.EntityCreatedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is created</param>
        </member>
        <member name="T:LinFx.Domain.Entities.Events.EntityDeletedEventData`1">
            <summary>
            This type of event can be used to notify just after deletion of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:LinFx.Domain.Entities.Events.EntityDeletedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is deleted</param>
        </member>
        <member name="T:LinFx.Domain.Entities.Events.EntityEventData`1">
            <summary>
            Used to pass data for an event that is related to with an <see cref="T:LinFx.Domain.Entities.IEntity"/> object.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="P:LinFx.Domain.Entities.Events.EntityEventData`1.Entity">
            <summary>
            Related entity with this event.
            </summary>
        </member>
        <member name="M:LinFx.Domain.Entities.Events.EntityEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">Related entity with this event</param>
        </member>
        <member name="T:LinFx.Domain.Entities.Events.EntityEventReport">
            <summary>
            领域事件报告
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.Events.EntityEventReport.DomainEvents">
            <summary>
            领域事件
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.Events.EntityUpdatedEventData`1">
            <summary>
            This type of event can be used to notify just after update of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:LinFx.Domain.Entities.Events.EntityUpdatedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is updated</param>
        </member>
        <member name="T:LinFx.Domain.Entities.Events.IEntityChangeEventHelper">
            <summary>
            Used to trigger entity change events.
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.Events.NullEntityChangeEventHelper">
            <summary>
            Null-object implementation of <see cref="T:LinFx.Domain.Entities.Events.IEntityChangeEventHelper"/>.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.Events.NullEntityChangeEventHelper.Instance">
            <summary>
            Gets single instance of <see cref="T:LinFx.Domain.Entities.Events.NullEntityChangeEventHelper"/> class.
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.IAggregateRoot">
            <summary>
            Defines an aggregate root. It's primary key may not be "Id" or it may have a composite primary key.
            Use <see cref="T:LinFx.Domain.Entities.IAggregateRoot`1"/> where possible for better integration to repositories and other structures in the framework.
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.IAggregateRoot`1">
            <summary>
            Defines an aggregate root with a single primary key with "Id" property.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="T:LinFx.Domain.Entities.IEntity">
            <summary>
            Defines an entity. It's primary key may not be "Id" or it may have a composite primary key.
            Use <see cref="T:LinFx.Domain.Entities.IEntity`1"/> where possible for better integration to repositories and other structures in the framework.
            </summary>
        </member>
        <member name="M:LinFx.Domain.Entities.IEntity.GetKeys">
            <summary>
            Returns an array of ordered keys for this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Domain.Entities.IEntity`1">
            <summary>
            Defines an entity with a single primary key with "Id" property.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:LinFx.Domain.Entities.IEntity`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="T:LinFx.Domain.Entities.IExtendableObject">
            <summary>
            Defines a JSON formatted string property to extend an object/entity.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Entities.IExtendableObject.ExtensionData">
            <summary>
            A JSON formatted string to extend the containing object.
            JSON data can contain properties with arbitrary values (like primitives or complex objects).
            Extension methods are available (<see cref="T:LinFx.Domain.Entities.ExtendableObjectExtensions"/>) to manipulate this data.
            General format:
            <code>
            {
              "Property1" : ...
              "Property2" : ...
            }
            </code>
            </summary>
        </member>
        <member name="M:LinFx.Domain.Entities.IGeneratesDomainEvents.GetLocalEvents">
            <summary>
            获得所有本地事件
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Domain.Entities.IGeneratesDomainEvents.GetDistributedEvents">
            <summary>
            获得所有本地事件
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinFx.Domain.Repositories.BasicRepositoryBase`1.DataFilter">
            <summary>
            数据过滤
            </summary>
        </member>
        <member name="P:LinFx.Domain.Repositories.BasicRepositoryBase`1.CurrentTenant">
            <summary>
            当前租户
            </summary>
        </member>
        <member name="P:LinFx.Domain.Repositories.BasicRepositoryBase`1.AsyncExecuter">
            <summary>
            异步查询
            </summary>
        </member>
        <member name="P:LinFx.Domain.Repositories.BasicRepositoryBase`1.UnitOfWorkManager">
            <summary>
            工作单元管理器
            </summary>
        </member>
        <member name="M:LinFx.Domain.Repositories.IBasicRepository`1.InsertAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Inserts a new entity.
            </summary>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <param name="entity">Inserted entity</param>
        </member>
        <member name="M:LinFx.Domain.Repositories.IBasicRepository`1.InsertManyAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Inserts multiple new entities.
            </summary>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <param name="entities">Entities to be inserted.</param>
            <returns>Awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:LinFx.Domain.Repositories.IBasicRepository`1.UpdateAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates an existing entity.
            </summary>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <param name="entity">Entity</param>
        </member>
        <member name="M:LinFx.Domain.Repositories.IBasicRepository`1.UpdateManyAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates multiple entities.
            </summary>
            <param name="entities">Entities to be updated.</param>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:LinFx.Domain.Repositories.IBasicRepository`1.DeleteAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes an entity.
            </summary>
            <param name="entity">Entity to be deleted</param>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        </member>
        <member name="M:LinFx.Domain.Repositories.IBasicRepository`1.DeleteManyAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes multiple entities.
            </summary>
            <param name="entities">Entities to be deleted.</param>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:LinFx.Domain.Repositories.IBasicRepository`2.DeleteAsync(`1,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes an entity by primary key.
            </summary>
            <param name="id">Primary key of the entity</param>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        </member>
        <member name="M:LinFx.Domain.Repositories.IBasicRepository`2.DeleteManyAsync(System.Collections.Generic.IEnumerable{`1},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes multiple entities by primary keys.
            </summary>
            <param name="ids">Primary keys of the each entity.</param>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Awaitable <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:LinFx.Domain.Repositories.IReadOnlyBasicRepository`1.GetListAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all the entities.
            </summary>
            <param name="includeDetails">Set true to include all children of this entity</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Entity</returns>
        </member>
        <member name="M:LinFx.Domain.Repositories.IReadOnlyBasicRepository`1.GetCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets total count of all entities.
            </summary>
        </member>
        <member name="M:LinFx.Domain.Repositories.IReadOnlyBasicRepository`2.GetAsync(`1,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets an entity with given primary key.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <param name="includeDetails">Set true to include all children of this entity</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Entity</returns>
        </member>
        <member name="M:LinFx.Domain.Repositories.IReadOnlyBasicRepository`2.FindAsync(`1,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets an entity with given primary key or null if not found.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <param name="includeDetails">Set true to include all children of this entity</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>Entity or null</returns>
        </member>
        <member name="M:LinFx.Domain.Repositories.IReadOnlyRepository`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a list of entities by the given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A condition to filter the entities</param>
            <param name="includeDetails">Set true to include details (sub-collections) of this entity</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        </member>
        <member name="T:LinFx.Domain.Repositories.IRepository">
            <summary>
            Just to mark a class as repository.
            </summary>
        </member>
        <member name="M:LinFx.Domain.Repositories.IRepository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get a single entity by the given <paramref name="predicate"/>.
            <para>
            It returns null if there is no entity with the given <paramref name="predicate"/>.
            It throws <see cref="T:System.InvalidOperationException"/> if there are multiple entities with the given <paramref name="predicate"/>.
            </para>
            </summary>
            <param name="predicate">A condition to find the entity</param>
            <param name="includeDetails">Set true to include all children of this entity</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        </member>
        <member name="M:LinFx.Domain.Repositories.IRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get a single entity by the given <paramref name="predicate"/>.
            <para>
            It throws <see cref="T:System.InvalidOperationException"/> if there are multiple entities with the given <paramref name="predicate"/>.
            </para>
            </summary>
            <param name="predicate">A condition to filter entities</param>
            <param name="includeDetails">Set true to include all children of this entity</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        </member>
        <member name="M:LinFx.Domain.Repositories.IRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes many entities by the given <paramref name="predicate"/>.
            <para>
            Please note: This may cause major performance problems if there are too many entities returned for a
            given predicate and the database provider doesn't have a way to efficiently delete many entities.
            </para>
            </summary>
            <param name="predicate">A condition to filter entities</param>
            <param name="autoSave">
            Set true to automatically save changes to database.
            This is useful for ORMs / database APIs those only save changes with an explicit method call, but you need to immediately save changes to the database.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        </member>
        <member name="T:LinFx.Domain.Services.DomainService">
            <summary>
             领域服务
            </summary>
        </member>
        <member name="T:LinFx.Domain.Services.IDomainService">
            <summary>
            This interface can be implemented by all domain services to identify them by convention.
            </summary>
        </member>
        <member name="T:LinFx.Domain.Values.ValueObject">
            <summary>
            值对象
            很多对象没有概念上的表示，他们描述了一个事务的某种特征。
            用于描述领域的某个方面而本身没有概念表示的对象称为Value Object（值对象）。
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingFactory.AuditingStore">
            <summary>
            审计日志储存
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingFactory.CurrentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingFactory.CurrentTenant">
            <summary>
            当前租户
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingFactory.CurrentClient">
            <summary>
            当前客户端
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditingFactory.CreateAuditLogInfo">
            <summary>
            创建审计信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditingFactory.ExecutePreContributors(LinFx.Extensions.Auditing.AuditLogInfo)">
            <summary>
            执行审计贡献者
            </summary>
            <param name="auditLogInfo">审计信息</param>
        </member>
        <member name="T:LinFx.Extensions.Auditing.AuditingInterceptor">
            <summary>
            审计日志拦截器
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditingInterceptor.InterceptAsync(LinFx.Extensions.DynamicProxy.IMethodInvocation)">
            <summary>
            拦截
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditingInterceptor.ShouldIntercept(LinFx.Extensions.DynamicProxy.IMethodInvocation,LinFx.Extensions.Auditing.AuditingOptions,LinFx.Extensions.Auditing.IAuditingFactory)">
            <summary>
            是否拦截
            </summary>
            <param name="invocation"></param>
            <param name="options"></param>
            <param name="auditingHelper"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Auditing.AuditingInterceptorRegistrar">
            <summary>
            拦截注册器
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditingInterceptorRegistrar.RegisterIfNeeded(LinFx.Extensions.DependencyInjection.IOnServiceRegistredContext)">
            <summary>
            注册
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditingInterceptorRegistrar.ShouldIntercept(System.Type)">
            <summary>
            是否拦截
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Auditing.AuditingManager">
            <summary>
            审计日志管理器
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingManager.Current">
            <summary>
            当前审计日志范围
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditingManager.BeginScope">
            <summary>
            开始审计
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditingManager.ExecutePostContributors(LinFx.Extensions.Auditing.AuditLogInfo)">
            <summary>
            执行审计贡献者
            </summary>
            <param name="auditLogInfo">审计信息</param>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditingManager.MergeEntityChanges(LinFx.Extensions.Auditing.AuditLogInfo)">
            <summary>
            合并实体变化
            </summary>
            <param name="auditLog"></param>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditingManager.SaveAsync(LinFx.Extensions.Auditing.AuditingManager.DisposableSaveHandle)">
            <summary>
            保存
            </summary>
            <param name="saveHandle"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Auditing.AuditingModule">
            <summary>
            审计模块
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.AuditingOptions">
            <summary>
            审计日志选项
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingOptions.HideErrors">
            <summary>
            在保存审计日志对象时如果发生任何错误,审计日志系统会将错误隐藏并写入常规日志. 
            如果保存审计日志对系统非常重要那么将其设置为 false 以便在隐藏错误时抛出异常.
            Default: true.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingOptions.IsEnabled">
            <summary>
            启用或禁用审计系统的总开关(默认值: true)
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingOptions.ApplicationName">
            <summary>
            如果有多个应用程序保存审计日志到单一的数据库,使用此属性设置为你的应用程序名称区分不同的应用程序日志.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingOptions.IsEnabledForAnonymousUsers">
            <summary>
            如果只想为经过身份验证的用户记录审计日志,请设置为 false.如果为匿名用户保存审计日志,你将看到这些用户的 UserId 值为 null.
            Default: true.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingOptions.AlwaysLogOnException">
            <summary>
            如果设置为 true,将始终在异常/错误情况下保存审计日志,不检查其他选项(IsEnabled 除外,它完全禁用了审计日志).
            Default: true.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingOptions.Contributors">
            <summary>
            实现的列表. 贡献者是扩展审计日志系统的一种方式. 
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingOptions.IgnoredTypes">
            <summary>
            审计日志系统忽略的 Type 列表. 
            如果它是实体类型,则不会保存此类型实体的更改. 在序列化操作参数时也使用此列表.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingOptions.EntityHistorySelectors">
            <summary>
            选择器列表,用于确定是否选择了用于保存实体更改的实体类型. 
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditingOptions.IsEnabledForGetRequests">
            <summary>
            HTTP GET请求通常不应该在数据库进行任何更改,审计日志系统不会为GET请求保存审计日志对象. 
            将此值设置为 true 可为GET请求启用审计日志系统.
            Default: false.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.AuditLogActionInfo">
            <summary>
            执行的动作
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogActionInfo.ServiceName">
            <summary>
            :执行的控制器/服务的名称.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogActionInfo.MethodName">
            <summary>
            控制器/服务执行的方法的名称.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogActionInfo.Parameters">
            <summary>
            控制器/服务执行的方法的名称.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogActionInfo.ExecutionTime">
            <summary>
            执行的时间.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogActionInfo.ExecutionDuration">
            <summary>
            方法执行时长（单位：毫秒）. 
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.AuditLogContributionContext">
            <summary>
            审计贡献者上下文
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogContributionContext.AuditInfo">
            <summary>
            审计信息
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.AuditLogContributor">
            <summary>
            审计贡献者
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.AuditLogInfo">
            <summary>
             审计信息
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.ApplicationName">
            <summary>
            当你保存不同的应用审计日志到同一个数据库,这个属性用来区分应用程序.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.UserId">
            <summary>
            当前用户的Id,用户未登录为 null.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.UserName">
            <summary>
            当前用户的用户名,如果用户已经登录(这里的值不依赖于标识模块/系统进行查找).
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.TenantId">
            <summary>
            当前租户的Id.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.TenantName">
            <summary>
            当前租户的名称.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.ExecutionTime">
            <summary>
            审计日志对象创建的时间.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.ExecutionDuration">
            <summary>
            请求的总执行时间,以毫秒为单位. 可以用来观察应用程序的性能.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.ClientId">
            <summary>
            当前客户端的Id,如果客户端已经通过认证.客户端通常是使用HTTP API的第三方应用程序.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.CorrelationId">
            <summary>
            当前相关Id. 相关Id用于在单个逻辑操作中关联由不同应用程序(或微服务)写入的审计日志.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.ClientIpAddress">
            <summary>
            客户端/用户设备的IP地址.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.ClientName">
            <summary>
            当前客户端的Id,如果客户端已经通过认证.客户端通常是使用HTTP API的第三方应用程序.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.BrowserInfo">
            <summary>
            当前用户的浏览器名称/版本信息.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.HttpMethod">
            <summary>
            当前HTTP请求的方法
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.HttpStatusCode">
            <summary>
            HTTP响应状态码.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.Actions">
            <summary>
            执行的动作 (控制器操作和应用服务方法调用及其参数).
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.Exceptions">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditLogInfo.EntityChanges">
            <summary>
            实体的变化 (在Web请求中).
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditPropertySetter.CurrentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.AuditPropertySetter.CurrentTenant">
            <summary>
            当前租户
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditPropertySetter.SetCreationTime(System.Object)">
            <summary>
            设置创建时间
            </summary>
            <param name="targetObject"></param>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditPropertySetter.SetCreatorId(System.Object)">
            <summary>
            设备创建者
            </summary>
            <param name="targetObject"></param>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditPropertySetter.SetLastModificationTime(System.Object)">
            <summary>
            设置最后修改时间
            </summary>
            <param name="targetObject"></param>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditPropertySetter.SetLastModifierId(System.Object)">
            <summary>
            设备最后修改者Id
            </summary>
            <param name="targetObject"></param>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditPropertySetter.SetDeletionTime(System.Object)">
            <summary>
            设置删除时间
            </summary>
            <param name="targetObject"></param>
        </member>
        <member name="M:LinFx.Extensions.Auditing.AuditPropertySetter.SetDeleterId(System.Object)">
            <summary>
            设置删除者Id
            </summary>
            <param name="targetObject"></param>
        </member>
        <member name="T:LinFx.Extensions.Auditing.EntityChangeInfo">
            <summary>
            实体的变化
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.EntityChangeInfo.EntityTenantId">
            <summary>
            TenantId of the related entity.
            This is not the TenantId of the audit log entry.
            There can be multiple tenant data changes in a single audit log entry.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.EntityChangeType">
            <summary>
            实体变化类型
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IAuditedObject">
            <summary>
            This interface can be implemented to add standard auditing properties to a class.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IAuditedObject`1">
            <summary>
            Extends <see cref="T:LinFx.Extensions.Auditing.IAuditedObject"/> to add user navigation properties.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="M:LinFx.Extensions.Auditing.IAuditingFactory.ShouldSaveAudit(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            判断当前方法是否需要存储审计日志信息
            </summary>
            <param name="methodInfo">方法类型</param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Auditing.IAuditingFactory.CreateAuditLogInfo">
            <summary>
            创建审计信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Auditing.IAuditingFactory.CreateAuditLogAction(LinFx.Extensions.Auditing.AuditLogInfo,System.Type,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            创建审计动作
            </summary>
            <param name="auditLog"></param>
            <param name="type"></param>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Auditing.IAuditingFactory.CreateAuditLogAction(LinFx.Extensions.Auditing.AuditLogInfo,System.Type,System.Reflection.MethodInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建审计动作
            </summary>
            <param name="auditLog"></param>
            <param name="type"></param>
            <param name="method"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IAuditingManager">
            <summary>
            审计日志管理器
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IAuditingManager.Current">
            <summary>
            当前审计范围
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Auditing.IAuditingManager.BeginScope">
            <summary>
            开始审计
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IAuditingStore">
            <summary>
            审计日志储存
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Auditing.IAuditingStore.SaveAsync(LinFx.Extensions.Auditing.AuditLogInfo)">
            <summary>
            保存
            </summary>
            <param name="auditInfo">审计日志</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Auditing.IAuditLogSaveHandle.SaveAsync">
            <summary>
            保存审计
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IAuditLogScope">
            <summary>
            审计范围
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IAuditLogScope.Log">
            <summary>
            审计信息
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IAuditPropertySetter">
            <summary>
            属性自动设置器
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Auditing.IAuditPropertySetter.SetCreationProperties(System.Object)">
            <summary>
            设置创建属性
            </summary>
            <param name="targetObject"></param>
        </member>
        <member name="M:LinFx.Extensions.Auditing.IAuditPropertySetter.SetModificationProperties(System.Object)">
            <summary>
            设置修改属性
            </summary>
            <param name="targetObject"></param>
        </member>
        <member name="M:LinFx.Extensions.Auditing.IAuditPropertySetter.SetDeletionProperties(System.Object)">
            <summary>
            设置删除属性
            </summary>
            <param name="targetObject"></param>
        </member>
        <member name="T:LinFx.Extensions.Auditing.ICreationAuditedObject">
            <summary>
            This interface can be implemented to store creation information (who and when created).
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.ICreationAuditedObject`1">
            <summary>
            Adds navigation property (object reference) to <see cref="T:LinFx.Extensions.Auditing.ICreationAuditedObject"/> interface.
            </summary>
            <typeparam name="TCreator">Type of the user</typeparam>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IDeletionAuditedObject">
            <summary>
            This interface can be implemented to store deletion information (who delete and when deleted).
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IDeletionAuditedObject.DeleterId">
            <summary>
            Id of the deleter user.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IDeletionAuditedObject`1">
            <summary>
            Extends <see cref="T:LinFx.Extensions.Auditing.IDeletionAuditedObject"/> to add user navigation propery.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IDeletionAuditedObject`1.Deleter">
            <summary>
            Reference to the deleter user.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Auditing.IEntityHistorySelectorList.RemoveByName(System.String)">
            <summary>
            Removes a selector by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IFullAuditedObject">
            <summary>
            This interface adds <see cref="T:LinFx.Extensions.Auditing.IDeletionAuditedObject"/> to <see cref="T:LinFx.Extensions.Auditing.IAuditedObject"/>.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IFullAuditedObject`1">
            <summary>
            Adds user navigation properties to <see cref="T:LinFx.Extensions.Auditing.IFullAuditedObject"/> interface for user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IHasCreationTime">
            <summary>
            A standard interface to add CreationTime property.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IHasCreationTime.CreationTime">
            <summary>
            Creation time.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IHasDeletionTime">
            <summary>
            A standard interface to add DeletionTime property to a class.
            It also makes the class soft delete (see <see cref="T:LinFx.Extensions.Auditing.ISoftDelete"/>).
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IHasDeletionTime.DeletionTime">
            <summary>
            Deletion time.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IHasModificationTime">
            <summary>
            A standard interface to add DeletionTime property to a class.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IHasModificationTime.LastModificationTime">
            <summary>
            The last modified time for this entity.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IMayHaveCreator">
            <summary>
            Standard interface for an entity that MAY have a creator.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IMayHaveCreator.CreatorId">
            <summary>
            Id of the creator.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IMayHaveCreator`1.Creator">
            <summary>
            Reference to the creator.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IModificationAuditedObject">
            <summary>
            This interface can be implemented to store modification information (who and when modified lastly).
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IModificationAuditedObject.LastModifierId">
            <summary>
            Last modifier user for this entity.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IModificationAuditedObject`1">
            <summary>
            Adds navigation properties to <see cref="T:LinFx.Extensions.Auditing.IModificationAuditedObject"/> interface for a user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IModificationAuditedObject`1.LastModifier">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IMustHaveCreator`1">
            <summary>
            Standard interface for an entity that MUST have a creator of type <typeparamref name="TCreator"/>.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IMustHaveCreator`1.Creator">
            <summary>
            Reference to the creator.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IMustHaveCreator">
            <summary>
            Standard interface for an entity that MUST have a creator.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IMustHaveCreator.CreatorId">
            <summary>
            Id of the creator.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.ISoftDelete">
            <summary>
            Used to standardize soft deleting entities.
            Soft-delete entities are not actually deleted,
            marked as IsDeleted = true in the database,
            but can not be retrieved to the application normally.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.ISoftDelete.IsDeleted">
            <summary>
            Used to mark an Entity as 'Deleted'. 
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.AuthorizationInterceptor">
            <summary>
            授权拦截器
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Authorization.AuthorizationInterceptor.AuthorizeAsync(LinFx.Extensions.DynamicProxy.IMethodInvocation)">
            <summary>
            授权
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Authorization.AuthorizationInterceptorRegistrar">
            <summary>
            授权拦截器注册
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Authorization.AuthorizationInterceptorRegistrar.RegisterIfNeeded(LinFx.Extensions.DependencyInjection.IOnServiceRegistredContext)">
            <summary>
            注册
            </summary>
            <param name="context">拦截器注册上下文</param>
        </member>
        <member name="M:LinFx.Extensions.Authorization.AuthorizationInterceptorRegistrar.ShouldIntercept(System.Type)">
            <summary>
            是否拦截
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Authorization.AuthorizationModule">
            <summary>
            授权模块
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.AuthorizationOptions">
            <summary>
            Provides programmatic configuration used by <see cref="T:LinFx.Extensions.Authorization.IAuthorizationService"/> and <see cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider"/>.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.AuthorizationOptions.Permissions">
            <summary>
            Gets or sets the <see cref="T:LinFx.Extensions.Authorization.Permissions.PermissionOptions"/> for the authorization  system.
            </summary>
            <value>
            The <see cref="T:LinFx.Extensions.Authorization.Permissions.PermissionOptions"/> for the authorization system.
            </value>
        </member>
        <member name="T:LinFx.Extensions.Authorization.AuthorizationPolicyProvider">
            <summary>
            授权策略提供者
            which provides a <see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationPolicy"/> for a particular name.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.AuthorizationService">
            <summary>
            The default implementation of an  <see cref="T:LinFx.Extensions.Authorization.IAuthorizationService"/> .
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.IAuthorizationService">
            <summary>
            Checks policy based permissions for a user
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Authorization.IMethodInvocationAuthorizationService.CheckAsync(LinFx.Extensions.Authorization.MethodInvocationAuthorizationContext)">
            <summary>
            校验
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Authorization.MethodInvocationAuthorizationService">
            <summary>
            方法调用授权服务
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.PermissionRequirement">
            <summary>
            权限策略
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.PermissionRequirementHandler">
            <summary>
            权限策略处理器
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.AlwaysAllowPermissionChecker">
            <summary>
            Always allows for any permission.
            Use IServiceCollection.AddAlwaysAllowAuthorization() to replace
            IPermissionChecker with this class. This is useful for tests.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.ClientPermissionValueProvider">
            <summary>
            客户端提供者
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.IPermissionChecker">
            <summary>
            权限检查器
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.IPermissionDefinitionContext">
            <summary>
            权限定义上下文
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.IPermissionDefinitionContext.GetGroupOrNull(System.String)">
            <summary>
            获取权限组
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.IPermissionDefinitionContext.AddGroup(System.String,Microsoft.Extensions.Localization.LocalizedString)">
            <summary>
            添加权限组
            </summary>
            <param name="name">名称</param>
            <param name="displayName">显示名称</param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.IPermissionDefinitionManager">
            <summary>
            权限管理器
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.IPermissionDefinitionManager.Get(System.String)">
            <summary>
            根据权限定义的唯一标识获取权限。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.IPermissionDefinitionManager.GetOrNull(System.String)">
            <summary>
            根据权限定义的唯一标识获取权限，如果权限不存在，则返回 null。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.IPermissionDefinitionManager.GetPermissions">
            <summary>
            获取所有权限。
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.IPermissionDefinitionManager.GetGroups">
            <summary>
            获取所有权限组。
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.IPermissionDefinitionProvider">
            <summary>
            权限定义提供者
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.IPermissionDefinitionProvider.Define(LinFx.Extensions.Authorization.Permissions.IPermissionDefinitionContext)">
            <summary>
            定义
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.IPermissionStore">
            <summary>
            权限持久化存储
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.IPermissionStore.IsGrantedAsync(System.String,System.String,System.String)">
            <summary>
            是否授权
            </summary>
            <param name="name"></param>
            <param name="providerName"></param>
            <param name="providerKey"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.IPermissionValueProvider">
            <summary>
            权限值提供者
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.IPermissionValueProvider.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.IPermissionValueProvider.CheckAsync(LinFx.Extensions.Authorization.Permissions.PermissionValueCheckContext)">
            <summary>
            权限校验
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.PermissionChecker">
            <summary>
            权限检查器
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionChecker.PermissionDefinitionManager">
            <summary>
            权限管理器
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionChecker.ValueProviders">
            <summary>
            权限值提供者
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.PermissionChecker.IsGrantedAsync(System.String)">
            <summary>
            检查权限
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.PermissionChecker.IsGrantedAsync(System.Security.Claims.ClaimsPrincipal,System.String)">
            <summary>
            检查权限
            </summary>
            <param name="claimsPrincipal"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.PermissionDefinition">
            <summary>
            权限定义
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.Name">
            <summary>
            唯一的权限标识名称。
            Unique name of the permission.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.Parent">
            <summary>
            当前权限的父级权限。
            Parent of this permission if one exists.
            If set, this permission can be granted only if parent is granted.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.Providers">
            <summary>
            A list of allowed providers to get/set value of this permission.
            An empty list indicates that all providers are allowed.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.DisplayName">
            <summary>
            权限的多语言名称。
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.Properties">
            <summary>
            Can be used to get/set custom properties for this permission definition.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.IsEnabled">
             <summary>
             Indicates whether this permission is enabled or disabled.
             A permission is normally enabled.
             A disabled permission can not be granted to anyone, but it is still
             will be available to check its value (while it will always be false).
            
             Disabling a permission would be helpful to hide a related application
             functionality from users/clients.
            
             Default: true.
             </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.Item(System.String)">
            <summary>
            Gets/sets a key-value on the <see cref="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.Properties"/>.
            </summary>
            <param name="name">Name of the property</param>
            <returns>
            Returns the value in the <see cref="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.Properties"/> dictionary by given name.
            Returns null if given name is not present in the <see cref="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.Properties"/> dictionary.
            </returns>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.WithProperty(System.String,System.Object)">
            <summary>
            Sets a property in the <see cref="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.Properties"/> dictionary.
            This is a shortcut for nested calls on this object.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.WithProviders(System.String[])">
            <summary>
            Sets a property in the <see cref="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinition.Properties"/> dictionary.
            This is a shortcut for nested calls on this object.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.PermissionDefinitionContext">
            <summary>
            权限定义上下文
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinitionContext.Groups">
            <summary>
            权限组
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.PermissionDefinitionManager">
            <summary>
            权限管理器
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinitionManager.PermissionDefinitions">
            <summary>
            权限
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionDefinitionManager.PermissionGroupDefinitions">
            <summary>
            权限组
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.PermissionDefinitionManager.CreatePermissionDefinitions">
            <summary>
            创建权限定义
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.PermissionDefinitionManager.CreatePermissionGroupDefinitions">
            <summary>
            创建权限组定义
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.PermissionDefinitionProvider">
            <summary>
            权限定义提供者
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.PermissionDefinitionProvider.Define(LinFx.Extensions.Authorization.Permissions.IPermissionDefinitionContext)">
            <summary>
            定义
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionGrantInfo.Name">
            <summary>
            资源唯一ID
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionGrantInfo.IsGranted">
            <summary>
            是否授权
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.PermissionGroupDefinition">
            <summary>
            权限组定义
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionGroupDefinition.Name">
            <summary>
            唯一的权限组标识名称。
            Unique name of the group.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionGroupDefinition.Properties">
            <summary>
            权限组的一些自定义属性。
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionGroupDefinition.DisplayName">
            <summary>
            本地化名称。
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionGroupDefinition.Permissions">
            <summary>
            权限组下面的所属权限。
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionGroupDefinition.Item(System.String)">
            <summary>
            自定义属性的快捷索引器。
            Gets/sets a key-value on the <see cref="P:LinFx.Extensions.Authorization.Permissions.PermissionGroupDefinition.Properties"/>.
            </summary>
            <param name="name">Name of the property</param>
            <returns>
            Returns the value in the <see cref="P:LinFx.Extensions.Authorization.Permissions.PermissionGroupDefinition.Properties"/> dictionary by given name.
            Returns null if given name is not present in the <see cref="P:LinFx.Extensions.Authorization.Permissions.PermissionGroupDefinition.Properties"/> dictionary.
            </returns>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.PermissionGroupDefinition.AddPermission(System.String,Microsoft.Extensions.Localization.LocalizedString)">
            <summary>
            添加权限
            </summary>
            <param name="name"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Authorization.Permissions.PermissionGroupDefinition.GetPermissionsWithChildren">
            <summary>
            递归构建权限集合，因为定义的某个权限内部还拥有子权限。
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.PermissionOptions">
            <summary>
            权限选项
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionOptions.DefinitionProviders">
            <summary>
            权限定义提供者
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionOptions.ValueProviders">
            <summary>
            权限值提供者
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.PermissionValueCheckContext">
            <summary>
            权限值检查上下文
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionValueCheckContext.Permission">
            <summary>
            权限
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Authorization.Permissions.PermissionValueCheckContext.Principal">
            <summary>
            身份信息
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.PermissionValueProvider">
            <summary>
            权限值提供者
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.RolePermissionValueProvider">
            <summary>
            角色授权提供者
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Authorization.Permissions.UserPermissionValueProvider">
            <summary>
            用户授权提供者
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Caching.DistributedCache`1">
            <summary>
            Represents a distributed cache of <typeparamref name="TCacheItem" /> type.
            </summary>
            <typeparam name="TCacheItem">The type of cache item being cached.</typeparam>
        </member>
        <member name="T:LinFx.Extensions.Caching.DistributedCache`2">
            <summary>
            Represents a distributed cache of <typeparamref name="TCacheItem" /> type.
            Uses a generic cache key type of <typeparamref name="TCacheKey" /> type.
            </summary>
            <typeparam name="TCacheItem">The type of cache item being cached.</typeparam>
            <typeparam name="TCacheKey">The type of cache key being used.</typeparam>
        </member>
        <member name="M:LinFx.Extensions.Caching.DistributedCache`2.Get(`1,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Gets a cache item with the given key. If no cache item is found for the given key then returns null.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <returns>The cache item, or null.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.DistributedCache`2.GetAsync(`1,System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a cache item with the given key. If no cache item is found for the given key then returns null.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The cache item, or null.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.DistributedCache`2.GetOrAdd(`1,System.Func{`0},System.Func{Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Gets or Adds a cache item with the given key. If no cache item is found for the given key then adds a cache item
            provided by <paramref name="factory" /> delegate and returns the provided cache item.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="factory">The factory delegate is used to provide the cache item when no cache item is found for the given <paramref name="key" />.</param>
            <param name="optionsFactory">The cache options for the factory delegate.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <returns>The cache item.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.DistributedCache`2.GetOrAddAsync(`1,System.Func{System.Threading.Tasks.Task{`0}},System.Func{Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets or Adds a cache item with the given key. If no cache item is found for the given key then adds a cache item
            provided by <paramref name="factory" /> delegate and returns the provided cache item.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="factory">The factory delegate is used to provide the cache item when no cache item is found for the given <paramref name="key" />.</param>
            <param name="optionsFactory">The cache options for the factory delegate.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The cache item.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.DistributedCache`2.Set(`1,`0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Sets the cache item value for the provided key.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="value">The cache item value to set in the cache.</param>
            <param name="options">The cache options for the value.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.DistributedCache`2.SetAsync(`1,`0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the cache item value for the provided key.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="value">The cache item value to set in the cache.</param>
            <param name="options">The cache options for the value.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.DistributedCache`2.Refresh(`1,System.Nullable{System.Boolean})">
            <summary>
            Refreshes the cache value of the given key, and resets its sliding expiration timeout.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.DistributedCache`2.RefreshAsync(`1,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Refreshes the cache value of the given key, and resets its sliding expiration timeout.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.DistributedCache`2.Remove(`1,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Removes the cache item for given key from cache.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.DistributedCache`2.RemoveAsync(`1,System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Removes the cache item for given key from cache.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="P:LinFx.Extensions.Caching.DistributedCacheOptions.HideErrors">
            <summary>
            Throw or hide exceptions for the distributed cache.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Caching.DistributedCacheOptions.KeyPrefix">
            <summary>
            Cache key prefix.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Caching.DistributedCacheOptions.GlobalCacheEntryOptions">
            <summary>
            Global Cache entry options.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Caching.DistributedCacheOptions.CacheConfigurators">
            <summary>
            List of all cache configurators.
            (func argument:Name of cache)
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Caching.IDistributedCache`1">
            <summary>
            Represents a distributed cache of <typeparamref name="TCacheItem" /> type.
            </summary>
            <typeparam name="TCacheItem">The type of cache item being cached.</typeparam>
        </member>
        <member name="T:LinFx.Extensions.Caching.IDistributedCache`2">
            <summary>
            Represents a distributed cache of <typeparamref name="TCacheItem" /> type.
            Uses a generic cache key type of <typeparamref name="TCacheKey" /> type.
            </summary>
            <typeparam name="TCacheItem">The type of cache item being cached.</typeparam>
            <typeparam name="TCacheKey">The type of cache key being used.</typeparam>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.Get(`1,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Gets a cache item with the given key. If no cache item is found for the given key then returns null.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <returns>The cache item, or null.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.GetMany(System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Boolean},System.Boolean)">
             <summary>
             Gets multiple cache items with the given keys.
            
             The returned list contains exactly the same count of items specified in the given keys.
             An item in the return list can not be null, but an item in the list has null value
             if the related key not found in the cache.
             </summary>
             <param name="keys">The keys of cached items to be retrieved from the cache.</param>
             <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
             <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
             <returns>List of cache items.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.GetManyAsync(System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Gets multiple cache items with the given keys.
            
             The returned list contains exactly the same count of items specified in the given keys.
             An item in the return list can not be null, but an item in the list has null value
             if the related key not found in the cache.
            
             </summary>
             <param name="keys">The keys of cached items to be retrieved from the cache.</param>
             <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
             <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
             /// <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
             <returns>List of cache items.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.GetAsync(`1,System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a cache item with the given key. If no cache item is found for the given key then returns null.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The cache item, or null.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.GetOrAdd(`1,System.Func{`0},System.Func{Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Gets or Adds a cache item with the given key. If no cache item is found for the given key then adds a cache item
            provided by <paramref name="factory" /> delegate and returns the provided cache item.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="factory">The factory delegate is used to provide the cache item when no cache item is found for the given <paramref name="key" />.</param>
            <param name="optionsFactory">The cache options for the factory delegate.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <returns>The cache item.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.GetOrAddAsync(`1,System.Func{System.Threading.Tasks.Task{`0}},System.Func{Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets or Adds a cache item with the given key. If no cache item is found for the given key then adds a cache item
            provided by <paramref name="factory" /> delegate and returns the provided cache item.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="factory">The factory delegate is used to provide the cache item when no cache item is found for the given <paramref name="key" />.</param>
            <param name="optionsFactory">The cache options for the factory delegate.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The cache item.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.GetOrAddMany(System.Collections.Generic.IEnumerable{`1},System.Func{System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`1,`0}}},System.Func{Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Gets or Adds multiple cache items with the given keys. If any cache items not found for the given keys then adds cache items
            provided by <paramref name="factory" /> delegate and returns the provided cache items.
            </summary>
            <param name="keys">The keys of cached items to be retrieved from the cache.</param>
            <param name="factory">The factory delegate is used to provide the cache items when no cache items are found for the given <paramref name="keys" />.</param>
            <param name="optionsFactory">The cache options for the factory delegate.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <returns>The cache items.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.GetOrAddManyAsync(System.Collections.Generic.IEnumerable{`1},System.Func{System.Collections.Generic.IEnumerable{`1},System.Threading.Tasks.Task{System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`1,`0}}}},System.Func{Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets or Adds multiple cache items with the given keys. If any cache items not found for the given keys then adds cache items
            provided by <paramref name="factory" /> delegate and returns the provided cache items.
            </summary>
            <param name="keys">The keys of cached items to be retrieved from the cache.</param>
            <param name="factory">The factory delegate is used to provide the cache items when no cache items are found for the given <paramref name="keys" />.</param>
            <param name="optionsFactory">The cache options for the factory delegate.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The cache items.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.Set(`1,`0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Sets the cache item value for the provided key.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="value">The cache item value to set in the cache.</param>
            <param name="options">The cache options for the value.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.SetAsync(`1,`0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the cache item value for the provided key.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="value">The cache item value to set in the cache.</param>
            <param name="options">The cache options for the value.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.SetMany(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`1,`0}},Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Sets multiple cache items.
            Based on the implementation, this can be more efficient than setting multiple items individually.
            </summary>
            <param name="items">Items to set on the cache</param>
            <param name="options">The cache options for the value.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.SetManyAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`1,`0}},Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets multiple cache items.
            Based on the implementation, this can be more efficient than setting multiple items individually.
            </summary>
            <param name="items">Items to set on the cache</param>
            <param name="options">The cache options for the value.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.Refresh(`1,System.Nullable{System.Boolean})">
            <summary>
            Refreshes the cache value of the given key, and resets its sliding expiration timeout.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.RefreshAsync(`1,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Refreshes the cache value of the given key, and resets its sliding expiration timeout.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.RefreshMany(System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Boolean})">
            <summary>
            Refreshes the cache value of the given keys, and resets their sliding expiration timeout.
            Based on the implementation, this can be more efficient than setting multiple items individually.
            </summary>
            <param name="keys">The keys of cached items to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.RefreshManyAsync(System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Refreshes the cache value of the given keys, and resets their sliding expiration timeout.
            Based on the implementation, this can be more efficient than setting multiple items individually.
            </summary>
            <param name="keys">The keys of cached items to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.Remove(`1,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Removes the cache item for given key from cache.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.RemoveAsync(`1,System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Removes the cache item for given key from cache.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.RemoveMany(System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Removes the cache items for given keys from cache.
            </summary>
            <param name="keys">The keys of cached items to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.IDistributedCache`2.RemoveManyAsync(System.Collections.Generic.IEnumerable{`1},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Removes the cache items for given keys from cache.
            </summary>
            <param name="keys">The keys of cached items to be retrieved from the cache.</param>
            <param name="hideErrors">Indicates to throw or hide the exceptions for the distributed cache.</param>
            <param name="considerUow">This will store the cache in the current unit of work until the end of the current unit of work does not really affect the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="P:LinFx.Extensions.Data.CommonDbProperties.DbTablePrefix">
            <summary>
            This table prefix is shared by most of the modules.
            You can change it to set table prefix for all modules using this.
            
            Default value: "".
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Data.CommonDbProperties.DbSchema">
            <summary>
            Default value: null.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Data.ConnectionStringNameAttribute.GetConnStringName(System.Type)">
            <summary>
            获取链接字符串
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:LinFx.Extensions.Data.DatabaseInfo.MappedConnections">
            <summary>
            List of connection names mapped to this database.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Data.DatabaseInfo.IsUsedByTenants">
            <summary>
            Is this database used by tenants. Set this to false if this database
            can not owned by tenants.
            
            Default: true.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Data.DatabaseInfoDictionary.RefreshIndexes">
            <summary>
            This method should be called if this dictionary changes.
            It refreshes indexes for quick access to the connection informations.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Data.DataFilter">
            <summary>
            数据过滤
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Data.DataFilterState">
            <summary>
            数据过滤状态
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Data.DataFilterState.IsEnabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Data.DataFilterState.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Data.DataModule">
            <summary>
            数据过滤模块
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Data.DbConcurrencyException.#ctor">
            <summary>
            Creates a new <see cref="T:LinFx.Extensions.Data.DbConcurrencyException"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Data.DbConcurrencyException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:LinFx.Extensions.Data.DbConcurrencyException"/> object.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:LinFx.Extensions.Data.DbConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:LinFx.Extensions.Data.DbConcurrencyException"/> object.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:LinFx.Extensions.Data.DefaultConnectionStringResolver">
            <summary>
            默认连接字符串解析器
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Data.IConnectionStringResolver">
            <summary>
            连接字符串解析器
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Data.IDataFilter">
            <summary>
            数据过滤
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Data.IDataFilter.Enable``1">
            <summary>
            启用
            </summary>
            <typeparam name="TFilter"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Data.IDataFilter.Disable``1">
            <summary>
            关闭
            </summary>
            <typeparam name="TFilter"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Data.IDataFilter.IsEnabled``1">
            <summary>
            是否启用
            </summary>
            <typeparam name="TFilter"></typeparam>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Data.IDataFilter`1">
            <summary>
            数据过滤
            </summary>
            <typeparam name="TFilter"></typeparam>
        </member>
        <member name="M:LinFx.Extensions.Data.IDataFilter`1.Enable">
            <summary>
            启用
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Data.IDataFilter`1.Disable">
            <summary>
            关闭
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinFx.Extensions.Data.IDataFilter`1.IsEnabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="T:LinFx.Extensions.DependencyInjection.AutowiredAttribute">
            <summary>
            @Autowired
            </summary>
        </member>
        <member name="M:LinFx.Extensions.DependencyInjection.ConventionalRegistrarBase.GetServiceAttributeOrNull(System.Type)">
            <summary>
            获取Service特性注入的类
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.DependencyInjection.ConventionalRegistrarBase.GetLifeTimeOrNull(System.Type,LinFx.Extensions.DependencyInjection.ServiceAttribute)">
            <summary>
            获取生命周期
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.DependencyInjection.ConventionalRegistrarBase.GetExposedServiceTypes(System.Type)">
            <summary>
            获取服务类型列表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.DependencyInjection.ExposedServiceExplorer.GetExposedServices(System.Type)">
            <summary>
            获取服务类型列表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.DependencyInjection.ExposeServicesAttribute">
            <summary>
            控制相关类服务提供
            </summary>
        </member>
        <member name="T:LinFx.Extensions.DependencyInjection.IConventionalRegistrar">
            <summary>
            服务注册
            </summary>
        </member>
        <member name="M:LinFx.Extensions.DependencyInjection.IConventionalRegistrar.AddAssembly(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly)">
            <summary>
            添加程序集
            </summary>
            <param name="services"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:LinFx.Extensions.DependencyInjection.IConventionalRegistrar.AddTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])">
            <summary>
            添加类型数组
            </summary>
            <param name="services"></param>
            <param name="types"></param>
        </member>
        <member name="M:LinFx.Extensions.DependencyInjection.IConventionalRegistrar.AddType(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            填加具体类型
            </summary>
            <param name="services"></param>
            <param name="type"></param>
        </member>
        <member name="T:LinFx.Extensions.DependencyInjection.IExposedServiceTypesProvider">
            <summary>
            服务类型提供者
            </summary>
        </member>
        <member name="T:LinFx.Extensions.DependencyInjection.IObjectAccessor`1">
            <summary>
            对象访问器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:LinFx.Extensions.DependencyInjection.IOnServiceRegistredContext">
            <summary>
            拦截器注册上下文
            </summary>
        </member>
        <member name="P:LinFx.Extensions.DependencyInjection.IOnServiceRegistredContext.Interceptors">
            <summary>
            拦截器
            </summary>
        </member>
        <member name="P:LinFx.Extensions.DependencyInjection.IOnServiceRegistredContext.ImplementationType">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:LinFx.Extensions.DependencyInjection.ObjectAccessor`1">
            <summary>
            对象访问器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:LinFx.Extensions.DependencyInjection.ServiceAttribute">
            <summary>
            Service 特性注入
            </summary>
        </member>
        <member name="P:LinFx.Extensions.DependencyInjection.ServiceAttribute.Lifetime">
            <summary>
            生命周期
            </summary>
        </member>
        <member name="P:LinFx.Extensions.DependencyInjection.ServiceAttribute.TryRegister">
            <summary>
            设置true则只注册以前未注册的服务
            </summary>
        </member>
        <member name="P:LinFx.Extensions.DependencyInjection.ServiceAttribute.ReplaceServices">
            <summary>
            设置true则替换之前已经注册过的服务
            </summary>
        </member>
        <member name="T:LinFx.Extensions.DependencyInjection.ServiceContext">
            <summary>
            服务提供程序上下文
            </summary>
        </member>
        <member name="T:LinFx.Extensions.DynamicProxy.AsyncDeterminationInterceptor`1">
            <summary>
            异步拦截器
            </summary>
            <typeparam name="TInterceptor"></typeparam>
        </member>
        <member name="T:LinFx.Extensions.DynamicProxy.CastleAsyncInterceptorAdapter`1">
            <summary>
            泛型适配器
            </summary>
            <typeparam name="TInterceptor"></typeparam>
        </member>
        <member name="T:LinFx.Extensions.DynamicProxy.CastleMethodInvocationAdapter">
            <summary>
            方法拦截适配器
            </summary>
        </member>
        <member name="T:LinFx.Extensions.DynamicProxy.DynamicProxyIgnoreTypes">
            <summary>
            Castle's dynamic proxy class feature will have performance issues for some components, such as the controller of Asp net core MVC.
            For related discussions, see: https://github.com/castleproject/Core/issues/486 https://github.com/abpframework/abp/issues/3180
            The Abp framework may enable interceptors for certain components (UOW, Auditing, Authorization, etc.), which requires dynamic proxy classes, but will cause application performance to decline.
            We need to use other methods for the controller to implement interception, such as middleware or MVC / Page filters.
            So we provide some ignored types to avoid enabling dynamic proxy classes.
            By default it is empty. When you use middleware or filters for these components in your application, you can add these types to the list.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.DynamicProxy.IInterceptor">
            <summary>
            拦截器接口
            </summary>
        </member>
        <member name="M:LinFx.Extensions.DynamicProxy.IInterceptor.InterceptAsync(LinFx.Extensions.DynamicProxy.IMethodInvocation)">
            <summary>
            异步方法拦截
            </summary>
            <param name="invocation">调用方法</param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.DynamicProxy.IMethodInvocation">
            <summary>
            拦截方法调用参数
            </summary>
        </member>
        <member name="P:LinFx.Extensions.DynamicProxy.IMethodInvocation.Arguments">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:LinFx.Extensions.DynamicProxy.IMethodInvocation.ArgumentsDictionary">
            <summary>
            参数字典
            </summary>
        </member>
        <member name="P:LinFx.Extensions.DynamicProxy.IMethodInvocation.GenericArguments">
            <summary>
            泛型参数
            </summary>
        </member>
        <member name="P:LinFx.Extensions.DynamicProxy.IMethodInvocation.TargetObject">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="P:LinFx.Extensions.DynamicProxy.IMethodInvocation.Method">
            <summary>
            方法
            </summary>
        </member>
        <member name="P:LinFx.Extensions.DynamicProxy.IMethodInvocation.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="M:LinFx.Extensions.DynamicProxy.IMethodInvocation.ProceedAsync">
            <summary>
            处理
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.DynamicProxy.Interceptor">
            <summary>
            拦截器
            </summary>
        </member>
        <member name="T:LinFx.Extensions.EventBus.ActionEventHandler`1">
            <summary>
            This event handler is an adapter to be able to use an action as <see cref="T:LinFx.Extensions.EventBus.Local.ILocalEventHandler`1"/> implementation.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
        </member>
        <member name="P:LinFx.Extensions.EventBus.ActionEventHandler`1.Action">
            <summary>
            Function to handle the event.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EventBus.ActionEventHandler`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Creates a new instance of <see cref="T:LinFx.Extensions.EventBus.ActionEventHandler`1"/>.
            </summary>
            <param name="handler">Action to handle the event</param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.ActionEventHandler`1.HandleEventAsync(`0)">
            <summary>
            Handles the event.
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="T:LinFx.Extensions.EventBus.Distributed.IDistributedEventBus">
            <summary>
            分布式事件总线
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EventBus.Distributed.IDistributedEventBus.Subscribe``1(LinFx.Extensions.EventBus.Distributed.IDistributedEventHandler{``0})">
            <summary>
            Registers to an event. 
            Same (given) instance of the handler is used for all event occurrences.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="handler">Object to handle the event</param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.Distributed.IDistributedEventHandler`1.HandleEventAsync(`0)">
            <summary>
            Handler handles the event by implementing this method.
            </summary>
            <param name="eventData">Event data</param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.Distributed.LocalDistributedEventBus.Subscribe(LinFx.Collections.ITypeList{LinFx.Extensions.EventBus.IEventHandler})">
            <summary>
            订阅
            </summary>
            <param name="handlers"></param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.EventBusBase.TriggerHandlersAsync(System.Type,System.Object,System.Action{LinFx.Extensions.EventBus.EventExecutionErrorContext})">
            <summary>
            触发
            </summary>
            <param name="eventType"></param>
            <param name="eventData"></param>
            <param name="onErrorAction"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.EventBus.EventBusBase.TriggerHandlersAsync(System.Type,System.Object,System.Collections.Generic.List{System.Exception})">
            <summary>
            触发
            </summary>
            <param name="eventType"></param>
            <param name="eventData"></param>
            <param name="exceptions"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.EventBus.EventBusBase.TriggerHandlerAsync(LinFx.Extensions.EventBus.IEventHandlerFactory,System.Type,System.Object,System.Collections.Generic.List{System.Exception})">
            <summary>
            触发
            </summary>
            <param name="asyncHandlerFactory"></param>
            <param name="eventType"></param>
            <param name="eventData"></param>
            <param name="exceptions"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.EventBus.EventBusModule">
            <summary>
            事件总线模块
            </summary>
        </member>
        <member name="T:LinFx.Extensions.EventBus.EventHandlerFactoryUnregistrar">
            <summary>
            Used to unregister a <see cref="T:LinFx.Extensions.EventBus.IEventHandlerFactory"/> on <see cref="M:LinFx.Extensions.EventBus.EventHandlerFactoryUnregistrar.Dispose"/> method.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.EventBus.IEventBus">
            <summary>
            事件总线
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.PublishAsync``1(``0,System.Boolean)">
            <summary>
            Triggers an event.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="eventData">Related data for the event</param>
            <param name="onUnitOfWorkComplete">True, to publish the event at the end of the current unit of work, if available</param>
            <returns>The task to handle async operation</returns>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.PublishAsync(System.Type,System.Object,System.Boolean)">
            <summary>
            Triggers an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="eventData">Related data for the event</param>
            <param name="onUnitOfWorkComplete">True, to publish the event at the end of the current unit of work, if available</param>
            <returns>The task to handle async operation</returns>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.Subscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Registers to an event.
            Given action is called for all event occurrences.
            </summary>
            <param name="action">Action to handle events</param>
            <typeparam name="TEvent">Event type</typeparam>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.Subscribe``2">
            <summary>
            Registers to an event.
            A new instance of <typeparamref name="THandler"/> object is created for every event occurrence.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <typeparam name="THandler">Type of the event handler</typeparam>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.Subscribe(System.Type,LinFx.Extensions.EventBus.IEventHandler)">
            <summary>
            Registers to an event.
            Same (given) instance of the handler is used for all event occurrences.
            </summary>
            <param name="eventType">Event type</param>
            <param name="handler">Object to handle the event</param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.Subscribe``1(LinFx.Extensions.EventBus.IEventHandlerFactory)">
            <summary>
            Registers to an event.
            Given factory is used to create/release handlers
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="factory">A factory to create/release handlers</param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.Subscribe(System.Type,LinFx.Extensions.EventBus.IEventHandlerFactory)">
            <summary>
            Registers to an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="factory">A factory to create/release handlers</param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.Unsubscribe``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="action"></param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.Unsubscribe``1(LinFx.Extensions.EventBus.Local.ILocalEventHandler{``0})">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="handler">Handler object that is registered before</param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.Unsubscribe(System.Type,LinFx.Extensions.EventBus.IEventHandler)">
            <summary>
            Unregisters from an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="handler">Handler object that is registered before</param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.Unsubscribe``1(LinFx.Extensions.EventBus.IEventHandlerFactory)">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="factory">Factory object that is registered before</param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.Unsubscribe(System.Type,LinFx.Extensions.EventBus.IEventHandlerFactory)">
            <summary>
            Unregisters from an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="factory">Factory object that is registered before</param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.UnsubscribeAll``1">
            <summary>
            Unregisters all event handlers of given event type.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.UnsubscribeAll(System.Type)">
            <summary>
            Unregisters all event handlers of given event type.
            </summary>
            <param name="eventType">Event type</param>
        </member>
        <member name="T:LinFx.Extensions.EventBus.IEventDataMayHaveTenantId">
             <summary>
             An event data object (or event transfer object) can implement this interface
             to indicate that this event may be related to a tenant.
            
             If an event data class is always related to a tenant, then directly implement the
             <see cref="M:LinFx.Extensions.EventBus.IEventDataMayHaveTenantId.IsMultiTenant(System.String@)"/> interface instead of this one.
            
             This interface is typically implemented by generic event handlers where the generic
             parameter may implement <see cref="M:LinFx.Extensions.EventBus.IEventDataMayHaveTenantId.IsMultiTenant(System.String@)"/> or not.
             </summary>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventDataMayHaveTenantId.IsMultiTenant(System.String@)">
            <summary>
            Returns true if this event data has a Tenant Id information.
            If so, it should set the <paramref name="tenantId"/> our parameter.
            Otherwise, the <paramref name="tenantId"/> our parameter value should not be informative
            (it will be null as expected, but doesn't indicate a tenant with null tenant id).
            </summary>
            <param name="tenantId">
            The tenant id that is set if this method returns true.
            </param>
        </member>
        <member name="T:LinFx.Extensions.EventBus.IEventDataWithInheritableGenericArgument">
            <summary>
            This interface must be implemented by event data classes that
            has a single generic argument and this argument will be used by inheritance. 
            
            For example;
            Assume that Student inherits From Person. When trigger an EntityCreatedEventData{Student},
            EntityCreatedEventData{Person} is also triggered if EntityCreatedEventData implements
            this interface.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventDataWithInheritableGenericArgument.GetConstructorArgs">
            <summary>
            Gets arguments to create this class since a new instance of this class is created.
            </summary>
            <returns>Constructor arguments</returns>
        </member>
        <member name="T:LinFx.Extensions.EventBus.IEventHandler">
            <summary>
            Undirect base interface for all event handlers.
            Implement <see cref="T:LinFx.Extensions.EventBus.Local.ILocalEventHandler`1"/> or <see cref="T:LinFx.Extensions.EventBus.Distributed.IDistributedEventHandler`1"/> instead of this one.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.EventBus.IEventHandlerFactory">
            <summary>
             事件处理器
            Defines an interface for factories those are responsible to create/get and release of event handlers.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventHandlerFactory.GetHandler">
            <summary>
            Gets an event handler.
            </summary>
            <returns>The event handler</returns>
        </member>
        <member name="T:LinFx.Extensions.EventBus.IocEventHandlerFactory">
            <summary>
            This <see cref="T:LinFx.Extensions.EventBus.IEventHandlerFactory"/> implementation is used to get/release
            handlers using Ioc.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IocEventHandlerFactory.GetHandler">
            <summary>
            Resolves handler object from Ioc container.
            </summary>
            <returns>Resolved handler object</returns>
        </member>
        <member name="T:LinFx.Extensions.EventBus.Local.ILocalEventBus">
            <summary>
            本地事件总线
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EventBus.Local.ILocalEventBus.Subscribe``1(LinFx.Extensions.EventBus.Local.ILocalEventHandler{``0})">
            <summary>
            Registers to an event. 
            Same (given) instance of the handler is used for all event occurrences.
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="handler">Object to handle the event</param>
        </member>
        <member name="M:LinFx.Extensions.EventBus.Local.ILocalEventHandler`1.HandleEventAsync(`0)">
            <summary>
            Handler handles the event by implementing this method.
            </summary>
            <param name="eventData">Event data</param>
        </member>
        <member name="T:LinFx.Extensions.EventBus.Local.LocalEventBus">
            <summary>
            Implements EventBus as Singleton pattern.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.EventBus.Local.LocalEventBus.Logger">
            <summary>
            Reference to the Logger.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EventBus.Local.LocalEventBus.PublishAsync(LinFx.Extensions.EventBus.Local.LocalEventMessage)">
            <summary>
            发布
            </summary>
            <param name="localEventMessage"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.EventBus.Local.LocalEventMessage">
            <summary>
            本地事件消息
            </summary>
        </member>
        <member name="T:LinFx.Extensions.EventBus.SingleInstanceHandlerFactory">
            <summary>
            This <see cref="T:LinFx.Extensions.EventBus.IEventHandlerFactory"/> implementation is used to handle events
            by a single instance object. 
            </summary>
            <remarks>
            This class always gets the same single instance of handler.
            </remarks>
        </member>
        <member name="P:LinFx.Extensions.EventBus.SingleInstanceHandlerFactory.HandlerInstance">
            <summary>
            The event handler instance.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EventBus.SingleInstanceHandlerFactory.#ctor(LinFx.Extensions.EventBus.IEventHandler)">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:LinFx.Extensions.EventBus.TransientEventHandlerFactory`1">
            <summary>
            This <see cref="T:LinFx.Extensions.EventBus.IEventHandlerFactory"/> implementation is used to handle events
            by a transient instance object. 
            </summary>
            <remarks>
            This class always creates a new transient instance of the handler type.
            </remarks>
        </member>
        <member name="T:LinFx.Extensions.EventBus.TransientEventHandlerFactory">
            <summary>
            This <see cref="T:LinFx.Extensions.EventBus.IEventHandlerFactory"/> implementation is used to handle events
            by a transient instance object. 
            </summary>
            <remarks>
            This class always creates a new transient instance of the handler type.
            </remarks>
        </member>
        <member name="M:LinFx.Extensions.EventBus.TransientEventHandlerFactory.GetHandler">
            <summary>
            Creates a new instance of the handler object.
            </summary>
            <returns>The handler object</returns>
        </member>
        <member name="T:LinFx.Extensions.ExceptionHandling.ExceptionHandlingOptions">
            <summary>
            异常处理选项
            </summary>
        </member>
        <member name="T:LinFx.Extensions.ExceptionHandling.IExceptionToErrorInfoConverter">
            <summary>
            This interface can be implemented to convert an <see cref="T:System.Exception"/> object to an <see cref="T:LinFx.Extensions.Http.RemoteServiceErrorInfo"/> object.
            Implements Chain Of Responsibility pattern.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.ExceptionHandling.IExceptionToErrorInfoConverter.Convert(System.Exception,System.Action{LinFx.Extensions.ExceptionHandling.ExceptionHandlingOptions})">
            <summary>
            Converter method.
            </summary>
            <param name="exception">The exception.</param>
            <param name="options">Additional options.</param>
            <returns>Error info or null</returns>
        </member>
        <member name="T:LinFx.Extensions.Guids.IGuidGenerator">
            <summary>
            Used to generate Ids.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Guids.IGuidGenerator.Create">
            <summary>
            Creates a new <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Guids.SequentialGuidGenerator">
            <summary>
            Implements <see cref="T:LinFx.Extensions.Guids.IGuidGenerator"/> by creating sequential Guids.
            Use <see cref="T:LinFx.Extensions.Guids.SequentialGuidGeneratorOptions"/> to configure.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Guids.SequentialGuidGeneratorOptions.DefaultSequentialGuidType">
            <summary>
            Default value: null (unspecified).
            Use <see cref="M:LinFx.Extensions.Guids.SequentialGuidGeneratorOptions.GetDefaultSequentialGuidType"/> method
            to get the value on use, since it fall backs to a default value.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Guids.SequentialGuidGeneratorOptions.GetDefaultSequentialGuidType">
            <summary>
            Get the <see cref="P:LinFx.Extensions.Guids.SequentialGuidGeneratorOptions.DefaultSequentialGuidType"/> value
            or returns <see cref="F:LinFx.Extensions.Guids.SequentialGuidType.SequentialAtEnd"/>
            if <see cref="P:LinFx.Extensions.Guids.SequentialGuidGeneratorOptions.DefaultSequentialGuidType"/> was null.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Guids.SequentialGuidType">
            <summary>
            Describes the type of a sequential GUID value.
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Guids.SequentialGuidType.SequentialAsString">
            <summary>
            The GUID should be sequential when formatted using the <see cref="M:System.Guid.ToString" /> method.
            Used by MySql and PostgreSql.
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Guids.SequentialGuidType.SequentialAsBinary">
            <summary>
            The GUID should be sequential when formatted using the <see cref="M:System.Guid.ToByteArray" /> method.
            Used by Oracle.
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Guids.SequentialGuidType.SequentialAtEnd">
            <summary>
            The sequential portion of the GUID should be located at the end of the Data4 block.
            Used by SqlServer.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Guids.SimpleGuidGenerator">
            <summary>
            Implements <see cref="T:LinFx.Extensions.Guids.IGuidGenerator"/> by using <see cref="M:System.Guid.NewGuid"/>.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Http.RemoteServiceErrorInfo">
            <summary>
            Used to store information about an error.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Http.RemoteServiceErrorInfo.Code">
            <summary>
            Error code.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Http.RemoteServiceErrorInfo.Message">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Http.RemoteServiceErrorInfo.Details">
            <summary>
            Error details.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Http.RemoteServiceErrorInfo.ValidationErrors">
            <summary>
            Validation errors if exists.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Http.RemoteServiceErrorInfo.#ctor">
            <summary>
            Creates a new instance of <see cref="T:LinFx.Extensions.Http.RemoteServiceErrorInfo"/>.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Http.RemoteServiceErrorInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:LinFx.Extensions.Http.RemoteServiceErrorInfo"/>.
            </summary>
            <param name="code">Error code</param>
            <param name="details">Error details</param>
            <param name="message">Error message</param>
        </member>
        <member name="T:LinFx.Extensions.Http.RemoteServiceValidationErrorInfo">
            <summary>
            Used to store information about a validation error.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Http.RemoteServiceValidationErrorInfo.Message">
            <summary>
            Validation error message.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Http.RemoteServiceValidationErrorInfo.Members">
            <summary>
            Relate invalid members (fields/properties).
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Http.RemoteServiceValidationErrorInfo.#ctor">
            <summary>
            Creates a new instance of <see cref="T:LinFx.Extensions.Http.RemoteServiceValidationErrorInfo"/>.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Http.RemoteServiceValidationErrorInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:LinFx.Extensions.Http.RemoteServiceValidationErrorInfo"/>.
            </summary>
            <param name="message">Validation error message</param>
        </member>
        <member name="M:LinFx.Extensions.Http.RemoteServiceValidationErrorInfo.#ctor(System.String,System.String[])">
            <summary>
            Creates a new instance of <see cref="T:LinFx.Extensions.Http.RemoteServiceValidationErrorInfo"/>.
            </summary>
            <param name="message">Validation error message</param>
            <param name="members">Related invalid members</param>
        </member>
        <member name="M:LinFx.Extensions.Http.RemoteServiceValidationErrorInfo.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:LinFx.Extensions.Http.RemoteServiceValidationErrorInfo"/>.
            </summary>
            <param name="message">Validation error message</param>
            <param name="member">Related invalid member</param>
        </member>
        <member name="T:LinFx.Extensions.Logging.IHasLogLevel">
            <summary>
            Interface to define a <see cref="P:LinFx.Extensions.Logging.IHasLogLevel.LogLevel"/> property (see <see cref="P:LinFx.Extensions.Logging.IHasLogLevel.LogLevel"/>).
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Logging.IHasLogLevel.LogLevel">
            <summary>
            Log severity.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.MediatR.Idempotency.IdentifiedCommandHandler`2">
            <summary>
            Provides a base implementation for handling duplicate request and ensuring idempotent updates, in the cases where
            a requestid sent by client is used to detect duplicate requests.
            </summary>
            <typeparam name="TCommand">Type of the command handler that performs the operation if request is not duplicated</typeparam>
            <typeparam name="TResponse">Return value of the inner command handler</typeparam>
        </member>
        <member name="M:LinFx.Extensions.MediatR.Idempotency.IdentifiedCommandHandler`2.CreateResultForDuplicateRequest">
            <summary>
            Creates the result value to return if a previous request was found
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.MediatR.Idempotency.IdentifiedCommandHandler`2.Handle(LinFx.Extensions.MediatR.Idempotency.IdentifiedCommand{`0,`1},System.Threading.CancellationToken)">
            <summary>
            This method handles the command. It just ensures that no other request exists with the same ID, and if this is the case
            just enqueues the original inner command.
            </summary>
            <param name="message">IdentifiedCommand which contains both original command and request ID</param>
            <param name="cancellationToken"></param>
            <returns>Return value of inner command or default value if request same ID was found</returns>
        </member>
        <member name="T:LinFx.Extensions.Modularity.DependsOnAttribute">
            <summary>
            Used to define dependencies of a type.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Modularity.IModule">
            <summary>
            模块
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Modularity.IModuleInitializer">
            <summary>
            模块初始化
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Modularity.IModuleLoader">
            <summary>
            模块加载器
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Modularity.IModuleLoader.LoadModules(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,LinFx.Extensions.Modularity.PlugIns.PlugInSourceList)">
            <summary>
            加载模块
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Modularity.Module">
            <summary>
            模块
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Modularity.Module.OnApplicationInitializationAsync(LinFx.Application.ApplicationInitializationContext)">
            <summary>
            应用程序初始化
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:LinFx.Extensions.Modularity.Module.OnApplicationShutdownAsync(LinFx.Application.ApplicationShutdownContext)">
            <summary>
            应用程序关闭
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:LinFx.Extensions.Modularity.ModuleManager.InitializeModulesAsync(LinFx.Application.ApplicationInitializationContext)">
            <summary>
            初化始模块
            </summary>
            <param name="context"></param>
            <exception cref="T:LinFx.LinFxException"></exception>
        </member>
        <member name="T:LinFx.Extensions.Modularity.PlugIns.IPlugInSource">
            <summary>
            插件
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Modularity.ServiceConfigurationContext.Item(System.String)">
             <summary>
             Gets/sets arbitrary named objects those can be stored during
             the service registration phase and shared between modules.
            
             This is a shortcut usage of the <see cref="P:LinFx.Extensions.Modularity.ServiceConfigurationContext.Items"/> dictionary.
             Returns null if given key is not found in the <see cref="P:LinFx.Extensions.Modularity.ServiceConfigurationContext.Items"/> dictionary.
             </summary>
             <param name="key"></param>
             <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.MultiTenancy.CurrentTenant">
            <summary>
            当前租户
            </summary>
        </member>
        <member name="T:LinFx.Extensions.MultiTenancy.ICurrentTenant">
            <summary>
            当前租户
            </summary>
        </member>
        <member name="P:LinFx.Extensions.MultiTenancy.ICurrentTenant.Id">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="P:LinFx.Extensions.MultiTenancy.ICurrentTenant.Name">
            <summary>
            租户名称
            </summary>
        </member>
        <member name="T:LinFx.Extensions.MultiTenancy.MultiTenancyModule">
            <summary>
            多租户模块
            </summary>
        </member>
        <member name="P:LinFx.Extensions.MultiTenancy.MultiTenancyOptions.IsEnabled">
            <summary>
            A central point to enable/disable multi-tenancy.
            Default: false. 
            </summary>
        </member>
        <member name="P:LinFx.Extensions.MultiTenancy.TenantIdWrapper.TenantId">
            <summary>
            Null indicates the host.
            Not null value for a tenant.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.MultiTenancy.TenantInfo">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="P:LinFx.Extensions.MultiTenancy.TenantInfo.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:LinFx.Extensions.MultiTenancy.TenantInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:LinFx.Extensions.ObjectExtending.ExtensibleObjectMapper.MapExtraPropertiesTo``2(``0,``1,System.Nullable{Volo.Abp.ObjectExtending.MappingPropertyDefinitionChecks},System.String[])">
            <summary>
            Copies extra properties from the <paramref name="source"/> object
            to the <paramref name="destination"/> object.
            
            Checks property definitions (over the <see cref="T:LinFx.Extensions.ObjectExtending.ObjectExtensionManager"/>)
            based on the <paramref name="definitionChecks"/> preference.
            </summary>
            <typeparam name="TSource">Source class type</typeparam>
            <typeparam name="TDestination">Destination class type</typeparam>
            <param name="source">The source object</param>
            <param name="destination">The destination object</param>
            <param name="definitionChecks">
                Controls which properties to map.
            </param>
            <param name="ignoredProperties">Used to ignore some properties</param>
        </member>
        <member name="M:LinFx.Extensions.ObjectExtending.ExtensibleObjectMapper.MapExtraPropertiesTo``2(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{Volo.Abp.ObjectExtending.MappingPropertyDefinitionChecks},System.String[])">
             <summary>
             Copies extra properties from the <paramref name="sourceDictionary"/> object
             to the <paramref name="destinationDictionary"/> object.
            
             Checks property definitions (over the <see cref="T:LinFx.Extensions.ObjectExtending.ObjectExtensionManager"/>)
             based on the <paramref name="definitionChecks"/> preference.
             </summary>
             <typeparam name="TSource">Source class type (for definition check)</typeparam>
             <typeparam name="TDestination">Destination class type (for definition check)</typeparam>
             <param name="sourceDictionary">The source dictionary object</param>
             <param name="destinationDictionary">The destination dictionary object</param>
             <param name="definitionChecks">
             Controls which properties to map.
             </param>
             <param name="ignoredProperties">Used to ignore some properties</param>
        </member>
        <member name="M:LinFx.Extensions.ObjectExtending.ExtensibleObjectMapper.MapExtraPropertiesTo(System.Type,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{Volo.Abp.ObjectExtending.MappingPropertyDefinitionChecks},System.String[])">
            <summary>
            Copies extra properties from the <paramref name="sourceDictionary"/> object
            to the <paramref name="destinationDictionary"/> object.
            
            Checks property definitions (over the <see cref="T:LinFx.Extensions.ObjectExtending.ObjectExtensionManager"/>)
            based on the <paramref name="definitionChecks"/> preference.
            </summary>
            <param name="sourceType">Source type (for definition check)</param>
            <param name="destinationType">Destination class type (for definition check)</param>
            <param name="sourceDictionary">The source dictionary object</param>
            <param name="destinationDictionary">The destination dictionary object</param>
            <param name="definitionChecks">
            Controls which properties to map.
            </param>
            <param name="ignoredProperties">Used to ignore some properties</param>
        </member>
        <member name="T:LinFx.Extensions.ObjectExtending.ExtraPropertyDictionary">
            <summary>
            属性扩展字典
            </summary>
        </member>
        <member name="M:LinFx.Extensions.ObjectExtending.HasExtraPropertiesObjectExtendingExtensions.MapExtraPropertiesTo``2(``0,``1,System.Nullable{Volo.Abp.ObjectExtending.MappingPropertyDefinitionChecks},System.String[])">
            <summary>
            Copies extra properties from the <paramref name="source"/> object
            to the <paramref name="destination"/> object.
            
            Checks property definitions (over the <see cref="T:LinFx.Extensions.ObjectExtending.ObjectExtensionManager"/>)
            based on the <paramref name="definitionChecks"/> preference.
            </summary>
            <typeparam name="TSource">Source class type</typeparam>
            <typeparam name="TDestination">Destination class type</typeparam>
            <param name="source">The source object</param>
            <param name="destination">The destination object</param>
            <param name="definitionChecks">
                Controls which properties to map.
            </param>
            <param name="ignoredProperties">Used to ignore some properties</param>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.IBasicObjectExtensionPropertyInfo.DefaultValue">
            <summary>
            Uses as the default value if <see cref="P:LinFx.Extensions.ObjectExtending.IBasicObjectExtensionPropertyInfo.DefaultValueFactory"/> was not set.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.IBasicObjectExtensionPropertyInfo.DefaultValueFactory">
            <summary>
            Used with the first priority to create the default value for the property.
            Uses to the <see cref="P:LinFx.Extensions.ObjectExtending.IBasicObjectExtensionPropertyInfo.DefaultValue"/> if this was not set.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.ObjectExtending.IHasExtraProperties">
            <summary>
            属性扩展
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.IHasExtraProperties.ExtraProperties">
            <summary>
            属性扩展
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyApiCreateConfiguration.IsAvailable">
            <summary>
            Default: true.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyApiGetConfiguration.IsAvailable">
            <summary>
            Default: true.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyApiUpdateConfiguration.IsAvailable">
            <summary>
            Default: true.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyConfiguration.IsAvailableToClients">
            <summary>
            Single point to enable/disable this property for the clients (UI and API).
            If this is false, the configuration made in the <see cref="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyConfiguration.UI"/> and the <see cref="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyConfiguration.Api"/>
            properties are not used.
            Default: true.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyConfiguration.DefaultValue">
            <summary>
            Uses as the default value if <see cref="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyConfiguration.DefaultValueFactory"/> was not set.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyConfiguration.DefaultValueFactory">
            <summary>
            Used with the first priority to create the default value for the property.
            Uses to the <see cref="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyConfiguration.DefaultValue"/> if this was not set.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyEntityConfiguration.IsAvailable">
            <summary>
            Default: true.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyLookupConfiguration.ResultListPropertyName">
            <summary>
            Default value: "items".
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyLookupConfiguration.DisplayPropertyName">
            <summary>
            Default value: "text".
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyLookupConfiguration.ValuePropertyName">
            <summary>
            Default value: "id".
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyLookupConfiguration.FilterParamName">
            <summary>
            Default value: "filter".
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyUiFormConfiguration.IsVisible">
            <summary>
            Default: true.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.Modularity.ExtensionPropertyUiTableConfiguration.IsVisible">
            <summary>
            Default: true.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionPropertyInfo.CheckPairDefinitionOnMapping">
             <summary>
             Indicates whether to check the other side of the object mapping
             if it explicitly defines the property. This property is used in;
            
             * .MapExtraPropertiesTo() extension method.
             * .MapExtraProperties() configuration for the AutoMapper.
            
             It this is true, these methods check if the mapping object
             has defined the property using the <see cref="T:LinFx.Extensions.ObjectExtending.ObjectExtensionManager"/>.
            
             Default: null (unspecified, uses the default logic).
             </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionPropertyInfo.DefaultValue">
            <summary>
            Uses as the default value if <see cref="P:LinFx.Extensions.ObjectExtending.ObjectExtensionPropertyInfo.DefaultValueFactory"/> was not set.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionPropertyInfo.DefaultValueFactory">
            <summary>
            Used with the first priority to create the default value for the property.
            Uses to the <see cref="P:LinFx.Extensions.ObjectExtending.ObjectExtensionPropertyInfo.DefaultValue"/> if this was not set.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionPropertyValidationContext.ExtensionPropertyInfo">
            <summary>
            Related property extension information.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionPropertyValidationContext.ValidatingObject">
            <summary>
            Reference to the validating object.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionPropertyValidationContext.ValidationErrors">
            <summary>
            Add validation errors to this list.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionPropertyValidationContext.ValidationContext">
            <summary>
            Validation context comes from the <see cref="M:System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)"/> method.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionPropertyValidationContext.Value">
            <summary>
            The value of the validating property of the <see cref="P:LinFx.Extensions.ObjectExtending.ObjectExtensionPropertyValidationContext.ValidatingObject"/>.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionPropertyValidationContext.ServiceProvider">
            <summary>
            Can be used to resolve services from the dependency injection container.
            This can be null when SetProperty method is used on the object.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionValidationContext.ObjectExtensionInfo">
            <summary>
            Related object extension information.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionValidationContext.ValidatingObject">
            <summary>
            Reference to the validating object.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionValidationContext.ValidationErrors">
            <summary>
            Add validation errors to this list.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionValidationContext.ValidationContext">
            <summary>
            Validation context comes from the <see cref="M:System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)"/> method.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectExtending.ObjectExtensionValidationContext.ServiceProvider">
            <summary>
            Can be used to resolve services from the dependency injection container.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.ObjectMapping.IObjectMapper">
            <summary>
            Defines a simple interface to automatically map objects.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.ObjectMapping.IObjectMapper.AutoObjectMappingProvider">
            <summary>
            Gets the underlying <see cref="T:LinFx.Extensions.ObjectMapping.IAutoObjectMappingProvider"/> object that is used for auto object mapping.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.ObjectMapping.IObjectMapper.Map``2(``0)">
            <summary>
            Converts an object to another. Creates a new object of <see cref="!:TDestination"/>.
            </summary>
            <typeparam name="TDestination">Type of the destination object</typeparam>
            <typeparam name="TSource">Type of the source object</typeparam>
            <param name="source">Source object</param>
        </member>
        <member name="M:LinFx.Extensions.ObjectMapping.IObjectMapper.Map``2(``0,``1)">
            <summary>
            Execute a mapping from the source object to the existing destination object
            </summary>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TDestination">Destination type</typeparam>
            <param name="source">Source object</param>
            <param name="destination">Destination object</param>
            <returns>Returns the same <see cref="!:destination"/> object after mapping operation</returns>
        </member>
        <member name="T:LinFx.Extensions.ObjectMapping.IObjectMapper`1">
            <summary>
            Defines a simple interface to automatically map objects for a specific context.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.ObjectMapping.IObjectMapper`2">
            <summary>
            Maps an object to another.
            Implement this interface to override object to object mapping for specific types.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
        </member>
        <member name="M:LinFx.Extensions.ObjectMapping.IObjectMapper`2.Map(`0)">
            <summary>
            Converts an object to another. Creates a new object of <see cref="!:TDestination"/>.
            </summary>
            <param name="source">Source object</param>
        </member>
        <member name="M:LinFx.Extensions.ObjectMapping.IObjectMapper`2.Map(`0,`1)">
            <summary>
            Execute a mapping from the source object to the existing destination object
            </summary>
            <param name="source">Source object</param>
            <param name="destination">Destination object</param>
            <returns>Returns the same <see cref="!:destination"/> object after mapping operation</returns>
        </member>
        <member name="M:LinFx.Extensions.ObjectMapping.MapBuilder`1.ConvertUsing``2(System.Func{``0,``1})">
            <summary>
            Define custom type converter
            </summary>
            <typeparam name="From">Source type</typeparam>
            <typeparam name="To">Destination type</typeparam>
            <param name="converter">Function which converts an inctance of the source type to an instance of the destination type</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.ObjectMapping.MapBuilder`1.IgnoreMembers(System.Type,System.Type,System.String[])">
            <summary>
            Define members which should be ingored
            </summary>
            <param name="typeFrom">Source type for which ignore members are defining</param>
            <param name="typeTo">Destination type for which ignore members are defining</param>
            <param name="ignoreNames">Array of member names which should be ingored</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.ObjectMapping.MapBuilder`1.IgnoreMembers``2(System.String[])">
            <summary>
            Define members which should be ingored
            </summary>
            <typeparam name="TFrom">Source type for which ignore members are defining</typeparam>
            <typeparam name="TTo">Destination type for which ignore members are defining</typeparam>
            <param name="ignoreNames">Array of member names which should be ingored</param>
            <returns></returns>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.Name">
            <summary>
            Unique name of the setting.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.DefaultValue">
            <summary>
            Default value of the setting.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.IsVisibleToClients">
            <summary>
            Can clients see this setting and it's value.
            It maybe dangerous for some settings to be visible to clients (such as an email server password).
            Default: false.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.Providers">
            <summary>
            A list of allowed providers to get/set value of this setting.
            An empty list indicates that all providers are allowed.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.IsInherited">
            <summary>
            Is this setting inherited from parent scopes.
            Default: True.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.Properties">
            <summary>
            Can be used to get/set custom properties for this setting definition.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.IsEncrypted">
            <summary>
            Is this setting stored as encrypted in the data source.
            Default: False.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Setting.SettingDefinition.WithProperty(System.String,System.Object)">
            <summary>
            Sets a property in the <see cref="P:LinFx.Extensions.Setting.SettingDefinition.Properties"/> dictionary.
            This is a shortcut for nested calls on this object.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Setting.SettingDefinition.WithProviders(System.String[])">
            <summary>
            Sets a property in the <see cref="P:LinFx.Extensions.Setting.SettingDefinition.Properties"/> dictionary.
            This is a shortcut for nested calls on this object.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Threading.AmbientDataContextAmbientScopeProvider`1">
            <summary>
            周围上下文
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:LinFx.Extensions.Threading.AsyncHelper">
            <summary>
            Provides some helper methods to work with async methods.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Threading.AsyncHelper.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            Checks if given method is an async method.
            </summary>
            <param name="method">A method to check</param>
        </member>
        <member name="M:LinFx.Extensions.Threading.AsyncHelper.UnwrapTask(System.Type)">
            <summary>
            Returns void if given type is Task.
            Return T, if given type is Task{T}.
            Returns given type otherwise.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Threading.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs a async method synchronously.
            </summary>
            <param name="func">A function that returns a result</param>
            <typeparam name="TResult">Result type</typeparam>
            <returns>Result of the async operation</returns>
        </member>
        <member name="M:LinFx.Extensions.Threading.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs a async method synchronously.
            </summary>
            <param name="action">An async action</param>
        </member>
        <member name="T:LinFx.Extensions.Threading.AsyncLock">
            <summary>
            AsyncSemaphore should be used with a lot of care.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Threading.AsyncTimer">
            <summary>
            A robust timer implementation that ensures no overlapping occurs. It waits exactly specified <see cref="P:LinFx.Extensions.Threading.AsyncTimer.Period"/> between ticks.
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Threading.AsyncTimer.Elapsed">
            <summary>
            This func is raised periodically according to Period of Timer.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Threading.AsyncTimer.Period">
            <summary>
            Task period of timer (as milliseconds).
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Threading.AsyncTimer.RunOnStart">
            <summary>
            Indicates whether timer raises Elapsed event on Start method of Timer for once.
            Default: False.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Threading.AsyncTimer.TimerCallBack(System.Object)">
            <summary>
            This method is called by _taskTimer.
            </summary>
            <param name="state">Not used argument</param>
        </member>
        <member name="M:LinFx.Extensions.Threading.IAmbientScopeProvider`1.GetValue(System.String)">
            <summary>
            获取临时值
            </summary>
            <param name="contextKey">关键字</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Threading.IAmbientScopeProvider`1.BeginScope(System.String,`0)">
            <summary>
            存储临时值
            </summary>
            <param name="contextKey">关键字</param>
            <param name="value">临时值</param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Timing.Clock">
            <summary>
            时钟
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Timing.Clock.Now">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Timing.Clock.Kind">
            <summary>
            当前使用的时钟类型
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Timing.Clock.SupportsMultipleTimezone">
            <summary>
            如果当前时间是UTC,则返回 true.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Timing.Clock.Normalize(System.DateTime)">
            <summary>
            DateTime 标准化
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="P:LinFx.Extensions.Timing.ClockOptions.Kind">
            <summary>
            Default: <see cref="F:System.DateTimeKind.Unspecified"/>
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Timing.IClock">
            <summary>
            时钟
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Timing.IClock.Now">
            <summary>
            Gets Now.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Timing.IClock.Kind">
            <summary>
            Gets kind.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Timing.IClock.SupportsMultipleTimezone">
            <summary>
            Is that provider supports multiple time zone.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Timing.IClock.Normalize(System.DateTime)">
            <summary>
            Normalizes given <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dateTime">DateTime to be normalized.</param>
            <returns>Normalized DateTime</returns>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenu.Name">
            <summary>
            Unique name of the menu in the application.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenu.DisplayName">
            <summary>
            Display name of the menu.
            Default value is the <see cref="P:LinFx.Extensions.UI.Navigation.ApplicationMenu.Name"/>.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.UI.Navigation.ApplicationMenu.AddItem(LinFx.Extensions.UI.Navigation.ApplicationMenuItem)">
            <summary>
            Adds a <see cref="T:LinFx.Extensions.UI.Navigation.ApplicationMenuItem"/> to <see cref="P:LinFx.Extensions.UI.Navigation.ApplicationMenu.Items"/>.
            </summary>
            <param name="menuItem"><see cref="T:LinFx.Extensions.UI.Navigation.ApplicationMenuItem"/> to be added</param>
            <returns>This <see cref="T:LinFx.Extensions.UI.Navigation.ApplicationMenu"/> object</returns>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenuItem.Name">
            <summary>
            Unique name of the menu in the application.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenuItem.DisplayName">
            <summary>
            Display name of the menu item.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenuItem.Order">
            <summary>
            The Display order of the menu.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenuItem.Url">
            <summary>
            The URL to navigate when this menu item is selected.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenuItem.Icon">
            <summary>
            Icon of the menu item if exists.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenuItem.Target">
            <summary>
            Target of the menu item. Can be null, "_blank", "_self", "_parent", "_top" or a frame name for web applications.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.UI.Navigation.MenuManager">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.AmbientUnitOfWork.UnitOfWork">
            <inheritdoc/>
        </member>
        <member name="T:LinFx.Extensions.Uow.ChildUnitOfWork">
            <summary>
            内部工作单元
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Uow.ChildUnitOfWork.#ctor(LinFx.Extensions.Uow.IUnitOfWork)">
            <summary>
            构造函数
            </summary>
            <param name="parent">外部工作单元(带事务)</param>
        </member>
        <member name="T:LinFx.Extensions.Uow.IAmbientUnitOfWork">
            <summary>
            当前活动工作单元
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Uow.IAmbientUnitOfWork.GetCurrentByChecking">
            <summary>
            获取当前工作单元
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Uow.IDatabaseApi">
            <summary>
            数据库访问接口
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Uow.ITransactionApi">
            <summary>
            数据库事务接口
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Uow.IUnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.IUnitOfWork.Id">
            <summary>
            唯一标识信息
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.IUnitOfWork.Options">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Uow.IUnitOfWork.CompleteAsync(System.Threading.CancellationToken)">
            <summary>
            提交工作单元
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Uow.IUnitOfWork.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            回滚
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Uow.IUnitOfWorkAccessor">
            <summary>
            工作单元访问器
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.IUnitOfWorkAccessor.UnitOfWork">
            <summary>
            当前工作单元
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Uow.IUnitOfWorkAccessor.SetUnitOfWork(LinFx.Extensions.Uow.IUnitOfWork)">
            <summary>
            设置工作单元
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:LinFx.Extensions.Uow.IUnitOfWorkEventPublisher">
            <summary>
            领域事件发布器
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Uow.IUnitOfWorkEventPublisher.PublishLocalEventsAsync(System.Collections.Generic.IEnumerable{LinFx.Extensions.Uow.UnitOfWorkEventRecord})">
            <summary>
            发布本地事件
            </summary>
            <param name="localEvents"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Uow.IUnitOfWorkEventPublisher.PublishDistributedEventsAsync(System.Collections.Generic.IEnumerable{LinFx.Extensions.Uow.UnitOfWorkEventRecord})">
            <summary>
            发布分步式事件
            </summary>
            <param name="distributedEvents"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Uow.IUnitOfWorkManager">
            <summary>
            工作单元管理器
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.IUnitOfWorkManager.Current">
            <summary>
            当前工作单元
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Uow.IUnitOfWorkOptions">
            <summary>
            工作单元配置
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.IUnitOfWorkOptions.IsTransactional">
            <summary>
            是否事务
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.IUnitOfWorkOptions.Timeout">
            <summary>
            Milliseconds
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Uow.UnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWork.EnableObsoleteDbContextCreationWarning">
            <summary>
            Default: false.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWork.Outer">
            <summary>
            外部工作单元
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWork.IsReserved">
            <summary>
            是否保留
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWork.DistributedEvents">
            <summary>
            分步式事件
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWork.LocalEvents">
            <summary>
            本地事件
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWork.UnitOfWorkEventPublisher">
            <summary>
            领域事件发布器
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Uow.UnitOfWork.Initialize(LinFx.Extensions.Uow.UnitOfWorkOptions)">
            <summary>
            初始化
            </summary>
            <param name="options"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:LinFx.Extensions.Uow.UnitOfWork.SetOuter(LinFx.Extensions.Uow.IUnitOfWork)">
            <summary>
            设置外部工作单元
            </summary>
            <param name="outer"></param>
        </member>
        <member name="M:LinFx.Extensions.Uow.UnitOfWork.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            保存
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Uow.UnitOfWork.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            回滚
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Uow.UnitOfWorkAttribute">
            <summary>
            Used to indicate that declaring method (or all methods of the class) is atomic and should be considered as a unit of work (UOW).
            </summary>
            <remarks>
            This attribute has no effect if there is already a unit of work before calling this method. It uses the ambient UOW in this case.
            </remarks>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkAttribute.IsTransactional">
            <summary>
            Is this UOW transactional?
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkAttribute.Timeout">
            <summary>
            Timeout of UOW As milliseconds.
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkAttribute.IsolationLevel">
            <summary>
            If this UOW is transactional, this option indicated the isolation level of the transaction.
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkAttribute.IsDisabled">
            <summary>
            Used to prevent starting a unit of work for the method.
            If there is already a started unit of work, this property is ignored.
            Default: false.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Uow.UnitOfWorkDefaultOptions">
            <summary>
            Global (default) unit of work options
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkDefaultOptions.TransactionBehavior">
            <summary>
            Default value: <see cref="F:LinFx.Extensions.Uow.UnitOfWorkTransactionBehavior.Auto"/>.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkEventArgs.UnitOfWork">
            <summary>
            Reference to the unit of work related to this event.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Uow.UnitOfWorkEventRecord">
            <summary>
            领域事件记录
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkEventRecord.EventData">
            <summary>
            事件数据
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkEventRecord.EventType">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkEventRecord.EventOrder">
            <summary>
            事件顺序
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkEventRecord.Properties">
            <summary>
            Extra properties can be used if needed.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Uow.UnitOfWorkFailedEventArgs">
            <summary>
            Used as event arguments on <see cref="E:LinFx.Extensions.Uow.IUnitOfWork.Failed"/> event.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkFailedEventArgs.Exception">
            <summary>
            Exception that caused failure. This is set only if an error occurred during <see cref="M:LinFx.Extensions.Uow.IUnitOfWork.CompleteAsync(System.Threading.CancellationToken)"/>.
            Can be null if there is no exception, but <see cref="M:LinFx.Extensions.Uow.IUnitOfWork.CompleteAsync(System.Threading.CancellationToken)"/> is not called.
            Can be null if another exception occurred during the UOW.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkFailedEventArgs.IsRolledback">
            <summary>
            True, if the unit of work is manually rolled back.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Uow.UnitOfWorkFailedEventArgs.#ctor(LinFx.Extensions.Uow.IUnitOfWork,System.Exception,System.Boolean)">
            <summary>
            Creates a new <see cref="T:LinFx.Extensions.Uow.UnitOfWorkFailedEventArgs"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Uow.UnitOfWorkHelper.GetUnitOfWorkAttributeOrNull(System.Reflection.MethodInfo)">
            <summary>
            获取当前方法工作单元特性
            </summary>
            <param name="methodInfo">方法类型</param>
            <returns><see cref="T:LinFx.Extensions.Uow.UnitOfWorkAttribute"/></returns>
        </member>
        <member name="T:LinFx.Extensions.Uow.UnitOfWorkInterceptor">
            <summary>
            工作单元拦截器
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Uow.UnitOfWorkInterceptorRegistrar">
            <summary>
            工作单元拦截注册器
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Uow.UnitOfWorkInterceptorRegistrar.RegisterIfNeeded(LinFx.Extensions.DependencyInjection.IOnServiceRegistredContext)">
            <summary>
            注册
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:LinFx.Extensions.Uow.UnitOfWorkManager">
            <summary>
            工作单元管理器
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Uow.UnitOfWorkManager.CreateNewUnitOfWork">
            <summary>
            创建新的工作单元
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Uow.UnitOfWorkModule">
            <summary>
            工作单元模块
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkOptions.IsTransactional">
            <summary>
            Default: false.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Uow.UnitOfWorkOptions.Timeout">
            <summary>
            Milliseconds
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Validation.ValidationException">
            <summary>
            This exception type is used to throws validation exceptions.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Validation.ValidationException.ValidationErrors">
            <summary>
            Detailed list of validation errors for this exception.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Validation.ValidationException.LogLevel">
            <summary>
            Exception severity.
            Default: Warn.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Validation.ValidationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Validation.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serializing.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Validation.ValidationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:LinFx.Extensions.Validation.ValidationException.#ctor(System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Constructor.
            </summary>
            <param name="validationErrors">Validation errors</param>
        </member>
        <member name="M:LinFx.Extensions.Validation.ValidationException.#ctor(System.String,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="validationErrors">Validation errors</param>
        </member>
        <member name="M:LinFx.Extensions.Validation.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:LinFx.BusinessException">
            <summary>
            业务异常
            </summary>
        </member>
        <member name="M:LinFx.BusinessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serializing.
            </summary>
        </member>
        <member name="T:LinFx.IBusinessException">
            <summary>
            业务异常
            </summary>
        </member>
        <member name="T:LinFx.IUserFriendlyException">
            <summary>
            用户友好异常
            </summary>
        </member>
        <member name="T:LinFx.UserFriendlyException">
            <summary>
            用户友好异常
            </summary>
        </member>
        <member name="T:LinFx.NamedTypeSelector">
            <summary>
            Used to represent a named type selector.
            </summary>
        </member>
        <member name="P:LinFx.NamedTypeSelector.Name">
            <summary>
            Name of the selector.
            </summary>
        </member>
        <member name="P:LinFx.NamedTypeSelector.Predicate">
            <summary>
            Predicate.
            </summary>
        </member>
        <member name="M:LinFx.NamedTypeSelector.#ctor(System.String,System.Func{System.Type,System.Boolean})">
            <summary>
            Creates new <see cref="T:LinFx.NamedTypeSelector"/> object.
            </summary>
            <param name="name">Name</param>
            <param name="predicate">Predicate</param>
        </member>
        <member name="M:LinFx.NamedTypeSelectorListExtensions.Add(System.Collections.Generic.IList{LinFx.NamedTypeSelector},System.String,System.Type[])">
            <summary>
            Add list of types to the list.
            </summary>
            <param name="list">List of NamedTypeSelector items</param>
            <param name="name">An arbitrary but unique name (can be later used to remove types from the list)</param>
            <param name="types"></param>
        </member>
        <member name="T:LinFx.NameValue">
            <summary>
            Can be used to store Name/Value (or Key/Value) pairs.
            </summary>
        </member>
        <member name="T:LinFx.NameValue`1">
            <summary>
            Can be used to store Name/Value (or Key/Value) pairs.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:LinFx.NameValue`1.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:LinFx.NameValue`1.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:LinFx.NameValue`1.#ctor">
            <summary>
            Creates a new <see cref="T:LinFx.NameValue"/>.
            </summary>
        </member>
        <member name="M:LinFx.NameValue`1.#ctor(System.String,`0)">
            <summary>
            Creates a new <see cref="T:LinFx.NameValue"/>.
            </summary>
        </member>
        <member name="T:LinFx.Reflection.IAssemblyFinder">
            <summary>
            Used to get assemblies in the application.
            It may not return all assemblies, but those are related with modules.
            </summary>
        </member>
        <member name="T:LinFx.Reflection.ITypeFinder">
            <summary>
            Used to get types in the application.
            It may not return all types, but those are related with modules.
            </summary>
        </member>
        <member name="M:LinFx.Reflection.ReflectionHelper.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Checks whether <paramref name="givenType"/> implements/inherits <paramref name="genericType"/>.
            </summary>
            <param name="givenType">Type to check</param>
            <param name="genericType">Generic type</param>
        </member>
        <member name="M:LinFx.Reflection.ReflectionHelper.GetSingleAttributeOrDefault``1(System.Reflection.MemberInfo,``0,System.Boolean)">
            <summary>
            Tries to gets an of attribute defined for a class member and it's declaring type including inherited attributes.
            Returns default value if it's not declared at all.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="defaultValue">Default value (null as default)</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:LinFx.Reflection.ReflectionHelper.GetSingleAttributeOfMemberOrDeclaringTypeOrDefault``1(System.Reflection.MemberInfo,``0,System.Boolean)">
            <summary>
            Tries to gets an of attribute defined for a class member and it's declaring type including inherited attributes.
            Returns default value if it's not declared at all.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="defaultValue">Default value (null as default)</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:LinFx.Reflection.ReflectionHelper.GetAttributesOfMemberOrDeclaringType``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Tries to gets attributes defined for a class member and it's declaring type including inherited attributes.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:LinFx.Reflection.ReflectionHelper.GetValueByPath(System.Object,System.Type,System.String)">
            <summary>
            Gets value of a property by it's full path from given object
            </summary>
        </member>
        <member name="M:LinFx.Reflection.ReflectionHelper.SetValueByPath(System.Object,System.Type,System.String,System.Object)">
            <summary>
            Sets value of a property by it's full path on given object
            </summary>
        </member>
        <member name="M:LinFx.Reflection.ReflectionHelper.GetPublicConstantsRecursively(System.Type)">
            <summary>
            Get all the constant values in the specified type (including the base type).
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Result">
            <summary>
            Represents the result of an operation.
            </summary>
        </member>
        <member name="P:LinFx.Result.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="P:LinFx.Result.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="M:LinFx.Result.Ok(System.String)">
            <summary>
            操作成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Result.Failed(System.String)">
            <summary>
            操作失败
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Result.Ok``1(``0)">
            <summary>
            操作成功
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Result.Ok``1(``0,System.String)">
            <summary>
            操作成功
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="value"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Result.Failed``1(``0,System.String)">
            <summary>
            操作失败
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="value"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Result.Failed(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)">
            <summary>
            操作失败
            </summary>
            <param name="modelStates"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Result.NotFound(System.String)">
            <summary>
            NotFound
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Security.Authorization.AuthorizationException">
            <summary>
            This exception is thrown on an unauthorized request.
            </summary>
        </member>
        <member name="P:LinFx.Security.Authorization.AuthorizationException.LogLevel">
            <summary>
            Severity of the exception.
            Default: Warn.
            </summary>
        </member>
        <member name="P:LinFx.Security.Authorization.AuthorizationException.Code">
            <summary>
            Error code.
            </summary>
        </member>
        <member name="M:LinFx.Security.Authorization.AuthorizationException.#ctor">
            <summary>
            Creates a new <see cref="T:LinFx.Security.Authorization.AuthorizationException"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Security.Authorization.AuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:LinFx.Security.Authorization.AuthorizationException"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Security.Authorization.AuthorizationException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:LinFx.Security.Authorization.AuthorizationException"/> object.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:LinFx.Security.Authorization.AuthorizationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:LinFx.Security.Authorization.AuthorizationException"/> object.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:LinFx.Security.Authorization.AuthorizationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:LinFx.Security.Authorization.AuthorizationException"/> object.
            </summary>
            <param name="message">Exception message</param>
            <param name="code">Exception code</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.UserName">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Name"/>
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.Id">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.NameIdentifier"/>
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.Role">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Role"/>
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.Email">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Email"/>
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.EmailVerified">
            <summary>
            Default: "email_verified".
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.PhoneNumber">
            <summary>
            Default: "phone_number".
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.PhoneNumberVerified">
            <summary>
            Default: "phone_number_verified".
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.TenantId">
            <summary>
            Default: "tenantid".
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.ClientId">
            <summary>
            Default: "client_id".
            </summary>
        </member>
        <member name="T:LinFx.Security.Encryption.IStringEncryptionService">
            <summary>
            Can be used to simply encrypt/decrypt texts.
            Use <see cref="T:LinFx.Security.Encryption.StringEncryptionOptions"/> to configure default values.
            </summary>
        </member>
        <member name="M:LinFx.Security.Encryption.IStringEncryptionService.Encrypt(System.String,System.String,System.Byte[])">
            <summary>
            Encrypts a text.
            </summary>
            <param name="plainText">The text in plain format</param>
            <param name="passPhrase">A phrase to use as the encryption key (optional, uses default if not provided)</param>
            <param name="salt">Salt value (optional, uses default if not provided)</param>
            <returns>Enrypted text</returns>
        </member>
        <member name="M:LinFx.Security.Encryption.IStringEncryptionService.Decrypt(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts a text that is encrypted by the <see cref="M:LinFx.Security.Encryption.IStringEncryptionService.Encrypt(System.String,System.String,System.Byte[])"/> method.
            </summary>
            <param name="cipherText">The text in encrypted format</param>
            <param name="passPhrase">A phrase to use as the encryption key (optional, uses default if not provided)</param>
            <param name="salt">Salt value (optional, uses default if not provided)</param>
            <returns>Decrypted text</returns>
        </member>
        <member name="T:LinFx.Security.Encryption.StringEncryptionOptions">
            <summary>
            Options used by <see cref="T:LinFx.Security.Encryption.IStringEncryptionService"/>.
            </summary>
        </member>
        <member name="P:LinFx.Security.Encryption.StringEncryptionOptions.Keysize">
            <summary>
            This constant is used to determine the keysize of the encryption algorithm.
            Default value: 256.
            </summary>
        </member>
        <member name="P:LinFx.Security.Encryption.StringEncryptionOptions.DefaultPassPhrase">
            <summary>
            Default password to encrypt/decrypt texts.
            It's recommended to set to another value for security.
            Default value: "gsKnGZ041HLL4IM8"
            </summary>
        </member>
        <member name="P:LinFx.Security.Encryption.StringEncryptionOptions.InitVectorBytes">
            <summary>
            This constant string is used as a "salt" value for the PasswordDeriveBytes function calls.
            This size of the IV (in bytes) must = (keysize / 8).  Default keysize is 256, so the IV must be
            32 bytes long.  Using a 16 character string here gives us 32 bytes when converted to a byte array.
            Default value: Encoding.ASCII.GetBytes("jkE49230Tf093b42")
            </summary>
        </member>
        <member name="P:LinFx.Security.Encryption.StringEncryptionOptions.DefaultSalt">
            <summary>
            Default value: Encoding.ASCII.GetBytes("hgt!16kl")
            </summary>
        </member>
        <member name="T:LinFx.Security.Encryption.StringEncryptionService">
            <summary>
            Can be used to simply encrypt/decrypt texts.
            </summary>
        </member>
        <member name="T:LinFx.Security.Users.CurrentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="T:LinFx.Security.Users.ICurrentUser">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="P:LinFx.Security.Users.ICurrentUser.IsAuthenticated">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="P:LinFx.Security.Users.ICurrentUser.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:LinFx.Security.Users.ICurrentUser.UserName">
            <summary>
            账号
            </summary>
        </member>
        <member name="P:LinFx.Security.Users.ICurrentUser.PhoneNumber">
            <summary>
            手机
            </summary>
        </member>
        <member name="T:LinFx.Utils.Check">
            <summary>
            Checks
            </summary>
        </member>
        <member name="M:LinFx.Utils.CryptoUtils.CreateRsaSecurityKey">
            <summary>
            Creates a new RSA security key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.MoneyUtils.ToFen(System.Decimal)">
            <summary>
            元转分
            </summary>
            <param name="yuan"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.MoneyUtils.ToYuan(System.Int32)">
            <summary>
            分转元
            </summary>
            <param name="fen"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.MoneyUtils.ToN2String(System.Decimal)">
            <summary>
            保留两位小数
            </summary>
            <param name="amt"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.MoneyUtils.Truncate(System.Decimal)">
            <summary>
            截取两位小数
            </summary>
            <param name="amt"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.DateTimeUtils.ToUnixTimestamp(System.DateTime)">
            <summary>
            得到当前的unix时间戳
            </summary>
            <param name="date">当前时间日期</param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Utils.DayOfWeekExtensions">
            <summary>
            Extension methods for <see cref="T:LinFx.Utils.DayOfWeekExtensions"/>.
            </summary>
        </member>
        <member name="M:LinFx.Utils.DayOfWeekExtensions.IsWeekend(System.DayOfWeek)">
            <summary>
            Check if given <see cref="T:System.DayOfWeek"/> value is weekend.
            </summary>
        </member>
        <member name="M:LinFx.Utils.DayOfWeekExtensions.IsWeekday(System.DayOfWeek)">
            <summary>
            Check if given <see cref="T:System.DayOfWeek"/> value is weekday.
            </summary>
        </member>
        <member name="T:LinFx.Utils.EncryptUtils">
            <summary>
            加密工具类
            </summary>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.DESEncode(System.String,System.String)">
            <summary> 
            DES加密字符串 
            </summary> 
            <param name="encryptString">待加密的字符串</param> 
            <param name="encryptKey">加密密钥,要求为16位</param> 
            <returns>加密成功返回加密后的字符串，失败返回源串</returns> 
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.DESDecrypt(System.String,System.String)">
            <summary> 
            DES解密字符串 
            </summary> 
            <param name="decryptString">待解密的字符串</param> 
            <param name="decryptKey">解密密钥,要求为16位,和加密密钥相同</param> 
            <returns>解密成功返回解密后的字符串，失败返源串</returns> 
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.MD5Encrypt(System.String)">
            <summary>
            MD5 hash
            </summary>
            <param name="input">The string to be encrypted.</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.MD5Encrypt(System.Byte[])">
            <summary>
            MD5 hash
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.RSAEncrypt(System.String,System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="publickey"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.RSAEncryptWithPrivateKey(System.String,System.String)">
            <summary>
            RSA私钥加密
            </summary>
            <param name="data">加密明文</param>
            <param name="privateKey">私钥</param>
            <returns>返回密文</returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.RSADecrypt(System.Byte[],System.String)">
            <summary>
            RSA私钥解密
            </summary>
            <param name="data"></param>
            <param name="privatekey"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.RSASign_MD5withRSA_GBK(System.String,System.String)">
            <summary>
            RSA签名
            </summary>
            <param name="content">数据</param>
            <param name="privateKey">RSA密钥</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.VerifyRSASign_MD5withRSA_GBK(System.String,System.String,System.String)">
            <summary>
            RSA验签
            </summary>
            <param name="content">内容</param>
            <param name="publicKey">RSA公钥</param>
            <param name="signData">签名字段</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.AES.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypts the specified to encrypt.
            </summary>
            <param name="message">To encrypt.</param>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.AES.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypts the specified to decrypt.
            </summary>
            <param name="message">To decrypt.</param>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.HMACSMD5Encrypt(System.String,System.String)">
            <summary>
            HMAC-MD5 加密
            </summary>
            <param name="input"> 要加密的字符串 </param>
            <param name="key"> 密钥 </param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.HMACSMD5Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMAC-MD5 加密
            </summary>
            <param name="input"> 要加密的字符串 </param>
            <param name="key"> 密钥 </param>
            <param name="encoding"> 字符编码 </param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.HashEncrypt(System.Security.Cryptography.HashAlgorithm,System.String,System.Text.Encoding)">
            <summary>
            哈希加密算法
            </summary>
            <param name="hashAlgorithm"> 所有加密哈希算法实现均必须从中派生的基类 </param>
            <param name="input"> 待加密的字符串 </param>
            <param name="encoding"> 字符编码 </param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Utils.RSAKeyExtensions">
            <summary>
            RSA参数格式化扩展
            </summary>
        </member>
        <member name="M:LinFx.Utils.RSAKeyExtensions.FromLvccXmlString(System.Security.Cryptography.RSA,System.String)">
            <summary>
            RSA导入key
            </summary>
            <param name="rsa">RSA实例<see cref="T:System.Security.Cryptography.RSA"/></param>
            <param name="xmlString">RSA的Key序列化XML字符串</param>
        </member>
        <member name="M:LinFx.Utils.RSAKeyExtensions.ToLvccXmlString(System.Security.Cryptography.RSA,System.Boolean)">
            <summary>
            获取RSA Key序列化XML
            </summary>
            <param name="rsa">RSA实例<see cref="T:System.Security.Cryptography.RSA"/></param>
            <param name="includePrivateParameters">是否包含私钥</param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Utils.FormattedStringValueExtracter">
            <summary>
            This class is used to extract dynamic values from a formatted string.
            It works as reverse of <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <example>
            Say that str is "My name is Neo." and format is "My name is {name}.".
            Then Extract method gets "Neo" as "name".
            </example>
        </member>
        <member name="M:LinFx.Utils.FormattedStringValueExtracter.Extract(System.String,System.String,System.Boolean)">
            <summary>
            Extracts dynamic values from a formatted string.
            </summary>
            <param name="str">String including dynamic values</param>
            <param name="format">Format of the string</param>
            <param name="ignoreCase">True, to search case-insensitive.</param>
        </member>
        <member name="M:LinFx.Utils.FormattedStringValueExtracter.IsMatch(System.String,System.String,System.String[]@,System.Boolean)">
            <summary>
            Checks if given <paramref name="str"/> fits to given <paramref name="format"/>.
            Also gets extracted values.
            </summary>
            <param name="str">String including dynamic values</param>
            <param name="format">Format of the string</param>
            <param name="values">Array of extracted values if matched</param>
            <param name="ignoreCase">True, to search case-insensitive</param>
            <returns>True, if matched.</returns>
        </member>
        <member name="T:LinFx.Utils.FormattedStringValueExtracter.ExtractionResult">
            <summary>
            Used as return value of <see cref="M:LinFx.Utils.FormattedStringValueExtracter.Extract(System.String,System.String,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:LinFx.Utils.FormattedStringValueExtracter.ExtractionResult.IsMatch">
            <summary>
            Is fully matched.
            </summary>
        </member>
        <member name="P:LinFx.Utils.FormattedStringValueExtracter.ExtractionResult.Matches">
            <summary>
            List of matched dynamic values.
            </summary>
        </member>
        <member name="M:LinFx.Utils.HexUtils.HexStringToBytes(System.String)">
            <summary>
            16进制原码字符串转字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.IDUtils.NewId">
            <summary>
            生成雪花ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.IDUtils.NewIdString">
            <summary>
            生成雪花ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Utils.IDUtils.Snowflake">
            <summary>
            动态生产有规律的ID
            </summary>
        </member>
        <member name="M:LinFx.Utils.IDUtils.Snowflake.GetTimestamp">
            <summary>
            生成当前时间戳
            </summary>
            <returns>毫秒</returns>
        </member>
        <member name="M:LinFx.Utils.IDUtils.Snowflake.GetNextTimestamp(System.Int64)">
            <summary>
            获取下一微秒时间戳
            </summary>
            <param name="lastTimestamp"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.IDUtils.Snowflake.GetId">
            <summary>
            获取长整形的ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.JsonUtils.SerializeWithType(System.Object)">
            <summary>
            Serializes an object with a type information included.
            So, it can be deserialized using <see cref="M:LinFx.Utils.JsonUtils.DeserializeWithType(System.String)"/> method later.
            </summary>
        </member>
        <member name="M:LinFx.Utils.JsonUtils.SerializeWithType(System.Object,System.Type)">
            <summary>
            Serializes an object with a type information included.
            So, it can be deserialized using <see cref="M:LinFx.Utils.JsonUtils.DeserializeWithType(System.String)"/> method later.
            </summary>
        </member>
        <member name="M:LinFx.Utils.JsonUtils.DeserializeWithType``1(System.String)">
            <summary>
            Deserializes an object serialized with <see cref="M:LinFx.Utils.JsonUtils.SerializeWithType(System.Object)"/> methods.
            </summary>
        </member>
        <member name="M:LinFx.Utils.JsonUtils.DeserializeWithType(System.String)">
            <summary>
            Deserializes an object serialized with <see cref="M:LinFx.Utils.JsonUtils.SerializeWithType(System.Object)"/> methods.
            </summary>
        </member>
        <member name="M:LinFx.Utils.JsonUtilsExtensions.ToJson(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Converts given object to JSON string.
            </summary>
            <param name="value"></param>
            <param name="camelCase"></param>
            <param name="indented"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.ProxyHelper.UnProxy(System.Object)">
            <summary>
            Returns dynamic proxy target object if this is a proxied object, otherwise returns the given object. 
            It supports Castle Dynamic Proxies.
            </summary>
        </member>
        <member name="M:LinFx.Utils.RandomUtils.GetRandom(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue; 
            that is, the range of return values includes minValue but not maxValue. 
            If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="M:LinFx.Utils.RandomUtils.GetRandom(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero.</param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; 
            that is, the range of return values ordinarily includes zero but not maxValue. 
            However, if maxValue equals zero, maxValue is returned.
            </returns>
        </member>
        <member name="M:LinFx.Utils.RandomUtils.GetRandom">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.</returns>
        </member>
        <member name="M:LinFx.Utils.RandomUtils.GetRandomOf``1(``0[])">
            <summary>
            Gets random of given objects.
            </summary>
            <typeparam name="T">Type of the objects</typeparam>
            <param name="objs">List of object to select a random one</param>
        </member>
        <member name="M:LinFx.Utils.RandomUtils.GenerateRandomizedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates a randomized list from given enumerable.
            </summary>
            <typeparam name="T">Type of items in the list</typeparam>
            <param name="items">items</param>
        </member>
        <member name="M:LinFx.Utils.RandomUtils.GenerateRandomNumber(System.Int32)">
            <summary>
            生成长度{length}随机数字组合
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.RegexUtils.VerifyEmail(System.String)">
            <summary>
            验证是否电子邮件
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.RegexUtils.VerifyPhone(System.String)">
            <summary>
            验证是否手机
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.StringUtils.Filter(System.String)">
            <summary>
            过滤特殊字符
            </summary>
            <param name="str">需要过滤的字符串</param>
            <returns>过滤好的字符串</returns>
        </member>
        <member name="M:LinFx.Utils.StringUtils.EmailEncryption(System.String)">
            <summary>
            邮箱加密***
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.StringUtils.PhoneEncryption(System.String)">
            <summary>
            手机号码加密***
            </summary>
            <param name="phone"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.UriUtils.ToFilter(System.String)">
            <summary>
            返回
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CommonDbContextRegistrationOptions">
            <summary>
            This is a base class for dbcoUse derived
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ICommonDbContextRegistrationOptionsBuilder.AddDefaultRepositories(System.Boolean)">
            <summary>
            Registers default repositories for all the entities in this DbContext.
            </summary>
            <param name="includeAllEntities">
            Registers repositories only for aggregate root entities by default.
            Set <paramref name="includeAllEntities"/> to true to include all entities.
            </param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ICommonDbContextRegistrationOptionsBuilder.AddDefaultRepositories``1(System.Boolean)">
            <summary>
            Registers default repositories for all the entities in this DbContext.
            Default repositories will use given <see cref="!:TDefaultRepositoryDbContext"/>.
            </summary>
            <typeparam name="TDefaultRepositoryDbContext">DbContext type that will be used by default repositories</typeparam>
            <param name="includeAllEntities">
            Registers repositories only for aggregate root entities by default.
            Set <see cref="!:includeAllEntities"/> to true to include all entities.
            </param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ICommonDbContextRegistrationOptionsBuilder.AddDefaultRepositories(System.Type,System.Boolean)">
            <summary>
            Registers default repositories for all the entities in this DbContext.
            Default repositories will use given <see cref="!:defaultRepositoryDbContextType"/>.
            </summary>
            <param name="defaultRepositoryDbContextType">DbContext type that will be used by default repositories</param>
            <param name="includeAllEntities">
            Registers repositories only for aggregate root entities by default.
            Set <see cref="!:includeAllEntities"/> to true to include all entities.
            </param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ICommonDbContextRegistrationOptionsBuilder.AddDefaultRepository``1">
            <summary>
            Registers default repository for a specific entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ICommonDbContextRegistrationOptionsBuilder.AddDefaultRepository(System.Type)">
            <summary>
            Registers default repository for a specific entity.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ICommonDbContextRegistrationOptionsBuilder.AddRepository``2">
            <summary>
            Registers custom repository for a specific entity.
            Custom repositories overrides default repositories.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <typeparam name="TRepository">Repository type</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ICommonDbContextRegistrationOptionsBuilder.SetDefaultRepositoryClasses(System.Type,System.Type)">
            <summary>
            Uses given class(es) for default repositories.
            </summary>
            <param name="repositoryImplementationType">Repository implementation type</param>
            <param name="repositoryImplementationTypeWithoutKey">Repository implementation type (without primary key)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ICommonDbContextRegistrationOptionsBuilder.ReplaceDbContext``1">
            <summary>
            Replaces given DbContext type with this DbContext type.
            </summary>
            <typeparam name="TOtherDbContext">The DbContext type to be replaced</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ICommonDbContextRegistrationOptionsBuilder.ReplaceDbContext``2">
            <summary>
            Replaces given DbContext type with the target DbContext type.
            </summary>
            <typeparam name="TOtherDbContext">The DbContext type to be replaced</typeparam>
            <typeparam name="TTargetDbContext">The target DbContext type</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ICommonDbContextRegistrationOptionsBuilder.ReplaceDbContext(System.Type,System.Type)">
            <summary>
            Replaces given DbContext type with the given or this DbContext type.
            </summary>
            <param name="otherDbContextType">The DbContext type to be replaced</param>
            <param name="targetDbContextType">The target DbContext type (optional, used this DbContext type if not provided)</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddAssembly(Microsoft.Extensions.DependencyInjection.LinFxBuilder,System.Reflection.Assembly)">
            <summary>
            注册程序集下实现依赖注入接口的类型
            </summary>
            <param name="builder"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionObjectAccessorExtensions.TryAddObjectAccessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册对象访问器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionObjectAccessorExtensions.AddObjectAccessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册对象访问器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionObjectAccessorExtensions.AddObjectAccessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)">
            <summary>
            注册对象访问器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="services"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionObjectAccessorExtensions.AddObjectAccessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,LinFx.Extensions.DependencyInjection.ObjectAccessor{``0})">
            <summary>
            注册对象访问器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="services"></param>
            <param name="accessor"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionRegistrationActionExtensions.OnRegistred(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{LinFx.Extensions.DependencyInjection.IOnServiceRegistredContext})">
            <summary>
            注册
            </summary>
            <param name="services"></param>
            <param name="registrationAction"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IModuleManager">
            <summary>
            模块管理器
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IModuleManager.InitializeModulesAsync(LinFx.Application.ApplicationInitializationContext)">
            <summary>
            初始化模块
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IModuleManager.ShutdownModulesAsync(LinFx.Application.ApplicationShutdownContext)">
            <summary>
            关闭模块
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LinFxBuilder">
            <summary>
            Helper functions for configuring LinFx services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LinFxBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Extensions.DependencyInjection.LinFxBuilder"/>
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to attach to.</param>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.LinFxBuilder.Services">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> services are attached to.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> services are attached to.
            </value>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LinFxOptions">
            <summary>
            Represents all the options you can use to configure the identity system.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LinFxServiceCollectionExtensions.AddLinFx(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.LinFxOptions})">
            <summary>
            AddLinFx Code
            </summary>
            <param name="services"></param>
            <param name="optionsAction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LinFxServiceCollectionExtensions.AddCoreServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            核心服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.GetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a value with the given key.
            </summary>
            <typeparam name="TCacheItem"></typeparam>
            <param name="cache"><see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/></param>
            <param name="key">A string identifying the requested value.</param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,System.Func{Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Sets a avlue with the given key.
            </summary>
            <typeparam name="TCacheItem"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="item"></param>
            <param name="optionsFactory"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.GetOrAddAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Func{Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Gets a value or add a value with the given key.
            </summary>
            <typeparam name="TCacheItem"></typeparam>
            <param name="cache"><see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/></param>
            <param name="key">A string identifying the requested value.</param>
            <param name="factory"></param>
            <param name="optionsFactory"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationBuilderOptions.UserSecretsAssembly">
            <summary>
            Used to set assembly which is used to get the user secret id for the application.
            Use this or <see cref="P:Microsoft.Extensions.Configuration.ConfigurationBuilderOptions.UserSecretsId"/> (higher priority)
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationBuilderOptions.UserSecretsId">
            <summary>
            Used to set user secret id for the application.
            Use this (higher priority) or <see cref="P:Microsoft.Extensions.Configuration.ConfigurationBuilderOptions.UserSecretsAssembly"/>
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationBuilderOptions.FileName">
            <summary>
            Default value: "appsettings".
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationBuilderOptions.EnvironmentName">
            <summary>
            Environment name. Generally used "Development", "Staging" or "Production".
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationBuilderOptions.BasePath">
            <summary>
            Base path to read the configuration file indicated by <see cref="P:Microsoft.Extensions.Configuration.ConfigurationBuilderOptions.FileName"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationBuilderOptions.EnvironmentVariablesPrefix">
            <summary>
            Prefix for the environment variables.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.ConfigurationBuilderOptions.CommandLineArgs">
            <summary>
            Command line arguments.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.CollectionExtensions">
            <summary>
            Extension methods for Collections.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Checks whatever given collection object is null or has no item.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to the collection if it's not already in the collection.
            </summary>
            <param name="source">Collection</param>
            <param name="item">Item to check and add</param>
            <typeparam name="T">Type of the items in the collection</typeparam>
            <returns>Returns True if added, returns False if not.</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items to the collection which are not already in the collection.
            </summary>
            <param name="source">The collection</param>
            <param name="items">Item to check and add</param>
            <typeparam name="T">Type of the items in the collection</typeparam>
            <returns>Returns the added items.</returns>
        </member>
        <member name="T:System.Collections.Generic.DictionaryExtensions">
            <summary>
            Extension methods for Dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            This method is used to try to get a value in a dictionary if it does exists.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="dictionary">The collection object</param>
            <param name="key">Key</param>
            <param name="value">Value of the key (or default value if key not exists)</param>
            <returns>True if key does exists in the dictionary</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <param name="factory">A factory method used to create the value if not found in the dictionary</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <param name="factory">A factory method used to create the value if not found in the dictionary</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="T:System.Collections.Generic.EnumerableExtensions">
            <summary> 
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.JoinAsString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type System.String, using the specified separator between each member.
            This is a shortcut for string.Join(...)
            </summary>
            <param name="source">A collection that contains the strings to concatenate.</param>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if values has more than one element.</param>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty.</returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            This is a shortcut for string.Join(...)
            </summary>
            <param name="source">A collection that contains the objects to concatenate.</param>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if values has more than one element.</param>
            <typeparam name="T">The type of the members of values.</typeparam>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty.</returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Filters a <see cref="T:System.Collections.Generic.IEnumerable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="source">Enumerable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the enumerable</param>
            <returns>Filtered or not filtered enumerable based on <paramref name="condition"/></returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a <see cref="T:System.Collections.Generic.IEnumerable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="source">Enumerable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the enumerable</param>
            <returns>Filtered or not filtered enumerable based on <paramref name="condition"/></returns>
        </member>
        <member name="T:System.Collections.Generic.ListExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.SortByDependencies``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Sort a list by a topological sorting, which consider their  dependencies
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="source">A list of objects to sort</param>
            <param name="getDependencies">Function to resolve the dependencies</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.SortByDependenciesVisit``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.List{``0},System.Collections.Generic.Dictionary{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="item">Item to resolve</param>
            <param name="getDependencies">Function to resolve the dependencies</param>
            <param name="sorted">List with the sortet items</param>
            <param name="visited">Dictionary with the visited items</param>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.ReThrow(System.Exception)">
            <summary>
            Uses <see cref="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)"/> method to re-throws exception
            while preserving stack trace.
            </summary>
            <param name="exception">Exception to be re-thrown</param>
        </member>
        <member name="M:System.ExceptionExtensions.GetLogLevel(System.Exception,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Try to get a log level from the given <paramref name="exception"/>
            if it implements the <see cref="T:LinFx.Extensions.Logging.IHasLogLevel"/> interface.
            Otherwise, returns the <paramref name="defaultLevel"/>.
            </summary>
            <param name="exception"></param>
            <param name="defaultLevel"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PagingQueryableExtensions.PageBy``1(System.Linq.IQueryable{``0},LinFx.Application.Dtos.IPagedResultRequest)">
            <summary>
            Used for paging. Can be used as an alternative to Skip(...).Take(...) chaining.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="request">分页请求</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PagingQueryableExtensions.PageBy``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Used for paging. Can be used as an alternative to Skip(...).Take(...) chaining.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="page">页数(eg: 1)</param>
            <param name="limit">页大小</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PagingQueryableExtensions.PageBy``2(``1,System.Int32,System.Int32)">
            <summary>
            Used for paging. Can be used as an alternative to Skip(...).Take(...) chaining.
            </summary>
        </member>
        <member name="T:System.Linq.PredicateOperator">
            <summary> The Predicate Operator </summary>
        </member>
        <member name="F:System.Linq.PredicateOperator.Or">
            <summary> The "Or" </summary>
        </member>
        <member name="F:System.Linq.PredicateOperator.And">
            <summary> The "And" </summary>
        </member>
        <member name="T:System.Linq.PredicateBuilder">
            <summary>
            See http://www.albahari.com/expressions for information and examples.
            </summary>
        </member>
        <member name="M:System.Linq.PredicateBuilder.New``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary> Start an expression </summary>
        </member>
        <member name="M:System.Linq.PredicateBuilder.New``1(System.Boolean)">
            <summary> Create an expression with a stub expression true or false to use when the expression is not yet started. </summary>
        </member>
        <member name="M:System.Linq.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary> OR </summary>
        </member>
        <member name="M:System.Linq.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary> AND </summary>
        </member>
        <member name="M:System.Linq.PredicateBuilder.Extend``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.PredicateOperator)">
            <summary>
            Extends the specified source Predicate with another Predicate and the specified PredicateOperator.
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="first">The source Predicate.</param>
            <param name="second">The second Predicate.</param>
            <param name="operator">The Operator (can be "And" or "Or").</param>
            <returns>Expression{Func{T, bool}}</returns>
        </member>
        <member name="M:System.Linq.PredicateBuilder.Extend``1(System.Linq.ExpressionStarter{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.PredicateOperator)">
            <summary>
            Extends the specified source Predicate with another Predicate and the specified PredicateOperator.
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="first">The source Predicate.</param>
            <param name="second">The second Predicate.</param>
            <param name="operator">The Operator (can be "And" or "Or").</param>
            <returns>Expression{Func{T, bool}}</returns>
        </member>
        <member name="T:System.Linq.ExpressionStarter`1">
            <summary>
            ExpressionStarter{T} which eliminates the default 1=0 or 1=1 stub expressions
            </summary>
            <typeparam name="T">The type</typeparam>
        </member>
        <member name="P:System.Linq.ExpressionStarter`1.Predicate">
            <summary>The actual Predicate. It can only be set by calling Start.</summary>
        </member>
        <member name="P:System.Linq.ExpressionStarter`1.IsStarted">
            <summary>Determines if the predicate is started.</summary>
        </member>
        <member name="P:System.Linq.ExpressionStarter`1.UseDefaultExpression">
            <summary> A default expression to use only when the expression is null </summary>
        </member>
        <member name="P:System.Linq.ExpressionStarter`1.DefaultExpression">
            <summary>The default expression</summary>
        </member>
        <member name="M:System.Linq.ExpressionStarter`1.Start(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Set the Expression predicate</summary>
            <param name="exp">The first expression</param>
        </member>
        <member name="M:System.Linq.ExpressionStarter`1.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Or</summary>
        </member>
        <member name="M:System.Linq.ExpressionStarter`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>And</summary>
        </member>
        <member name="M:System.Linq.ExpressionStarter`1.ToString">
            <summary> Show predicate string </summary>
        </member>
        <member name="M:System.Linq.ExpressionStarter`1.op_Implicit(System.Linq.ExpressionStarter{`0})~System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}">
            <summary>
            Allows this object to be implicitely converted to an Expression{Func{T, bool}}.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:System.Linq.ExpressionStarter`1.op_Implicit(System.Linq.ExpressionStarter{`0})~System.Func{`0,System.Boolean}">
            <summary>
            Allows this object to be implicitely converted to an Expression{Func{T, bool}}.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:System.Linq.ExpressionStarter`1.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})~System.Linq.ExpressionStarter{`0}">
            <summary>
            Allows this object to be implicitely converted to an Expression{Func{T, bool}}.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:System.Linq.ExpressionStarter`1.Compile">
            <summary></summary>
        </member>
        <member name="P:System.Linq.ExpressionStarter`1.Body">
            <summary></summary>
        </member>
        <member name="P:System.Linq.ExpressionStarter`1.NodeType">
            <summary></summary>
        </member>
        <member name="P:System.Linq.ExpressionStarter`1.Parameters">
            <summary></summary>
        </member>
        <member name="P:System.Linq.ExpressionStarter`1.Type">
            <summary></summary>
        </member>
        <member name="P:System.Linq.ExpressionStarter`1.Name">
            <summary></summary>
        </member>
        <member name="P:System.Linq.ExpressionStarter`1.ReturnType">
            <summary></summary>
        </member>
        <member name="P:System.Linq.ExpressionStarter`1.TailCall">
            <summary></summary>
        </member>
        <member name="P:System.Linq.ExpressionStarter`1.CanReduce">
            <summary></summary>
        </member>
        <member name="T:System.Linq.QueryableExtensions">
            <summary>
            Some useful extension methods for <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a <see cref="T:System.Linq.IQueryable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="query">Queryable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the query</param>
            <returns>Filtered or not filtered query based on <paramref name="condition"/></returns>
        </member>
        <member name="M:System.Linq.QueryableExtensions.WhereIf``2(``1,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a <see cref="T:System.Linq.IQueryable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="query">Queryable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the query</param>
            <returns>Filtered or not filtered query based on <paramref name="condition"/></returns>
        </member>
        <member name="M:System.Linq.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a <see cref="T:System.Linq.IQueryable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="query">Queryable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the query</param>
            <returns>Filtered or not filtered query based on <paramref name="condition"/></returns>
        </member>
        <member name="M:System.Linq.QueryableExtensions.WhereIf``2(``1,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a <see cref="T:System.Linq.IQueryable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="query">Queryable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the query</param>
            <returns>Filtered or not filtered query based on <paramref name="condition"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsAssignableTo``1(System.Type)">
             <summary>
             Determines whether an instance of this type can be assigned to
             an instance of the <typeparamref name="TTarget"></typeparamref>.
            
             Internally uses <see cref="M:System.Type.IsAssignableFrom(System.Type)"/>.
             </summary>
             <typeparam name="TTarget">Target type</typeparam> (as reverse).
        </member>
        <member name="M:System.TypeExtensions.IsAssignableTo(System.Type,System.Type)">
             <summary>
             Determines whether an instance of this type can be assigned to
             an instance of the <paramref name="targetType"></paramref>.
            
             Internally uses <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> (as reverse).
             </summary>
             <param name="type">this type</param>
             <param name="targetType">Target type</param>
        </member>
        <member name="M:System.TypeExtensions.GetBaseClasses(System.Type,System.Boolean)">
            <summary>
            Gets all base classes of this type.
            </summary>
            <param name="type">The type to get its base classes.</param>
            <param name="includeObject">True, to include the standard <see cref="T:System.Object"/> type in the returned array.</param>
        </member>
        <member name="M:System.TypeExtensions.GetBaseClasses(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets all base classes of this type.
            </summary>
            <param name="type">The type to get its base classes.</param>
            <param name="stoppingType">A type to stop going to the deeper base classes. This type will be be included in the returned array</param>
            <param name="includeObject">True, to include the standard <see cref="T:System.Object"/> type in the returned array.</param>
        </member>
        <member name="M:System.Base64Utils.ToBase64String(System.String)">
            <summary>
            base64 编码
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:System.Base64Utils.ToBase64String(System.Byte[])">
            <summary>
            base64 编码
            </summary>
            <param name="inArray"></param>
            <returns></returns>
        </member>
        <member name="M:System.Base64Utils.ToBase64Bytes(System.String)">
            <summary>
            base64 解码
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:System.ComparableExtensions">
            <summary>
            Extension methods for <see cref="T:System.IComparable`1"/>.
            </summary>
        </member>
        <member name="M:System.ComparableExtensions.IsBetween``1(``0,``0,``0)">
            <summary>
            Checks a value is between a minimum and maximum value.
            </summary>
            <param name="value">The value to be checked</param>
            <param name="minInclusiveValue">Minimum (inclusive) value</param>
            <param name="maxInclusiveValue">Maximum (inclusive) value</param>
        </member>
        <member name="T:System.EventHandlerExtensions">
            <summary>
            Extension methods for <see cref="T:System.EventHandler"/>.
            </summary>
        </member>
        <member name="M:System.EventHandlerExtensions.InvokeSafely(System.EventHandler,System.Object)">
            <summary>
            Raises given event safely with given arguments.
            </summary>
            <param name="eventHandler">The event handler</param>
            <param name="sender">Source of the event</param>
        </member>
        <member name="M:System.EventHandlerExtensions.InvokeSafely(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises given event safely with given arguments.
            </summary>
            <param name="eventHandler">The event handler</param>
            <param name="sender">Source of the event</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:System.EventHandlerExtensions.InvokeSafely``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises given event safely with given arguments.
            </summary>
            <typeparam name="TEventArgs">Type of the <see cref="T:System.EventArgs"/></typeparam>
            <param name="eventHandler">The event handler</param>
            <param name="sender">Source of the event</param>
            <param name="e">Event argument</param>
        </member>
        <member name="T:System.ObjectExtensions">
            <summary>
            Extension methods for all objects.
            </summary>
        </member>
        <member name="M:System.ObjectExtensions.As``1(System.Object)">
            <summary>
            Used to simplify and beautify casting an object to a type.
            </summary>
            <typeparam name="T">Type to be casted</typeparam>
            <param name="obj">Object to cast</param>
            <returns>Casted object</returns>
        </member>
        <member name="M:System.ObjectExtensions.To``1(System.Object)">
            <summary>
            Converts given object to a value type using <see cref="M:System.Convert.ChangeType(System.Object,System.Type)"/> method.
            </summary>
            <param name="obj">Object to be converted</param>
            <typeparam name="T">Type of the target object</typeparam>
            <returns>Converted object</returns>
        </member>
        <member name="M:System.ObjectExtensions.IsIn``1(``0,``0[])">
            <summary>
            Check if an item is in a list.
            </summary>
            <param name="item">Item to check</param>
            <param name="list">List of items</param>
            <typeparam name="T">Type of the items</typeparam>
        </member>
        <member name="M:System.ObjectExtensions.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if an item is in the given enumerable.
            </summary>
            <param name="item">Item to check</param>
            <param name="items">Items</param>
            <typeparam name="T">Type of the items</typeparam>
        </member>
        <member name="M:System.ObjectExtensions.If``1(``0,System.Boolean,System.Func{``0,``0})">
            <summary>
            Can be used to conditionally perform a function
            on an object and return the modified or the original object.
            It is useful for chained calls.
            </summary>
            <param name="obj">An object</param>
            <param name="condition">A condition</param>
            <param name="func">A function that is executed only if the condition is <code>true</code></param>
            <typeparam name="T">Type of the object</typeparam>
            <returns>
            Returns the modified object (by the <paramref name="func"/> if the <paramref name="condition"/> is <code>true</code>)
            or the original object if the <paramref name="condition"/> is <code>false</code>
            </returns>
        </member>
        <member name="M:System.ObjectExtensions.If``1(``0,System.Boolean,System.Action{``0})">
            <summary>
            Can be used to conditionally perform an action
            on an object and return the original object.
            It is useful for chained calls on the object.
            </summary>
            <param name="obj">An object</param>
            <param name="condition">A condition</param>
            <param name="action">An action that is executed only if the condition is <code>true</code></param>
            <typeparam name="T">Type of the object</typeparam>
            <returns>
            Returns the original object.
            </returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Extension methods for String class.
            </summary>
        </member>
        <member name="M:System.StringExtensions.EnsureEndsWith(System.String,System.Char,System.StringComparison)">
            <summary>
            Adds a char to end of given string if it does not ends with the char.
            </summary>
        </member>
        <member name="M:System.StringExtensions.EnsureStartsWith(System.String,System.Char,System.StringComparison)">
            <summary>
            Adds a char to beginning of given string if it does not starts with the char.
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether this string is null or an System.String.Empty string.
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            indicates whether this string is null, empty, or consists only of white-space characters.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="len"/> is bigger that string's length</exception>
        </member>
        <member name="M:System.StringExtensions.NormalizeLineEndings(System.String)">
            <summary>
            Converts line endings in the string to <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:System.StringExtensions.NthIndexOf(System.String,System.Char,System.Int32)">
            <summary>
            Gets index of nth occurrence of a char in a string.
            </summary>
            <param name="str">source string to be searched</param>
            <param name="c">Char to search in <paramref name="str"/></param>
            <param name="n">Count of the occurrence</param>
        </member>
        <member name="M:System.StringExtensions.RemovePostFix(System.String,System.String[])">
            <summary>
            Removes first occurrence of the given postfixes from end of the given string.
            </summary>
            <param name="str">The string.</param>
            <param name="postFixes">one or more postfix.</param>
            <returns>Modified string or the same string if it has not any of given postfixes</returns>
        </member>
        <member name="M:System.StringExtensions.RemovePostFix(System.String,System.StringComparison,System.String[])">
            <summary>
            Removes first occurrence of the given postfixes from end of the given string.
            </summary>
            <param name="str">The string.</param>
            <param name="comparisonType">String comparison type</param>
            <param name="postFixes">one or more postfix.</param>
            <returns>Modified string or the same string if it has not any of given postfixes</returns>
        </member>
        <member name="M:System.StringExtensions.RemovePreFix(System.String,System.String[])">
            <summary>
            Removes first occurrence of the given prefixes from beginning of the given string.
            </summary>
            <param name="str">The string.</param>
            <param name="preFixes">one or more prefix.</param>
            <returns>Modified string or the same string if it has not any of given prefixes</returns>
        </member>
        <member name="M:System.StringExtensions.RemovePreFix(System.String,System.StringComparison,System.String[])">
            <summary>
            Removes first occurrence of the given prefixes from beginning of the given string.
            </summary>
            <param name="str">The string.</param>
            <param name="comparisonType">String comparison type</param>
            <param name="preFixes">one or more prefix.</param>
            <returns>Modified string or the same string if it has not any of given prefixes</returns>
        </member>
        <member name="M:System.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from end of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="len"/> is bigger that string's length</exception>
        </member>
        <member name="M:System.StringExtensions.Split(System.String,System.String)">
            <summary>
            Uses string.Split method to split given string by given separator.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
            Uses string.Split method to split given string by given separator.
            </summary>
        </member>
        <member name="M:System.StringExtensions.SplitToLines(System.String)">
            <summary>
            Uses string.Split method to split given string by <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:System.StringExtensions.SplitToLines(System.String,System.StringSplitOptions)">
            <summary>
            Uses string.Split method to split given string by <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts PascalCase string to camelCase string.
            </summary>
            <param name="str">String to convert</param>
            <param name="useCurrentCulture">set true to use current culture. Otherwise, invariant culture will be used.</param>
            <param name="handleAbbreviations">set true to if you want to convert 'XYZ' to 'xyz'.</param>
            <returns>camelCase of the string</returns>
        </member>
        <member name="M:System.StringExtensions.ToSentenceCase(System.String,System.Boolean)">
            <summary>
            Converts given PascalCase/camelCase string to sentence (by splitting words by space).
            Example: "ThisIsSampleSentence" is converted to "This is a sample sentence".
            </summary>
            <param name="str">String to convert.</param>
            <param name="useCurrentCulture">set true to use current culture. Otherwise, invariant culture will be used.</param>
        </member>
        <member name="M:System.StringExtensions.ToKebabCase(System.String,System.Boolean)">
            <summary>
            Converts given PascalCase/camelCase string to kebab-case.
            </summary>
            <param name="str">String to convert.</param>
            <param name="useCurrentCulture">set true to use current culture. Otherwise, invariant culture will be used.</param>
        </member>
        <member name="M:System.StringExtensions.ToSnakeCase(System.String)">
            <summary>
            Converts given PascalCase/camelCase string to snake case.
            Example: "ThisIsSampleSentence" is converted to "this_is_a_sample_sentence".
            https://github.com/npgsql/npgsql/blob/dev/src/Npgsql/NameTranslation/NpgsqlSnakeCaseNameTranslator.cs#L51
            </summary>
            <param name="str">String to convert.</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.ToEnum``1(System.String)">
            <summary>
            Converts string to enum value.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">String value to convert</param>
            <returns>Returns enum object</returns>
        </member>
        <member name="M:System.StringExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Converts string to enum value.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">String value to convert</param>
            <param name="ignoreCase">Ignore case</param>
            <returns>Returns enum object</returns>
        </member>
        <member name="M:System.StringExtensions.ToPascalCase(System.String,System.Boolean)">
            <summary>
            Converts camelCase string to PascalCase string.
            </summary>
            <param name="str">String to convert</param>
            <param name="useCurrentCulture">set true to use current culture. Otherwise, invariant culture will be used.</param>
            <returns>PascalCase of the string</returns>
        </member>
        <member name="M:System.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:System.StringExtensions.TruncateFromBeginning(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from Ending of the string if it exceeds maximum length.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:System.StringExtensions.TruncateWithPostfix(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            It adds a "..." postfix to end of the string if it's truncated.
            Returning string can not be longer than maxLength.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:System.StringExtensions.TruncateWithPostfix(System.String,System.Int32,System.String)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            It adds given <paramref name="postfix"/> to end of the string if it's truncated.
            Returning string can not be longer than maxLength.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:System.StringExtensions.GetBytes(System.String)">
            <summary>
            Converts given string to a byte array using <see cref="P:System.Text.Encoding.UTF8"/> encoding.
            </summary>
        </member>
        <member name="M:System.StringExtensions.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts given string to a byte array using the given <paramref name="encoding"/>
            </summary>
        </member>
        <member name="T:IMultiTenant">
            <summary>
            多租户
            </summary>
        </member>
        <member name="P:IMultiTenant.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="F:Volo.Abp.ObjectExtending.MappingPropertyDefinitionChecks.None">
            <summary>
            No check. Copy all extra properties from the source to the destination.
            </summary>
        </member>
        <member name="F:Volo.Abp.ObjectExtending.MappingPropertyDefinitionChecks.Source">
            <summary>
            Copy the extra properties defined for the source class.
            </summary>
        </member>
        <member name="F:Volo.Abp.ObjectExtending.MappingPropertyDefinitionChecks.Destination">
            <summary>
            Copy the extra properties defined for the destination class.
            </summary>
        </member>
        <member name="F:Volo.Abp.ObjectExtending.MappingPropertyDefinitionChecks.Both">
            <summary>
            Copy extra properties defined for both of the source and destination classes.
            </summary>
        </member>
        <member name="T:LockExtensions">
            <summary>
            Extension methods to make locking easier.
            </summary>
        </member>
        <member name="M:LockExtensions.Locking(System.Object,System.Action)">
            <summary>
            Executes given <paramref name="action"/> by locking given <paramref name="source"/> object.
            </summary>
            <param name="source">Source object (to be locked)</param>
            <param name="action">Action (to be executed)</param>
        </member>
        <member name="M:LockExtensions.Locking``1(``0,System.Action{``0})">
            <summary>
            Executes given <paramref name="action"/> by locking given <paramref name="source"/> object.
            </summary>
            <typeparam name="T">Type of the object (to be locked)</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="action">Action (to be executed)</param>
        </member>
        <member name="M:LockExtensions.Locking``1(System.Object,System.Func{``0})">
            <summary>
            Executes given <paramref name="func"/> and returns it's value by locking given <paramref name="source"/> object.
            </summary>
            <typeparam name="TResult">Return type</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="func">Function (to be executed)</param>
            <returns>Return value of the <paramref name="func"/></returns>
        </member>
        <member name="M:LockExtensions.Locking``2(``0,System.Func{``0,``1})">
            <summary>
            Executes given <paramref name="func"/> and returns it's value by locking given <paramref name="source"/> object.
            </summary>
            <typeparam name="T">Type of the object (to be locked)</typeparam>
            <typeparam name="TResult">Return type</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="func">Function (to be executed)</param>
            <returns>Return value of the <paramnref name="func"/></returns>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinFx</name>
    </assembly>
    <members>
        <member name="T:LinFx.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:LinFx.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LinFx.LocalizationRequiredAttribute"/> class with
            <see cref="P:LinFx.LocalizationRequiredAttribute.Required"/> set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:LinFx.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LinFx.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:LinFx.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="M:LinFx.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:LinFx.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LinFx.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:LinFx.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="T:LinFx.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:LinFx.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:LinFx.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:LinFx.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:LinFx.NotifyPropertyChangedInvocatorAttribute">
            <summary>
            Indicates that the function is used to notify class type property value is changed.
            </summary>
        </member>
        <member name="T:LinFx.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:LinFx.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:LinFx.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function definition table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted. <br/>
            Using "halt" (or "void"/"nothing", which is the same) for method output means that methos doesn't return normally. <br/>
            "canbenull" annotation is only applicable for output parameters. <br/>
            You can use multiple [ContractAnnotation] for each FDT row, or use single attribute with rows separated by semicolon. <br/>
            </syntax>
            <examples>
            <list>
            <item>[ContractAnnotation("=> halt")] public void TerminationMethod()</item>
            <item>[ContractAnnotation("halt &lt;= condition: false")] public void Assert(bool condition, string text) // Regular Assertion method</item>
            <item>[ContractAnnotation("s:null => true")] public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty</item>
            <item>[ContractAnnotation("null => null; notnull => notnull")] public object Transform(object data) // Method which returns null if parameter is null, and not null if parameter is not null</item>
            <item>[ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")] public bool TryParse(string s, out Person result)</item>
            </list>
            </examples>
        </member>
        <member name="T:LinFx.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:LinFx.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:LinFx.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:LinFx.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:LinFx.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:LinFx.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:LinFx.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:LinFx.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:LinFx.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:LinFx.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:LinFx.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:LinFx.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:LinFx.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:LinFx.MeansImplicitUseAttribute"/> or <see cref="T:LinFx.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:LinFx.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:LinFx.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:LinFx.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:LinFx.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is delegate, indicates that delegate is executed while the method is executed.
            If the parameter is enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:LinFx.PureAttribute">
            <summary>
            Indicates that method doesn't contain observable side effects.
            The same as System.Diagnostics.Contracts.PureAttribute
            </summary>
        </member>
        <member name="P:LinFx.Application.IFilterRequest.Filter">
            <summary>
            过滤条件
            </summary>
        </member>
        <member name="T:LinFx.Application.IHasTotalCount">
            <summary>
            This interface is defined to standardize to set "Total Count of Items" to a DTO.
            </summary>
        </member>
        <member name="P:LinFx.Application.IHasTotalCount.TotalCount">
            <summary>
            Total count of Items.
            </summary>
        </member>
        <member name="T:LinFx.Application.ILimitedResultRequest">
            <summary>
            This interface is defined to standardize to request a limited result.
            </summary>
        </member>
        <member name="P:LinFx.Application.ILimitedResultRequest.Limit">
            <summary>
            Max expected result count.
            </summary>
        </member>
        <member name="T:LinFx.Application.IListResult`1">
            <summary>
            This interface is defined to standardize to return a list of items to clients.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:LinFx.Application.IListResult`1.Items"/> list</typeparam>
        </member>
        <member name="P:LinFx.Application.IListResult`1.Items">
            <summary>
            List of items.
            </summary>
        </member>
        <member name="T:LinFx.Application.IPagedAndSortedResultRequest">
            <summary>
            This interface is defined to standardize to request a paged and sorted result.
            </summary>
        </member>
        <member name="T:LinFx.Application.IPagedResult`1">
            <summary>
            This interface is defined to standardize to return a page of items to clients.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:LinFx.Application.IListResult`1.Items"/> list</typeparam>
        </member>
        <member name="T:LinFx.Application.IPagedResultRequest">
            <summary>
            This interface is defined to standardize to request a paged result.
            </summary>
        </member>
        <member name="P:LinFx.Application.IPagedResultRequest.Page">
            <summary>
            Skip count (beginning of the page).
            </summary>
        </member>
        <member name="T:LinFx.Application.ISortedResultRequest">
            <summary>
            This interface is defined to standardize to request a sorted result.
            </summary>
        </member>
        <member name="P:LinFx.Application.ISortedResultRequest.Sorting">
            <summary>
            Sorting information.
            Should include sorting field and optionally a direction (ASC or DESC)
            Can contain more than one field separated by comma (,).
            </summary>
            <example>
            Examples:
            "Name"
            "Name DESC"
            "Name ASC, Age DESC"
            </example>
        </member>
        <member name="T:LinFx.Application.ApplicationService">
            <summary>
            服务抽象类
            </summary>
        </member>
        <member name="M:LinFx.Application.CrudService`7.GetListAsync(`4)">
            <summary>
            列表
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Application.CrudService`7.GetAsync(`3)">
            <summary>
            获取
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Application.CrudService`7.CreateAsync(`5)">
            <summary>
            创建
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Application.CrudService`7.UpdateAsync(`3,`6)">
            <summary>
            更新
            </summary>
            <param name="id"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Application.CrudService`7.DeleteAsync(`3)">
            <summary>
            删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Application.CrudService`7.CreateFilteredQuery(`4)">
            <summary>
            This method should create <see cref="T:System.Linq.IQueryable`1"/> based on given input.
            It should filter query if needed, but should not do sorting or paging.
            Sorting should be done in <see cref="M:LinFx.Application.CrudService`7.ApplySorting(System.Linq.IQueryable{`0},`4)"/> and paging should be done in <see cref="M:LinFx.Application.CrudService`7.ApplyPaging(System.Linq.IQueryable{`0},`4)"/>
            methods.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:LinFx.Application.CrudService`7.ApplySorting(System.Linq.IQueryable{`0},`4)">
            <summary>
            Should apply sorting if needed.
            </summary>
            <param name="query">The query.</param>
            <param name="input">The input.</param>
        </member>
        <member name="M:LinFx.Application.CrudService`7.ApplyPaging(System.Linq.IQueryable{`0},`4)">
            <summary>
            Should apply paging if needed.
            </summary>
            <param name="query">The query.</param>
            <param name="input">The input.</param>
        </member>
        <member name="P:LinFx.Application.Models.FilterPagedAndSortedResultRequest.Filter">
             <summary>
            过滤
             </summary>
        </member>
        <member name="P:LinFx.Application.Models.FilterPagedAndSortedResultRequest`1.Expression">
            <summary>
            过滤条件
            </summary>
        </member>
        <member name="M:LinFx.Application.Models.PagedAndSortedResultRequestExtensions.ToPagedAndSortedResultRequest``1(LinFx.Application.Models.FilterPagedAndSortedResultRequest,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            转换类型
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinFx.Application.Models.LimitedResultRequest.Limit">
            <summary>
            页大小
            </summary>
        </member>
        <member name="T:LinFx.Application.Models.ListResult`1">
            <summary>
            Implements <see cref="T:LinFx.Application.IListResult`1"/>.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:LinFx.Application.Models.ListResult`1.Items"/> list</typeparam>
        </member>
        <member name="M:LinFx.Application.Models.ListResult`1.#ctor">
            <summary>
            Creates a new <see cref="T:LinFx.Application.Models.ListResult`1"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Application.Models.ListResult`1.#ctor(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:LinFx.Application.Models.ListResult`1"/> object.
            </summary>
            <param name="items">List of items</param>
        </member>
        <member name="P:LinFx.Application.Models.ListResult`1.Items">
            <summary>
            List of items.
            </summary>
        </member>
        <member name="T:LinFx.Application.Models.PagedAndSortedResultRequest">
            <summary>
            Simply implements <see cref="T:LinFx.Application.IPagedAndSortedResultRequest"/>.
            </summary>
        </member>
        <member name="P:LinFx.Application.Models.PagedAndSortedResultRequest.Sorting">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:LinFx.Application.Models.PagedResult`1">
            <summary>
            Implements <see cref="T:LinFx.Application.IPagedResult`1"/>.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:LinFx.Application.Models.ListResult`1.Items"/> list</typeparam>
        </member>
        <member name="P:LinFx.Application.Models.PagedResult`1.TotalCount">
            <summary>
            总数
            </summary>
        </member>
        <member name="P:LinFx.Application.Models.PagedResult`1.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:LinFx.Application.Models.PagedResult`1.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="M:LinFx.Application.Models.PagedResult`1.#ctor">
            <summary>
            Creates a new <see cref="T:LinFx.Application.Models.PagedResult`1"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Application.Models.PagedResult`1.#ctor(System.Int64,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:LinFx.Application.Models.PagedResult`1"/> object.
            </summary>
            <param name="totalCount">Total count of Items</param>
            <param name="items">List of items in current page</param>
        </member>
        <member name="M:LinFx.Application.Models.PagedResult`1.#ctor(LinFx.Application.IPagedResultRequest,System.Int64,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:LinFx.Application.Models.PagedResult`1"/> object.
            </summary>
            <param name="request"><see cref="T:LinFx.Application.IPagedResultRequest"></see></param>
            <param name="totalCount"></param>
            <param name="items"></param>
        </member>
        <member name="M:LinFx.Application.Models.PagedResult`1.#ctor(System.Int32,System.Int32,System.Int64,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:LinFx.Application.Models.PagedResult`1"/> object.
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalCount"></param>
            <param name="items"></param>
        </member>
        <member name="T:LinFx.Application.Models.PagedResultRequest">
            <summary>
            Simply implements <see cref="T:LinFx.Application.IPagedResultRequest"/>.
            </summary>
        </member>
        <member name="P:LinFx.Application.Models.PagedResultRequest.Page">
            <summary>
            当前页
            </summary>
        </member>
        <member name="T:LinFx.Check">
            <summary>
            Checks
            </summary>
        </member>
        <member name="T:LinFx.Collections.ITypeList">
            <summary>
            A shortcut for <see cref="T:LinFx.Collections.ITypeList`1"/> to use object as base type.
            </summary>
        </member>
        <member name="T:LinFx.Collections.ITypeList`1">
            <summary>
            Extends <see cref="T:System.Collections.Generic.IList`1"/> to add restriction a specific base type.
            </summary>
            <typeparam name="TBaseType">Base Type of <see cref="T:System.Type"/>s in this list</typeparam>
        </member>
        <member name="M:LinFx.Collections.ITypeList`1.Add``1">
            <summary>
            Adds a type to list.
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:LinFx.Collections.ITypeList`1.Contains``1">
            <summary>
            Checks if a type exists in the list.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinFx.Collections.ITypeList`1.Remove``1">
            <summary>
            Removes a type from list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:LinFx.Collections.TypeList">
            <summary>
            A shortcut for <see cref="T:LinFx.Collections.TypeList`1"/> to use object as base type.
            </summary>
        </member>
        <member name="T:LinFx.Collections.TypeList`1">
            <summary>
            Extends <see cref="T:System.Collections.Generic.List`1"/> to add restriction a specific base type.
            </summary>
            <typeparam name="TBaseType">Base Type of <see cref="T:System.Type"/>s in this list</typeparam>
        </member>
        <member name="P:LinFx.Collections.TypeList`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:LinFx.Collections.TypeList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LinFx.Collections.TypeList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> at the specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.#ctor">
            <summary>
            Creates a new <see cref="T:LinFx.Collections.TypeList`1"/> object.
            </summary>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Add``1">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Add(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Insert(System.Int32,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.IndexOf(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Contains``1">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Contains(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Remove``1">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Remove(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.CopyTo(System.Type[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LinFx.Collections.TypeList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:LinFx.NamedTypeSelector">
            <summary>
            Used to represent a named type selector.
            </summary>
        </member>
        <member name="P:LinFx.NamedTypeSelector.Name">
            <summary>
            Name of the selector.
            </summary>
        </member>
        <member name="P:LinFx.NamedTypeSelector.Predicate">
            <summary>
            Predicate.
            </summary>
        </member>
        <member name="M:LinFx.NamedTypeSelector.#ctor(System.String,System.Func{System.Type,System.Boolean})">
            <summary>
            Creates new <see cref="T:LinFx.NamedTypeSelector"/> object.
            </summary>
            <param name="name">Name</param>
            <param name="predicate">Predicate</param>
        </member>
        <member name="M:LinFx.NamedTypeSelectorListExtensions.Add(System.Collections.Generic.IList{LinFx.NamedTypeSelector},System.String,System.Type[])">
            <summary>
            Add list of types to the list.
            </summary>
            <param name="list">List of NamedTypeSelector items</param>
            <param name="name">An arbitrary but unique name (can be later used to remove types from the list)</param>
            <param name="types"></param>
        </member>
        <member name="T:LinFx.NameValue">
            <summary>
            Can be used to store Name/Value (or Key/Value) pairs.
            </summary>
        </member>
        <member name="T:LinFx.NameValue`1">
            <summary>
            Can be used to store Name/Value (or Key/Value) pairs.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:LinFx.NameValue`1.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:LinFx.NameValue`1.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:LinFx.NameValue`1.#ctor">
            <summary>
            Creates a new <see cref="T:LinFx.NameValue"/>.
            </summary>
        </member>
        <member name="M:LinFx.NameValue`1.#ctor(System.String,`0)">
            <summary>
            Creates a new <see cref="T:LinFx.NameValue"/>.
            </summary>
        </member>
        <member name="T:LinFx.Data.IRepository">
            <summary>
            Just to mark a class as repository.
            </summary>
        </member>
        <member name="T:LinFx.Data.IUnitOfWork">
            <summary>
            工作单元接口
            </summary>
        </member>
        <member name="M:LinFx.Data.DbConnectionFactoryExtensions.Open(LinFx.Data.Abstractions.IDbConnectionFactory)">
            <summary>
            Alias for OpenDbConnection
            </summary>
        </member>
        <member name="M:LinFx.Data.DbConnectionFactoryExtensions.Create(LinFx.Data.Abstractions.IDbConnectionFactory)">
            <summary>
            Alias for CreateDbConnection
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Data.Expressions.DataAccessEvaluator">
            <summary>
                Reference
                From:http://blogs.msdn.com/b/mattwar/archive/2007/08/01/linq-building-an-iqueryable-provider-part-iii.aspx
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Data.Expressions.DataAccessExpressionVisitor`1">
            <summary>
                This class converts an Expression{Func{TEntity, bool}} into an IPredicate group that can be used with
                DapperExtension's predicate system
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <seealso cref="T:System.Linq.Expressions.ExpressionVisitor" />
        </member>
        <member name="P:LinFx.Extensions.Data.Expressions.DataAccessExpressionVisitor`1.Expressions">
            <summary>
                Holds BinaryExpressions
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Data.Utils.ExpressionUtils.MakePredicate``1(System.String,System.Object,System.Type)">
            <summary>
             Makes the predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="typeOfValue">The type of value.</param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IAuditedObject">
            <summary>
            This interface can be implemented to add standard auditing properties to a class.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IAuditedObject`1">
            <summary>
            Extends <see cref="T:LinFx.Extensions.Auditing.IAuditedObject"/> to add user navigation properties.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="T:LinFx.Extensions.Auditing.ICreationAuditedObject">
            <summary>
            This interface can be implemented to store creation information (who and when created).
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.ICreationAuditedObject`1">
            <summary>
            Adds navigation property (object reference) to <see cref="T:LinFx.Extensions.Auditing.ICreationAuditedObject"/> interface.
            </summary>
            <typeparam name="TCreator">Type of the user</typeparam>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IDeletionAuditedObject">
            <summary>
            This interface can be implemented to store deletion information (who delete and when deleted).
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IDeletionAuditedObject.DeleterId">
            <summary>
            Id of the deleter user.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IDeletionAuditedObject`1">
            <summary>
            Extends <see cref="T:LinFx.Extensions.Auditing.IDeletionAuditedObject"/> to add user navigation propery.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IDeletionAuditedObject`1.Deleter">
            <summary>
            Reference to the deleter user.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Auditing.IEntityHistorySelectorList.RemoveByName(System.String)">
            <summary>
            Removes a selector by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IFullAuditedObject">
            <summary>
            This interface adds <see cref="T:LinFx.Extensions.Auditing.IDeletionAuditedObject"/> to <see cref="T:LinFx.Extensions.Auditing.IAuditedObject"/>.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IFullAuditedObject`1">
            <summary>
            Adds user navigation properties to <see cref="T:LinFx.Extensions.Auditing.IFullAuditedObject"/> interface for user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IHasCreationTime">
            <summary>
            A standard interface to add CreationTime property.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IHasCreationTime.CreationTime">
            <summary>
            Creation time.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IHasDeletionTime">
            <summary>
            A standard interface to add DeletionTime property to a class.
            It also makes the class soft delete (see <see cref="T:LinFx.Extensions.Auditing.ISoftDelete"/>).
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IHasDeletionTime.DeletionTime">
            <summary>
            Deletion time.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IHasModificationTime">
            <summary>
            A standard interface to add DeletionTime property to a class.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IHasModificationTime.LastModificationTime">
            <summary>
            The last modified time for this entity.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IMayHaveCreator`1.Creator">
            <summary>
            Reference to the creator.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IMayHaveCreator">
            <summary>
            Standard interface for an entity that MAY have a creator.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IMayHaveCreator.CreatorId">
            <summary>
            Id of the creator.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IModificationAuditedObject">
            <summary>
            This interface can be implemented to store modification information (who and when modified lastly).
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IModificationAuditedObject.LastModifierId">
            <summary>
            Last modifier user for this entity.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IModificationAuditedObject`1">
            <summary>
            Adds navigation properties to <see cref="T:LinFx.Extensions.Auditing.IModificationAuditedObject"/> interface for a user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IModificationAuditedObject`1.LastModifier">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IMustHaveCreator`1">
            <summary>
            Standard interface for an entity that MUST have a creator of type <typeparamref name="TCreator"/>.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IMustHaveCreator`1.Creator">
            <summary>
            Reference to the creator.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.IMustHaveCreator">
            <summary>
            Standard interface for an entity that MUST have a creator.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.IMustHaveCreator.CreatorId">
            <summary>
            Id of the creator.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Auditing.ISoftDelete">
            <summary>
            Used to standardize soft deleting entities.
            Soft-delete entities are not actually deleted,
            marked as IsDeleted = true in the database,
            but can not be retrieved to the application.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Auditing.ISoftDelete.IsDeleted">
            <summary>
            Used to mark an Entity as 'Deleted'. 
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Caching.Abstractions.ICacheManager">
            <summary>
            Cache manager interface
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.ICacheManager.Get``1(System.String,System.Func{``0},System.Nullable{System.Int32})">
            <summary>
            Get a cached item. If it's not in the cache yet, then load and cache it
            </summary>
            <typeparam name="T">Type of cached item</typeparam>
            <param name="key">Cache key</param>
            <param name="acquire">Function to load item if it's not in the cache yet</param>
            <param name="cacheTime">Cache time in minutes; pass 0 to do not cache; pass null to use the default time</param>
            <returns>The cached value associated with the specified key</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.ICacheManager.Get``1(System.String)">
            <summary>
            Get a cached item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.ICacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            Adds the specified key and object to the cache
            </summary>
            <param name="key">Key of cached item</param>
            <param name="data">Value for caching</param>
            <param name="cacheTime">Cache time in minutes</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.ICacheManager.IsSet(System.String)">
            <summary>
            Gets a value indicating whether the value associated with the specified key is cached
            </summary>
            <param name="key">Key of cached item</param>
            <returns>True if item already is in cache; otherwise false</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.ICacheManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the cache
            </summary>
            <param name="key">Key of cached item</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.ICacheManager.RemoveByPattern(System.String)">
            <summary>
            Removes items by key pattern
            </summary>
            <param name="pattern">String key pattern</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.ICacheManager.Clear">
            <summary>
            Clear all cache data
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.ILocker.PerformActionWithLock(System.String,System.TimeSpan,System.Action)">
            <summary>
            Perform some action with exclusive lock
            </summary>
            <param name="resource">The key we are locking on</param>
            <param name="expirationTime">The time after which the lock will automatically be expired</param>
            <param name="action">Action to be performed with locking</param>
            <returns>True if lock was acquired and action was performed; otherwise false</returns>
        </member>
        <member name="T:LinFx.Extensions.Caching.Abstractions.IRedisConnectionWrapper">
            <summary>
            Represents Redis connection wrapper
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.IRedisConnectionWrapper.GetDatabase(System.Nullable{System.Int32})">
            <summary>
            Obtain an interactive connection to a database inside Redis
            </summary>
            <param name="db">Database number; pass null to use the default value</param>
            <returns>Redis cache database</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.IRedisConnectionWrapper.GetServer(System.Net.EndPoint)">
            <summary>
            Obtain a configuration API for an individual server
            </summary>
            <param name="endPoint">The network endpoint</param>
            <returns>Redis server</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.IRedisConnectionWrapper.GetEndPoints">
            <summary>
            Gets all endpoints defined on the server
            </summary>
            <returns>Array of endpoints</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.IRedisConnectionWrapper.FlushDatabase(System.Nullable{System.Int32})">
            <summary>
            Delete all the keys of the database
            </summary>
            <param name="db">Database number; pass null to use the default value</param>
        </member>
        <member name="T:LinFx.Extensions.Caching.Abstractions.IStaticCacheManager">
            <summary>
            Represents a manager for caching between HTTP requests (long term caching)
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.Abstractions.IStaticCacheManager.GetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.Int32})">
            <summary>
            Get a cached item. If it's not in the cache yet, then load and cache it
            </summary>
            <typeparam name="T">Type of cached item</typeparam>
            <param name="key">Cache key</param>
            <param name="acquire">Function to load item if it's not in the cache yet</param>
            <param name="cacheTime">Cache time in minutes; pass 0 to do not cache; pass null to use the default time</param>
            <returns>The cached value associated with the specified key</returns>
        </member>
        <member name="P:LinFx.Extensions.Caching.CacheOptions.CacheTimeInMinutes">
            <summary>
            Gets the default cache time in minutes
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Caching.CacheOptions.RedisCachingEnabled">
            <summary>
            Gets or sets a value indicating whether we should use Redis server for caching (instead of default in-memory caching)
            Redis or Memeroy, Redis support (used by web farms, Azure, etc). Find more about it at https://azure.microsoft.com/en-us/documentation/articles/cache-dotnet-how-to-use-azure-redis-cache/
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Caching.CacheOptions.RedisCachingConnection">
            <summary>
            Gets or sets Redis connection string. Used when Redis caching is enabled
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Caching.MemoryCacheManager">
            <summary>
            Represents a memory cache manager 
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Caching.MemoryCacheManager._allKeys">
            <summary>
            All keys of cache
            </summary>
            <remarks>Dictionary value indicating whether a key still exists in cache</remarks> 
        </member>
        <member name="F:LinFx.Extensions.Caching.MemoryCacheManager._cancellationTokenSource">
            <summary>
            Cancellation token for clear cache
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.GetMemoryCacheEntryOptions(System.TimeSpan)">
            <summary>
            Create entry options to item of memory cache
            </summary>
            <param name="cacheTime">Cache time</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.AddKey(System.String)">
            <summary>
            Add key to dictionary
            </summary>
            <param name="key">Key of cached item</param>
            <returns>Itself key</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.RemoveKey(System.String)">
            <summary>
            Remove key from dictionary
            </summary>
            <param name="key">Key of cached item</param>
            <returns>Itself key</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.TryRemoveKey(System.String)">
            <summary>
            Try to remove a key from dictionary, or mark a key as not existing in cache
            </summary>
            <param name="key">Key of cached item</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.ClearKeys">
            <summary>
            Remove all keys marked as not existing
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.PostEviction(System.Object,System.Object,Microsoft.Extensions.Caching.Memory.EvictionReason,System.Object)">
            <summary>
            Post eviction
            </summary>
            <param name="key">Key of cached item</param>
            <param name="value">Value of cached item</param>
            <param name="reason">Eviction reason</param>
            <param name="state">State</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.Get``1(System.String,System.Func{``0},System.Nullable{System.Int32})">
            <summary>
            Get a cached item. If it's not in the cache yet, then load and cache it
            </summary>
            <typeparam name="T">Type of cached item</typeparam>
            <param name="key">Cache key</param>
            <param name="acquire">Function to load item if it's not in the cache yet</param>
            <param name="cacheTime">Cache time in minutes; pass 0 to do not cache; pass null to use the default time</param>
            <returns>The cached value associated with the specified key</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.Get``1(System.String)">
            <summary>
            Get a cached item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.GetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.Int32})">
            <summary>
            Get a cached item. If it's not in the cache yet, then load and cache it
            </summary>
            <typeparam name="T">Type of cached item</typeparam>
            <param name="key">Cache key</param>
            <param name="acquire">Function to load item if it's not in the cache yet</param>
            <param name="cacheTime">Cache time in minutes; pass 0 to do not cache; pass null to use the default time</param>
            <returns>The cached value associated with the specified key</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            Adds the specified key and object to the cache
            </summary>
            <param name="key">Key of cached item</param>
            <param name="data">Value for caching</param>
            <param name="cacheTime">Cache time in minutes</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.IsSet(System.String)">
            <summary>
            Gets a value indicating whether the value associated with the specified key is cached
            </summary>
            <param name="key">Key of cached item</param>
            <returns>True if item already is in cache; otherwise false</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.PerformActionWithLock(System.String,System.TimeSpan,System.Action)">
            <summary>
            Perform some action with exclusive in-memory lock
            </summary>
            <param name="key">The key we are locking on</param>
            <param name="expirationTime">The time after which the lock will automatically be expired</param>
            <param name="action">Action to be performed with locking</param>
            <returns>True if lock was acquired and action was performed; otherwise false</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the cache
            </summary>
            <param name="key">Key of cached item</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.RemoveByPattern(System.String)">
            <summary>
            Removes items by key pattern
            </summary>
            <param name="pattern">String key pattern</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.Clear">
            <summary>
            Clear all cache data
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.MemoryCacheManager.Dispose">
            <summary>
            Dispose cache manager
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Caching.PerRequestCacheManager">
            <summary>
            Represents a manager for caching during an HTTP request (short term caching)
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.PerRequestCacheManager.GetItems">
            <summary>
            Gets a key/value collection that can be used to share data within the scope of this request 
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.PerRequestCacheManager.Get``1(System.String,System.Func{``0},System.Nullable{System.Int32})">
            <summary>
            Get a cached item. If it's not in the cache yet, then load and cache it
            </summary>
            <typeparam name="T">Type of cached item</typeparam>
            <param name="key">Cache key</param>
            <param name="acquire">Function to load item if it's not in the cache yet</param>
            <param name="cacheTime">Cache time in minutes; pass 0 to do not cache; pass null to use the default time</param>
            <returns>The cached value associated with the specified key</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.PerRequestCacheManager.Get``1(System.String)">
            <summary>
            Get a cached item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.PerRequestCacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            Adds the specified key and object to the cache
            </summary>
            <param name="key">Key of cached item</param>
            <param name="data">Value for caching</param>
            <param name="cacheTime">Cache time in minutes</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.PerRequestCacheManager.IsSet(System.String)">
            <summary>
            Gets a value indicating whether the value associated with the specified key is cached
            </summary>
            <param name="key">Key of cached item</param>
            <returns>True if item already is in cache; otherwise false</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.PerRequestCacheManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the cache
            </summary>
            <param name="key">Key of cached item</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.PerRequestCacheManager.RemoveByPattern(System.String)">
            <summary>
            Removes items by key pattern
            </summary>
            <param name="pattern">String key pattern</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.PerRequestCacheManager.Clear">
            <summary>
            Clear all cache data
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.PerRequestCacheManager.Dispose">
            <summary>
            Dispose cache manager
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Caching.RedisCacheManager">
            <summary>
            Represents a manager for caching in Redis store (http://redis.io/).
            Mostly it'll be used when running in a web farm or Azure. But of course it can be also used on any server or environment
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.GetAsync``1(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <typeparam name="T">Type of cached item</typeparam>
            <param name="key">Key of cached item</param>
            <returns>The cached value associated with the specified key</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.SetAsync(System.String,System.Object,System.Int32)">
            <summary>
            Adds the specified key and object to the cache
            </summary>
            <param name="key">Key of cached item</param>
            <param name="data">Value for caching</param>
            <param name="cacheTime">Cache time in minutes</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.IsSetAsync(System.String)">
            <summary>
            Gets a value indicating whether the value associated with the specified key is cached
            </summary>
            <param name="key">Key of cached item</param>
            <returns>True if item already is in cache; otherwise false</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.RemoveAsync(System.String)">
            <summary>
            Removes the value with the specified key from the cache
            </summary>
            <param name="key">Key of cached item</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.RemoveByPatternAsync(System.String)">
            <summary>
            Removes items by key pattern
            </summary>
            <param name="pattern">String key pattern</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.ClearAsync">
            <summary>
            Clear all cache data
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.Get``1(System.String,System.Func{``0},System.Nullable{System.Int32})">
            <summary>
            Get a cached item. If it's not in the cache yet, then load and cache it
            </summary>
            <typeparam name="T">Type of cached item</typeparam>
            <param name="key">Cache key</param>
            <param name="acquire">Function to load item if it's not in the cache yet</param>
            <param name="cacheTime">Cache time in minutes; pass 0 to do not cache; pass null to use the default time</param>
            <returns>The cached value associated with the specified key</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.Get``1(System.String)">
            <summary>
            Get a cached item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.GetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.Int32})">
            <summary>
            Get a cached item. If it's not in the cache yet, then load and cache it
            </summary>
            <typeparam name="T">Type of cached item</typeparam>
            <param name="key">Cache key</param>
            <param name="acquire">Function to load item if it's not in the cache yet</param>
            <param name="cacheTime">Cache time in minutes; pass 0 to do not cache; pass null to use the default time</param>
            <returns>The cached value associated with the specified key</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            Adds the specified key and object to the cache
            </summary>
            <param name="key">Key of cached item</param>
            <param name="data">Value for caching</param>
            <param name="cacheTime">Cache time in minutes</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.IsSet(System.String)">
            <summary>
            Gets a value indicating whether the value associated with the specified key is cached
            </summary>
            <param name="key">Key of cached item</param>
            <returns>True if item already is in cache; otherwise false</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the cache
            </summary>
            <param name="key">Key of cached item</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.RemoveByPattern(System.String)">
            <summary>
            Removes items by key pattern
            </summary>
            <param name="pattern">String key pattern</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.Clear">
            <summary>
            Clear all cache data
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisCacheManager.Dispose">
            <summary>
            Dispose cache manager
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Caching.RedisConnectionWrapper">
            <summary>
            Represents Redis connection wrapper implementation
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisConnectionWrapper.GetConnectionString">
            <summary>
            Get connection string to Redis cache from configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisConnectionWrapper.GetConnection">
            <summary>
            Get connection to Redis servers
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisConnectionWrapper.CreateRedisLockFactory">
            <summary>
            Create instance of RedLock factory
            </summary>
            <returns>RedLock factory</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisConnectionWrapper.GetDatabase(System.Nullable{System.Int32})">
            <summary>
            Obtain an interactive connection to a database inside Redis
            </summary>
            <param name="db">Database number; pass null to use the default value</param>
            <returns>Redis cache database</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisConnectionWrapper.GetServer(System.Net.EndPoint)">
            <summary>
            Obtain a configuration API for an individual server
            </summary>
            <param name="endPoint">The network endpoint</param>
            <returns>Redis server</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisConnectionWrapper.GetEndPoints">
            <summary>
            Gets all endpoints defined on the server
            </summary>
            <returns>Array of endpoints</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisConnectionWrapper.FlushDatabase(System.Nullable{System.Int32})">
            <summary>
            Delete all the keys of the database
            </summary>
            <param name="db">Database number; pass null to use the default value</param>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisConnectionWrapper.PerformActionWithLock(System.String,System.TimeSpan,System.Action)">
            <summary>
            Perform some action with Redis distributed lock
            </summary>
            <param name="resource">The thing we are locking on</param>
            <param name="expirationTime">The time after which the lock will automatically be expired by Redis</param>
            <param name="action">Action to be performed with locking</param>
            <returns>True if lock was acquired and action was performed; otherwise false</returns>
        </member>
        <member name="M:LinFx.Extensions.Caching.RedisConnectionWrapper.Dispose">
            <summary>
            Release all resources associated with this object
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Configuration.Abstractions.IAppSettingService">
            <summary>
            配置服务
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Configuration.AppSetting">
            <summary>
            配置实体
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Configuration.AppSetting.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:LinFx.Extensions.Configuration.AppSetting.Value">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Configuration.AppSetting.Module">
            <summary>
            模块
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Configuration.AppSetting.FormatType">
            <summary>
            格式化类型
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Configuration.AppSetting.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Configuration.AppSetting.IsVisibleInCommonSettingPage">
            <summary>
            是否在配置里显示
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Configuration.AppSetting.Note">
            <summary>
            备注
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Configuration.AppSettingService.cacheTimeForSecond">
            <summary>
            默认缓存时间, 绝对过期时间 * 10
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.Configure(System.Type,System.Collections.Generic.IList{System.Reflection.Assembly},LinFx.Extensions.Dapper.Dialect.ISqlDialect)">
            <summary>
            Configure DapperExtensions extension methods.
            </summary>
            <param name="defaultMapper"></param>
            <param name="mappingAssemblies"></param>
            <param name="sqlDialect"></param>
        </member>
        <member name="P:LinFx.Extensions.Dapper.DapperExtensions.Instance">
            <summary>
            Gets the Dapper Extensions Implementation
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Dapper.DapperExtensions.InstanceFactory">
            <summary>
            Get or sets the Dapper Extensions Implementation Factory.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.SetMappingAssemblies(System.Collections.Generic.IList{System.Reflection.Assembly})">
            <summary>
            Add other assemblies that Dapper Extensions will search if a mapping is not found in the same assembly of the POCO.
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a query for the specified id, returning the data typed as per T
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.InsertAsync``1(System.Data.IDbConnection,``0[],System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes an insert query for the specified entity.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.InsertAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes an insert query for the specified entity, returning the primary key.  
            If the entity has a single key, just the value is returned.  
            If the entity has a composite key, an IDictionary&lt;string, object&gt; is returned with the key values.
            The key value for the entity will also be updated if the KeyType is a Guid or Identity.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.UpdateAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes an update query for the specified entity.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a delete query for the specified entity.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a delete query using the specified predicate.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.GetList``1(System.Data.IDbConnection,System.Object,LinFx.Data.Abstractions.Paging,LinFx.Extensions.Data.Sorting[])">
            <summary>
            Executes a select query using the specified predicate, returning an IEnumerable data typed as per T.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.GetSet``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{LinFx.Data.Abstractions.ISort},System.UInt32,System.UInt32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Executes a select query using the specified predicate, returning an IEnumerable data typed as per T.
            Data returned is dependent upon the specified firstResult and maxResults.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.Count``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a query using the specified predicate, returning an integer that represents the number of rows that match the query.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.GetMultiple(System.Data.IDbConnection,LinFx.Extensions.Dapper.MultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a select query for multiple objects, returning IMultipleResultReader for each predicate.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.GetMap``1">
            <summary>
            Gets the appropriate mapper for the specified type T. 
            If the mapper for the type is not yet created, a new mapper is generated from the mapper type specifed by DefaultMapper.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.ClearCache">
            <summary>
            Clears the ClassMappers for each type.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.DapperExtensions.GetNextGuid">
            <summary>
            Generates a COMB Guid which solves the fragmented index issue.
            See: http://davybrion.com/blog/2009/05/using-the-guidcomb-identifier-strategy
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Dapper.Mapper.AutoClassMapper`1">
            <summary>
            Automatically maps an entity to a table using a combination of reflection and naming conventions for keys.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Dapper.Mapper.ClassMapper`1">
            <summary>
            Maps an entity to a table through a collection of property maps.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Dapper.Mapper.ClassMapper`1.SchemaName">
            <summary>
            Gets or sets the schema to use when referring to the corresponding table name in the database.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Dapper.Mapper.ClassMapper`1.TableName">
            <summary>
            Gets or sets the table to use in the database.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Dapper.Mapper.ClassMapper`1.Properties">
            <summary>
            A collection of properties that will map to columns in the database table.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Dapper.Mapper.ClassMapper`1.EntityType">
            <summary>
            EntityType
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.Mapper.ClassMapper`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Fluently, maps an entity property to a column
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.Mapper.ClassMapper`1.Map(System.Reflection.PropertyInfo)">
            <summary>
            Fluently, maps an entity property to a column
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Dapper.Mapper.PluralizedAutoClassMapper`1">
            <summary>
            Automatically maps an entity to a table using a combination of reflection and naming conventions for keys. 
            Identical to AutoClassMapper, but attempts to pluralize table names automatically.
            Example: Person entity maps to People table
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Dapper.Mapper.IPropertyMap">
            <summary>
            Maps an entity property to its corresponding column in the database.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Dapper.Mapper.PropertyMap">
            <summary>
            Maps an entity property to its corresponding column in the database.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Dapper.Mapper.PropertyMap.Name">
            <summary>
            Gets the name of the property by using the specified propertyInfo.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Dapper.Mapper.PropertyMap.ColumnName">
            <summary>
            Gets the column name for the current property.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Dapper.Mapper.PropertyMap.KeyType">
            <summary>
            Gets the key type for the current property.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Dapper.Mapper.PropertyMap.Ignored">
            <summary>
            Gets the ignore status of the current property. If ignored, the current property will not be included in queries.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Dapper.Mapper.PropertyMap.IsReadOnly">
            <summary>
            Gets the read-only status of the current property. If read-only, the current property will not be included in INSERT and UPDATE queries.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Dapper.Mapper.PropertyMap.PropertyInfo">
            <summary>
            Gets the property info for the current property.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.Mapper.PropertyMap.Column(System.String)">
            <summary>
            Fluently sets the column name for the property.
            </summary>
            <param name="columnName">The column name as it exists in the database.</param>
        </member>
        <member name="M:LinFx.Extensions.Dapper.Mapper.PropertyMap.Key(LinFx.Extensions.Dapper.Mapper.KeyType)">
            <summary>
            Fluently sets the key type of the property.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.Mapper.PropertyMap.Ignore">
            <summary>
            Fluently sets the ignore status of the property.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.Mapper.PropertyMap.ReadOnly">
            <summary>
            Fluently sets the read-only status of the property.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Dapper.Mapper.KeyType">
            <summary>
            Used by ClassMapper to determine which entity property represents the key.
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Dapper.Mapper.KeyType.NotAKey">
            <summary>
            The property is not a key and is not automatically managed.
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Dapper.Mapper.KeyType.Identity">
            <summary>
            The property is an integery-based identity generated from the database.
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Dapper.Mapper.KeyType.Guid">
            <summary>
            The property is a Guid identity which is automatically managed.
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Dapper.Mapper.KeyType.Assigned">
            <summary>
            The property is a key that is not automatically managed.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.Predicates.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},LinFx.Extensions.Dapper.Operator,System.Object,System.Boolean)">
            <summary>
            Factory method that creates a new IFieldPredicate predicate: [FieldName] [Operator] [Value]. 
            Example: WHERE FirstName = 'Foo'
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="expression">An expression that returns the left operand [FieldName].</param>
            <param name="op">The comparison operator.</param>
            <param name="value">The value for the predicate.</param>
            <param name="not">Effectively inverts the comparison operator. Example: WHERE FirstName &lt;&gt; 'Foo'.</param>
            <returns>An instance of IFieldPredicate.</returns>
        </member>
        <member name="M:LinFx.Extensions.Dapper.Predicates.Property``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},LinFx.Extensions.Dapper.Operator,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Boolean)">
            <summary>
            Factory method that creates a new IPropertyPredicate predicate: [FieldName1] [Operator] [FieldName2]
            Example: WHERE FirstName = LastName
            </summary>
            <typeparam name="T">The type of the entity for the left operand.</typeparam>
            <typeparam name="T2">The type of the entity for the right operand.</typeparam>
            <param name="expression">An expression that returns the left operand [FieldName1].</param>
            <param name="op">The comparison operator.</param>
            <param name="expression2">An expression that returns the right operand [FieldName2].</param>
            <param name="not">Effectively inverts the comparison operator. Example: WHERE FirstName &lt;&gt; LastName </param>
            <returns>An instance of IPropertyPredicate.</returns>
        </member>
        <member name="M:LinFx.Extensions.Dapper.Predicates.Group(LinFx.Extensions.Dapper.GroupOperator,LinFx.Extensions.Dapper.IPredicate[])">
            <summary>
            Factory method that creates a new IPredicateGroup predicate.
            Predicate groups can be joined together with other predicate groups.
            </summary>
            <param name="op">The grouping operator to use when joining the predicates (AND / OR).</param>
            <param name="predicate">A list of predicates to group.</param>
            <returns>An instance of IPredicateGroup.</returns>
        </member>
        <member name="M:LinFx.Extensions.Dapper.Predicates.Exists``1(LinFx.Extensions.Dapper.IPredicate,System.Boolean)">
            <summary>
            Factory method that creates a new IExistsPredicate predicate.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.Predicates.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},LinFx.Extensions.Dapper.BetweenValues,System.Boolean)">
            <summary>
            Factory method that creates a new IBetweenPredicate predicate. 
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Dapper.Predicates.Sort``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Factory method that creates a new Sort which controls how the results will be sorted.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Dapper.PredicateGroup">
            <summary>
            Groups IPredicates together using the specified group operator.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Dapper.Operator">
            <summary>
            Comparison operator for predicates.
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Dapper.Operator.Eq">
            <summary>
            Equal to
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Dapper.Operator.Gt">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Dapper.Operator.Ge">
            <summary>
            Greater than or equal to
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Dapper.Operator.Lt">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Dapper.Operator.Le">
            <summary>
            Less than or equal to
            </summary>
        </member>
        <member name="F:LinFx.Extensions.Dapper.Operator.Like">
            <summary>
            Like (You can use % in the value to do wilcard searching)
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Dapper.GroupOperator">
            <summary>
            Operator to use when joining predicates in a PredicateGroup.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.DependencyInjection.ServiceContext">
            <summary>
            服务提供程序上下文
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Elasticsearch.ElasticsearchOptions.Host">
            <summary>
            Host (default: http://localhost:9200)
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Elasticsearch.ElasticsearchOptions.Index">
            <summary>
            Default Index
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Email.EmailSenderOptions.UserName">
            <summary>
            登录账号
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Email.EmailSenderOptions.Password">
            <summary>
            登录密码
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Email.EmailSenderOptions.Host">
            <summary>
            邮箱服务器地址
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Email.EmailSenderOptions.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Email.EmailSenderOptions.UseSSL">
            <summary>
            是否启用SSL
            </summary>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.PublishAsync(LinFx.Extensions.EventBus.IntegrationEvent,System.String)">
            <summary>
            Triggers an event.
            </summary>
            <param name="evt"></param>
            <param name="routingKey"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.Subscribe``2">
            <summary>
            Registers to an event.
            </summary>
            <typeparam name="TEvent"></typeparam>
            <typeparam name="THandler"></typeparam>
        </member>
        <member name="M:LinFx.Extensions.EventBus.IEventBus.Unsubscribe``2">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEvent"></typeparam>
            <typeparam name="THandler"></typeparam>
        </member>
        <member name="T:LinFx.Extensions.Mediator.Idempotency.IdentifiedCommandHandler`2">
            <summary>
            Provides a base implementation for handling duplicate request and ensuring idempotent updates, in the cases where
            a requestid sent by client is used to detect duplicate requests.
            </summary>
            <typeparam name="TCommand">Type of the command handler that performs the operation if request is not duplicated</typeparam>
            <typeparam name="TResponse">Return value of the inner command handler</typeparam>
        </member>
        <member name="M:LinFx.Extensions.Mediator.Idempotency.IdentifiedCommandHandler`2.CreateResultForDuplicateRequest">
            <summary>
            Creates the result value to return if a previous request was found
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LinFx.Extensions.Mediator.Idempotency.IdentifiedCommandHandler`2.Handle(LinFx.Extensions.Mediator.Idempotency.IdentifiedCommand{`0,`1},System.Threading.CancellationToken)" -->
        <member name="T:LinFx.Extensions.MongoDB.IMongoDatabaseProvider">
            <summary>
            Defines interface to obtain a <see cref="T:MongoDB.Driver.MongoDatabaseBase"/> object.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.MultiTenancy.CurrentTenant">
            <summary>
            当前租户
            </summary>
        </member>
        <member name="P:LinFx.Extensions.MultiTenancy.MultiTenancyOptions.IsEnabled">
            <summary>
            A central point to enable/disable multi-tenancy.
            Default: false. 
            </summary>
        </member>
        <member name="P:LinFx.Extensions.MultiTenancy.TenantIdWrapper.TenantId">
            <summary>
            Null indicates the host.
            Not null value for a tenant.
            </summary>
        </member>
        <member name="T:LinFx.Extensions.MultiTenancy.TenantInfo">
            <summary>
            租户
            </summary>
        </member>
        <member name="P:LinFx.Extensions.MultiTenancy.TenantInfo.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:LinFx.Extensions.MultiTenancy.TenantInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:LinFx.Extensions.RabbitMq.IChannelAccessor">
            <summary>
            channel accessor
            </summary>
        </member>
        <member name="P:LinFx.Extensions.RabbitMq.IChannelAccessor.Name">
            <summary>
            Name of the channel.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.RabbitMq.IChannelAccessor.Channel">
            <summary>
            Reference to the channel.
            Never dispose the <see cref="P:LinFx.Extensions.RabbitMq.IChannelAccessor.Channel"/> object.
            Instead, dispose the <see cref="T:LinFx.Extensions.RabbitMq.IChannelAccessor"/> after usage.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.RabbitMq.IChannelPool.Acquire(System.String,System.String)">
            <summary>
            获得
            </summary>
            <param name="channelName"></param>
            <param name="connectionName"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.RabbitMq.IConnectionPool">
            <summary>
            连接池
            </summary>
        </member>
        <member name="M:LinFx.Extensions.RabbitMq.IConnectionPool.Get(System.String)">
            <summary>
            获取连接
            </summary>
            <param name="connectionName"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.RabbitMq.IConsumerFactory.Create(LinFx.Extensions.RabbitMq.ExchangeDeclareConfiguration,LinFx.Extensions.RabbitMq.QueueDeclareConfiguration,System.String)">
            <summary>
            Creates a new <see cref="T:LinFx.Extensions.RabbitMq.IRabbitMqConsumer"/>.
            Avoid to create too many consumers since they are
            not disposed until end of the application.
            </summary>
            <param name="exchange"></param>
            <param name="queue"></param>
            <param name="connectionName"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.RabbitMq.IRabbitMqConsumer">
            <summary>
            消费者
            </summary>
        </member>
        <member name="T:LinFx.Extensions.RabbitMq.IRabbitMqPersistentConnection">
            <summary>
            连接
            </summary>
        </member>
        <member name="P:LinFx.Extensions.RabbitMq.IRabbitMqPersistentConnection.IsConnected">
            <summary>
            是否连接
            </summary>
        </member>
        <member name="M:LinFx.Extensions.RabbitMq.IRabbitMqPersistentConnection.TryConnect">
            <summary>
            尝试连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Extensions.RabbitMq.IRabbitMqPersistentConnection.CreateModel">
            <summary>
            创建Model
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Extensions.RabbitMq.ConnectionConfiguration">
            <summary>
            连接配置
            </summary>
        </member>
        <member name="P:LinFx.Extensions.RabbitMq.ConnectionConfiguration.Uri">
            <summary>
            The environment variable named 'RABBITMQ_URL' isn't set. Set it to e.g. 'amqp://localhost'
            </summary>
        </member>
        <member name="T:LinFx.Extensions.RabbitMq.DefaultChannelPool">
            <summary>
            Model pool
            </summary>
        </member>
        <member name="T:LinFx.Extensions.RabbitMq.DefaultConnectionPool">
            <summary>
            默认连接池
            </summary>
        </member>
        <member name="T:LinFx.Extensions.RabbitMq.DefaultRabbitMqPersistentConnection">
            <summary>
            默认连接
            </summary>
        </member>
        <member name="T:LinFx.Extensions.RabbitMq.RabbitMqConsumer">
            <summary>
            消费者
            </summary>
        </member>
        <member name="P:LinFx.Extensions.RabbitMq.RabbitMqConsumer.ConnectionPool">
            <summary>
            连接池
            </summary>
        </member>
        <member name="P:LinFx.Extensions.RabbitMq.RabbitMqConsumer.Channel">
            <summary>
            Common AMQP model
            </summary>
        </member>
        <member name="T:LinFx.Extensions.Setting.IExtendableObject">
            <summary>
            Defines a JSON formatted string property to extend an object/entity.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.IExtendableObject.ExtensionData">
            <summary>
            A JSON formatted string to extend the containing object.
            JSON data can contain properties with arbitrary values (like primitives or complex objects).
            Extension methods are available (<see cref="T:LinFx.Extensions.Setting.ExtendableObjectExtensions"/>) to manipulate this data.
            General format:
            <code>
            {
              "Property1" : ...
              "Property2" : ...
            }
            </code>
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.Name">
            <summary>
            Unique name of the setting.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.DisplayName">
            <summary>
            Display name of the setting.
            This can be used to show setting to the user.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.Description">
            <summary>
            A brief description for this setting.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.DefaultValue">
            <summary>
            Default value of the setting.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.IsVisibleToClients">
            <summary>
            Can clients see this setting and it's value.
            It maybe dangerous for some settings to be visible to clients (such as email server password).
            Default: false.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.Setting.SettingDefinition.ExtraProperties">
            <summary>
            Can be used to store some custom objects related to this setting.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.Setting.SettingDefinition.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:LinFx.Extensions.Setting.SettingDefinition"/> object.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="defaultValue">Default value of the setting</param>
            <param name="displayName">Display name of the permission</param>
            <param name="description">A brief description for this setting</param>
            <param name="isVisibleToClients">Can clients see this setting and it's value. Default: false</param>
        </member>
        <member name="M:LinFx.Extensions.Setting.SettingDefinition.SetExtraProperties(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Can be used to store some custom objects related to this setting.
            </summary>
            <param name="extraProperties"></param>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenu.Name">
            <summary>
            Unique name of the menu in the application.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenu.DisplayName">
            <summary>
            Display name of the menu.
            Default value is the <see cref="P:LinFx.Extensions.UI.Navigation.ApplicationMenu.Name"/>.
            </summary>
        </member>
        <member name="M:LinFx.Extensions.UI.Navigation.ApplicationMenu.AddItem(LinFx.Extensions.UI.Navigation.ApplicationMenuItem)">
            <summary>
            Adds a <see cref="T:LinFx.Extensions.UI.Navigation.ApplicationMenuItem"/> to <see cref="P:LinFx.Extensions.UI.Navigation.ApplicationMenu.Items"/>.
            </summary>
            <param name="menuItem"><see cref="T:LinFx.Extensions.UI.Navigation.ApplicationMenuItem"/> to be added</param>
            <returns>This <see cref="T:LinFx.Extensions.UI.Navigation.ApplicationMenu"/> object</returns>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenuItem.Name">
            <summary>
            Unique name of the menu in the application.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenuItem.DisplayName">
            <summary>
            Display name of the menu item.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenuItem.Order">
            <summary>
            The Display order of the menu.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenuItem.Url">
            <summary>
            The URL to navigate when this menu item is selected.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenuItem.Icon">
            <summary>
            Icon of the menu item if exists.
            </summary>
        </member>
        <member name="P:LinFx.Extensions.UI.Navigation.ApplicationMenuItem.Target">
            <summary>
            Target of the menu item. Can be null, "_blank", "_self", "_parent", "_top" or a frame name for web applications.
            </summary>
        </member>
        <member name="T:LinFx.IDateTimeRange">
            <summary>
            Defines interface for a DateTime range.
            </summary>
        </member>
        <member name="P:LinFx.IDateTimeRange.StartTime">
            <summary>
            Start time of the datetime range.
            </summary>
        </member>
        <member name="P:LinFx.IDateTimeRange.EndTime">
            <summary>
            End time of the datetime range.
            </summary>
        </member>
        <member name="T:LinFx.DateTimeRange">
            <summary>
            A basic implementation of <see cref="T:LinFx.IDateTimeRange"/> to store a date range.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.StartTime">
            <summary>
            Start time of the datetime range.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.EndTime">
            <summary>
            End time of the datetime range.
            </summary>
        </member>
        <member name="M:LinFx.DateTimeRange.#ctor">
            <summary>
            Creates a new <see cref="T:LinFx.DateTimeRange"/> object.
            </summary>
        </member>
        <member name="M:LinFx.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates a new <see cref="T:LinFx.DateTimeRange"/> object from given <paramref name="startTime"/> and <paramref name="endTime"/>.
            </summary>
            <param name="startTime">Start time of the datetime range</param>
            <param name="endTime">End time of the datetime range</param>
        </member>
        <member name="M:LinFx.DateTimeRange.#ctor(LinFx.IDateTimeRange)">
            <summary>
            Creates a new <see cref="T:LinFx.DateTimeRange"/> object from given <paramref name="dateTimeRange"/> object.
            </summary>
            <param name="dateTimeRange">IDateTimeRange object</param>
        </member>
        <member name="P:LinFx.DateTimeRange.Yesterday">
            <summary>
            Gets a date range represents yesterday.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.Today">
            <summary>
            Gets a date range represents today.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.Tomorrow">
            <summary>
            Gets a date range represents tomorrow.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.LastMonth">
            <summary>
            Gets a date range represents the last month.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.ThisMonth">
            <summary>
            Gets a date range represents this month.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.NextMonth">
            <summary>
            Gets a date range represents the next month.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.LastYear">
            <summary>
            Gets a date range represents the last year.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.ThisYear">
            <summary>
            Gets a date range represents this year.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.NextYear">
            <summary>
            Gets a date range represents the next year.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.Last30Days">
            <summary>
            Gets a date range represents the last 30 days (30x24 hours) including today.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.Last30DaysExceptToday">
            <summary>
            Gets a date range represents the last 30 days excluding today.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.Last7Days">
            <summary>
            Gets a date range represents the last 7 days (7x24 hours) including today.
            </summary>
        </member>
        <member name="P:LinFx.DateTimeRange.Last7DaysExceptToday">
            <summary>
            Gets a date range represents the last 7 days excluding today.
            </summary>
        </member>
        <member name="M:LinFx.DateTimeRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:LinFx.DateTimeRange"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:LinFx.DateTimeRange"/>.</returns>
        </member>
        <member name="T:LinFx.DisposeAction">
            <summary>
            This class can be used to provide an action when
            Dipose method is called.
            </summary>
        </member>
        <member name="M:LinFx.DisposeAction.#ctor(System.Action)">
            <summary>
            Creates a new <see cref="T:LinFx.DisposeAction"/> object.
            </summary>
            <param name="action">Action to be executed when this object is disposed.</param>
        </member>
        <member name="T:LinFx.Domain.Models.AggregateRoot">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="T:LinFx.Domain.Models.AggregateRoot`1">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="T:LinFx.Domain.Models.Auditing.AuditedAggregateRoot">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.IAuditedObject"/> for aggregate roots.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.AuditedAggregateRoot.LastModificationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.AuditedAggregateRoot.LastModifierId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Models.Auditing.AuditedAggregateRoot`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.IAuditedObject"/> for aggregate roots.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.AuditedAggregateRoot`1.LastModificationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.AuditedAggregateRoot`1.LastModifierId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Models.Auditing.AuditedEntity">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.IAuditedObject"/>.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.AuditedEntity.LastModificationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.AuditedEntity.LastModifierId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Models.Auditing.AuditedEntity`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.IAuditedObject"/>.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.AuditedEntity`1.LastModificationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.AuditedEntity`1.LastModifierId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Models.Auditing.CreationAuditedAggregateRoot">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.ICreationAuditedObject"/> for aggregate roots.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.CreationAuditedAggregateRoot.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.CreationAuditedAggregateRoot.CreatorId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Models.Auditing.CreationAuditedAggregateRoot`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.ICreationAuditedObject"/> for aggregate roots.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.CreationAuditedAggregateRoot`1.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.CreationAuditedAggregateRoot`1.CreatorId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Models.Auditing.CreationAuditedEntity">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.ICreationAuditedObject" /> for an entity.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.CreationAuditedEntity.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.CreationAuditedEntity.CreatorId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Models.Auditing.CreationAuditedEntity`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:LinFx.Extensions.Auditing.ICreationAuditedObject"/> for an entity.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.CreationAuditedEntity`1.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.CreationAuditedEntity`1.CreatorId">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Models.Auditing.FullAuditedAggregateRoot">
            <summary>
            Implements <see cref="T:LinFx.Extensions.Auditing.IFullAuditedObject"/> to be a base class for full-audited aggregate roots.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.FullAuditedAggregateRoot.IsDeleted">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.FullAuditedAggregateRoot.DeleterId">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.FullAuditedAggregateRoot.DeletionTime">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Models.Auditing.FullAuditedAggregateRoot`1">
            <summary>
            Implements <see cref="T:LinFx.Extensions.Auditing.IFullAuditedObject"/> to be a base class for full-audited aggregate roots.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.FullAuditedAggregateRoot`1.IsDeleted">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.FullAuditedAggregateRoot`1.DeleterId">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.FullAuditedAggregateRoot`1.DeletionTime">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Models.Auditing.FullAuditedEntity">
            <summary>
            Implements <see cref="T:LinFx.Extensions.Auditing.IFullAuditedObject"/> to be a base class for full-audited entities.
            </summary>
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.FullAuditedEntity.IsDeleted">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.FullAuditedEntity.DeleterId">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.FullAuditedEntity.DeletionTime">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Models.Auditing.FullAuditedEntity`1">
            <summary>
            Implements <see cref="T:LinFx.Extensions.Auditing.IFullAuditedObject"/> to be a base class for full-audited entities.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.FullAuditedEntity`1.IsDeleted">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.FullAuditedEntity`1.DeleterId">
            <inheritdoc />
        </member>
        <member name="P:LinFx.Domain.Models.Auditing.FullAuditedEntity`1.DeletionTime">
            <inheritdoc />
        </member>
        <member name="T:LinFx.Domain.Models.Entity">
            <summary>
            领域实体
            </summary>
        </member>
        <member name="T:LinFx.Domain.Models.Entity`1">
            <summary>
            领域实体
            </summary>
            <typeparam name="Tkey"></typeparam>
        </member>
        <member name="T:LinFx.Domain.Models.IAggregateRoot">
            <summary>
            Defines an aggregate root. It's primary key may not be "Id" or it may have a composite primary key.
            Use <see cref="T:LinFx.Domain.Models.IAggregateRoot`1"/> where possible for better integration to repositories and other structures in the framework.
            </summary>
        </member>
        <member name="T:LinFx.Domain.Models.IAggregateRoot`1">
            <summary>
            Defines an aggregate root with a single primary key with "Id" property.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="T:LinFx.Domain.Models.IEntity">
            <summary>
            Defines an entity. It's primary key may not be "Id" or it may have a composite primary key.
            Use <see cref="T:LinFx.Domain.Models.IEntity`1"/> where possible for better integration to repositories and other structures in the framework.
            </summary>
        </member>
        <member name="T:LinFx.Domain.Models.IEntity`1">
            <summary>
            Defines an entity with a single primary key with "Id" property.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:LinFx.Domain.Models.IEntity`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="T:LinFx.Domain.Values.ValueObject">
            <summary>
            值对象
            </summary>
        </member>
        <member name="T:LinFx.Domain.Values.ValueObject`1">
            <summary>
            Base class for value objects.
            </summary>
            <typeparam name="TValueObject">The type of the value object.</typeparam>
        </member>
        <member name="P:LinFx.Error.Code">
            <summary>
            Gets or sets the code for this error.
            </summary>
            <value>
            The code for this error.
            </value>
        </member>
        <member name="P:LinFx.Error.Description">
            <summary>
            Gets or sets the description for this error.
            </summary>
            <value>
            The description for this error.
            </value>
        </member>
        <member name="T:LinFx.AutowiredAttribute">
            <summary>
            @Autowired
            </summary>
        </member>
        <member name="T:LinFx.ServiceAttribute">
            <summary>
            @Service
            </summary>
        </member>
        <member name="P:LinFx.Hosting.Endpoint.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:LinFx.Hosting.Endpoint.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:LinFx.Hosting.Endpoint.Handler">
            <summary>
            Gets or sets the handler.
            </summary>
            <value>
            The handler.
            </value>
        </member>
        <member name="P:LinFx.Hosting.EndpointRouterOptions.Endpoints">
            <summary>
            Gets or sets the endpoint configuration.
            </summary>
            <value>
            The endpoints configuration.
            </value>
        </member>
        <member name="T:LinFx.Hosting.IEndpointHandler">
            <summary>
            Endpoint handler
            </summary>
        </member>
        <member name="M:LinFx.Hosting.IEndpointHandler.ProcessAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Hosting.IEndpointResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes the result.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Hosting.IEndpointRouter">
            <summary>
            The endpoint router
            </summary>
        </member>
        <member name="M:LinFx.Hosting.IEndpointRouter.Find(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Finds a matching endpoint.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.UserName">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Name"/>
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.Id">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.NameIdentifier"/>
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.Role">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Role"/>
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.Email">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Email"/>
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.EmailVerified">
            <summary>
            Default: "email_verified".
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.PhoneNumber">
            <summary>
            Default: "phone_number".
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.PhoneNumberVerified">
            <summary>
            Default: "phone_number_verified".
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.TenantId">
            <summary>
            Default: "tenantid".
            </summary>
        </member>
        <member name="P:LinFx.Security.Claims.ClaimTypes.ClientId">
            <summary>
            Default: "client_id".
            </summary>
        </member>
        <member name="T:LinFx.Security.Authorization.AuthorizationOptions">
            <summary>
            Provides programmatic configuration used by <see cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationService"/> and <see cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider"/>.
            </summary>
        </member>
        <member name="P:LinFx.Security.Authorization.AuthorizationOptions.Permissions">
            <summary>
            Gets or sets the <see cref="T:LinFx.Security.Authorization.Permissions.PermissionOptions"/> for the authorization  system.
            </summary>
            <value>
            The <see cref="T:LinFx.Security.Authorization.Permissions.PermissionOptions"/> for the authorization system.
            </value>
        </member>
        <member name="T:LinFx.Security.Authorization.DefaultAuthorizationPolicyProvider">
            <summary>
            The default implementation of a policy provider,
            which provides a <see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationPolicy"/> for a particular name.
            </summary>
        </member>
        <member name="T:LinFx.Security.Authorization.PermissionAuthorizationRequirement">
            <summary>
            定义权限 Requirement
            </summary>
        </member>
        <member name="T:LinFx.Security.Authorization.Permissions.AlwaysAllowPermissionChecker">
            <summary>
            Always allows for any permission.
            Use IServiceCollection.AddAlwaysAllowAuthorization() to replace
            IPermissionChecker with this class. This is useful for tests.
            </summary>
        </member>
        <member name="P:LinFx.Security.Authorization.Permissions.PermissionDefinition.Name">
            <summary>
            Unique name of the permission.
            </summary>
        </member>
        <member name="P:LinFx.Security.Authorization.Permissions.PermissionDefinition.Parent">
            <summary>
            Parent of this permission if one exists.
            If set, this permission can be granted only if parent is granted.
            </summary>
        </member>
        <member name="P:LinFx.Security.Authorization.Permissions.PermissionDefinition.Providers">
            <summary>
            A list of allowed providers to get/set value of this permission.
            An empty list indicates that all providers are allowed.
            </summary>
        </member>
        <member name="P:LinFx.Security.Authorization.Permissions.PermissionDefinition.Properties">
            <summary>
            Can be used to get/set custom properties for this permission definition.
            </summary>
        </member>
        <member name="P:LinFx.Security.Authorization.Permissions.PermissionDefinition.Item(System.String)">
            <summary>
            Gets/sets a key-value on the <see cref="P:LinFx.Security.Authorization.Permissions.PermissionDefinition.Properties"/>.
            </summary>
            <param name="name">Name of the property</param>
            <returns>
            Returns the value in the <see cref="P:LinFx.Security.Authorization.Permissions.PermissionDefinition.Properties"/> dictionary by given <see cref="!:name"/>.
            Returns null if given <see cref="!:name"/> is not present in the <see cref="P:LinFx.Security.Authorization.Permissions.PermissionDefinition.Properties"/> dictionary.
            </returns>
        </member>
        <member name="M:LinFx.Security.Authorization.Permissions.PermissionDefinition.WithProperty(System.String,System.Object)">
            <summary>
            Sets a property in the <see cref="P:LinFx.Security.Authorization.Permissions.PermissionDefinition.Properties"/> dictionary.
            This is a shortcut for nested calls on this object.
            </summary>
        </member>
        <member name="M:LinFx.Security.Authorization.Permissions.PermissionDefinition.WithProviders(System.String[])">
            <summary>
            Sets a property in the <see cref="P:LinFx.Security.Authorization.Permissions.PermissionDefinition.Properties"/> dictionary.
            This is a shortcut for nested calls on this object.
            </summary>
        </member>
        <member name="P:LinFx.Security.Authorization.Permissions.PermissionGrantInfo.Name">
            <summary>
            资源唯一ID
            </summary>
        </member>
        <member name="P:LinFx.Security.Authorization.Permissions.PermissionGrantInfo.IsGranted">
            <summary>
            是否授权
            </summary>
        </member>
        <member name="T:LinFx.Security.Authorization.Permissions.PermissionGroupDefinition">
            <summary>
            权限组
            </summary>
        </member>
        <member name="P:LinFx.Security.Authorization.Permissions.PermissionGroupDefinition.Name">
            <summary>
            Unique name of the group.
            </summary>
        </member>
        <member name="P:LinFx.Security.Authorization.Permissions.PermissionGroupDefinition.Item(System.String)">
            <summary>
            Gets/sets a key-value on the <see cref="P:LinFx.Security.Authorization.Permissions.PermissionGroupDefinition.Properties"/>.
            </summary>
            <param name="name">Name of the property</param>
            <returns>
            Returns the value in the <see cref="P:LinFx.Security.Authorization.Permissions.PermissionGroupDefinition.Properties"/> dictionary by given <see cref="!:name"/>.
            Returns null if given <see cref="!:name"/> is not present in the <see cref="P:LinFx.Security.Authorization.Permissions.PermissionGroupDefinition.Properties"/> dictionary.
            </returns>
        </member>
        <member name="T:LinFx.Modules.ModuleInfo">
            <summary>
            模块
            </summary>
        </member>
        <member name="P:LinFx.Modules.ModuleInfo.Id">
            <summary>
            模块ID
            </summary>
        </member>
        <member name="P:LinFx.Modules.ModuleInfo.Name">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="T:LinFx.Result">
            <summary>
            Represents the result of an operation.
            </summary>
        </member>
        <member name="P:LinFx.Result.Success">
            <summary>
            Flag indicating whether if the operation succeeded or not.
            </summary>
            <value>True if the operation succeeded, otherwise false.</value>
        </member>
        <member name="P:LinFx.Result.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="M:LinFx.Threading.AsyncHelper.FireAndForget(System.Func{System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
            Runs a task with the "Fire and Forget" pattern using Task.Run,
            and unwraps and handles exceptions
            </summary>
            <param name="task">A function that returns the task to run</param>
            <param name="handle">Error handling action, null by default</param>
        </member>
        <member name="P:LinFx.Threading.AsyncHelper.Wait">
            <summary>
            Creates a new AsyncBridge. This should always be used in
            conjunction with the using statement, to ensure it is disposed
            </summary>
        </member>
        <member name="M:LinFx.Threading.AsyncHelper.AsyncBridge.Run(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Execute's an async task with a void return type
            from a synchronous context
            </summary>
            <param name="task">Task to execute</param>
            <param name="callback">Optional callback</param>
        </member>
        <member name="M:LinFx.Threading.AsyncHelper.AsyncBridge.Run``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}})">
            <summary>
            Execute's an async task with a T return type
            from a synchronous context
            </summary>
            <typeparam name="T">The type of the task</typeparam>
            <param name="task">Task to execute</param>
            <param name="callback">Optional callback</param>
        </member>
        <member name="T:LinFx.Threading.AsyncLock">
            <summary>
            AsyncSemaphore should be used with a lot of care.
            </summary>
        </member>
        <member name="E:LinFx.Threading.Timer.Elapsed">
            <summary>
            This event is raised periodically according to Period of Timer.
            </summary>
        </member>
        <member name="P:LinFx.Threading.Timer.Period">
            <summary>
            Task period of timer (as milliseconds).
            </summary>
        </member>
        <member name="M:LinFx.Threading.Timer.TimerCallBack(System.Object)">
            <summary>
            This method is called by _taskTimer.
            </summary>
            <param name="state">Not used argument</param>
        </member>
        <member name="T:LinFx.LockExtensions">
            <summary>
            Extension methods to make locking easier.
            </summary>
        </member>
        <member name="M:LinFx.LockExtensions.Locking(System.Object,System.Action)">
            <summary>
            Executes given <paramref name="action"/> by locking given <paramref name="source"/> object.
            </summary>
            <param name="source">Source object (to be locked)</param>
            <param name="action">Action (to be executed)</param>
        </member>
        <member name="M:LinFx.LockExtensions.Locking``1(``0,System.Action{``0})">
            <summary>
            Executes given <paramref name="action"/> by locking given <paramref name="source"/> object.
            </summary>
            <typeparam name="T">Type of the object (to be locked)</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="action">Action (to be executed)</param>
        </member>
        <member name="M:LinFx.LockExtensions.Locking``1(System.Object,System.Func{``0})">
            <summary>
            Executes given <paramref name="func"/> and returns it's value by locking given <paramref name="source"/> object.
            </summary>
            <typeparam name="TResult">Return type</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="func">Function (to be executed)</param>
            <returns>Return value of the <paramref name="func"/></returns>
        </member>
        <member name="M:LinFx.LockExtensions.Locking``2(``0,System.Func{``0,``1})">
            <summary>
            Executes given <paramref name="func"/> and returns it's value by locking given <paramref name="source"/> object.
            </summary>
            <typeparam name="T">Type of the object (to be locked)</typeparam>
            <typeparam name="TResult">Return type</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="func">Function (to be executed)</param>
            <returns>Return value of the <paramnref name="func"/></returns>
        </member>
        <member name="P:LinFx.UserFriendlyException.Code">
            <summary>
            An arbitrary error code.
            </summary>
        </member>
        <member name="M:LinFx.Utils.CryptoUtils.CreateRsaSecurityKey">
            <summary>
            Creates a new RSA security key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.DateTimeUtils.ToUnixTimestamp(System.DateTime)">
            <summary>
            得到当前的unix时间戳
            </summary>
            <param name="date">当前时间日期</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.DESEncode(System.String,System.String)">
            <summary> 
            DES加密字符串 
            </summary> 
            <param name="encryptString">待加密的字符串</param> 
            <param name="encryptKey">加密密钥,要求为16位</param> 
            <returns>加密成功返回加密后的字符串，失败返回源串</returns> 
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.DESDecrypt(System.String,System.String)">
            <summary> 
            DES解密字符串 
            </summary> 
            <param name="decryptString">待解密的字符串</param> 
            <param name="decryptKey">解密密钥,要求为16位,和加密密钥相同</param> 
            <returns>解密成功返回解密后的字符串，失败返源串</returns> 
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.MD5Encrypt(System.String)">
            <summary>
            MD5 hash
            </summary>
            <param name="input">The string to be encrypted.</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.MD5Encrypt(System.Byte[])">
            <summary>
            MD5 hash
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.RSAEncrypt(System.String,System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="publickey"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.RSAEncryptWithPrivateKey(System.String,System.String)">
            <summary>
            RSA私钥加密
            </summary>
            <param name="data">加密明文</param>
            <param name="privateKey">私钥</param>
            <returns>返回密文</returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.RSADecrypt(System.Byte[],System.String)">
            <summary>
            RSA私钥解密
            </summary>
            <param name="data"></param>
            <param name="privatekey"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.RSASign_MD5withRSA_GBK(System.String,System.String)">
            <summary>
            RSA签名
            </summary>
            <param name="content">数据</param>
            <param name="privateKey">RSA密钥</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.VerifyRSASign_MD5withRSA_GBK(System.String,System.String,System.String)">
            <summary>
            RSA验签
            </summary>
            <param name="content">内容</param>
            <param name="publicKey">RSA公钥</param>
            <param name="signData">签名字段</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.HMACSMD5Encrypt(System.String,System.String)">
            <summary>
            HMAC-MD5 加密
            </summary>
            <param name="input"> 要加密的字符串 </param>
            <param name="key"> 密钥 </param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.HMACSMD5Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMAC-MD5 加密
            </summary>
            <param name="input"> 要加密的字符串 </param>
            <param name="key"> 密钥 </param>
            <param name="encoding"> 字符编码 </param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.EncryptUtils.HashEncrypt(System.Security.Cryptography.HashAlgorithm,System.String,System.Text.Encoding)">
            <summary>
            哈希加密算法
            </summary>
            <param name="hashAlgorithm"> 所有加密哈希算法实现均必须从中派生的基类 </param>
            <param name="input"> 待加密的字符串 </param>
            <param name="encoding"> 字符编码 </param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Utils.RSAKeyExtensions">
            <summary>
            RSA参数格式化扩展
            </summary>
        </member>
        <member name="M:LinFx.Utils.RSAKeyExtensions.FromLvccXmlString(System.Security.Cryptography.RSA,System.String)">
            <summary>
            RSA导入key
            </summary>
            <param name="rsa">RSA实例<see cref="T:System.Security.Cryptography.RSA"/></param>
            <param name="xmlString">RSA的Key序列化XML字符串</param>
        </member>
        <member name="M:LinFx.Utils.RSAKeyExtensions.ToLvccXmlString(System.Security.Cryptography.RSA,System.Boolean)">
            <summary>
            获取RSA Key序列化XML
            </summary>
            <param name="rsa">RSA实例<see cref="T:System.Security.Cryptography.RSA"/></param>
            <param name="includePrivateParameters">是否包含私钥</param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.HexUtils.HexStringToBytes(System.String)">
            <summary>
            16进制原码字符串转字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.IDUtils.NewId">
            <summary>
            生成雪花ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinFx.Utils.IDUtils.Snowflake">
            <summary>
            动态生产有规律的ID
            </summary>
        </member>
        <member name="M:LinFx.Utils.IDUtils.Snowflake.GetTimestamp">
            <summary>
            生成当前时间戳
            </summary>
            <returns>毫秒</returns>
        </member>
        <member name="M:LinFx.Utils.IDUtils.Snowflake.GetNextTimestamp(System.Int64)">
            <summary>
            获取下一微秒时间戳
            </summary>
            <param name="lastTimestamp"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.IDUtils.Snowflake.GetId">
            <summary>
            获取长整形的ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.JsonUtils.SerializeWithType(System.Object)">
            <summary>
            Serializes an object with a type information included.
            So, it can be deserialized using <see cref="M:LinFx.Utils.JsonUtils.DeserializeWithType(System.String)"/> method later.
            </summary>
        </member>
        <member name="M:LinFx.Utils.JsonUtils.SerializeWithType(System.Object,System.Type)">
            <summary>
            Serializes an object with a type information included.
            So, it can be deserialized using <see cref="M:LinFx.Utils.JsonUtils.DeserializeWithType(System.String)"/> method later.
            </summary>
        </member>
        <member name="M:LinFx.Utils.JsonUtils.DeserializeWithType``1(System.String)">
            <summary>
            Deserializes an object serialized with <see cref="M:LinFx.Utils.JsonUtils.SerializeWithType(System.Object)"/> methods.
            </summary>
        </member>
        <member name="M:LinFx.Utils.JsonUtils.DeserializeWithType(System.String)">
            <summary>
            Deserializes an object serialized with <see cref="M:LinFx.Utils.JsonUtils.SerializeWithType(System.Object)"/> methods.
            </summary>
        </member>
        <member name="T:LinFx.Utils.LowercaseContractResolver">
            <summary>
            转化小写
            </summary>
        </member>
        <member name="T:LinFx.Utils.TimestampConverter">
            <summary>  
            Newtonsoft.Json序列化扩展特性  
            <para>DateTime序列化（输出为时间戳）</para>  
            </summary>  
        </member>
        <member name="T:LinFx.Utils.UnicodeConverter">
            <summary>  
            Newtonsoft.Json序列化扩展特性  
            <para>String Unicode 序列化（输出为Unicode编码字符）</para>  
            </summary>  
        </member>
        <member name="T:LinFx.Utils.DateTimeOffsetJsonConverter">
            <summary>
            格式化DateTime
            </summary>
        </member>
        <member name="P:LinFx.Utils.DateTimeOffsetJsonConverter.DateTimeFormat">
            <summary>
            获取日期格式
            </summary>
        </member>
        <member name="M:LinFx.Utils.DateTimeOffsetJsonConverter.#ctor(System.String)">
            <summary>
            ctor
            </summary>      
            <param name="dateTimeFormat"></param>
        </member>
        <member name="M:LinFx.Utils.DateTimeOffsetJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.DateTimeOffsetJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTimeOffset,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:LinFx.Utils.DateTimeJsonConverter">
            <summary>
            格式化DateTime
            </summary>
        </member>
        <member name="P:LinFx.Utils.DateTimeJsonConverter.DateTimeFormat">
            <summary>
            获取日期格式
            </summary>
        </member>
        <member name="M:LinFx.Utils.DateTimeJsonConverter.#ctor(System.String)">
            <summary>
            ctor
            </summary>      
            <param name="dateTimeFormat"></param>
        </member>
        <member name="M:LinFx.Utils.DateTimeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.DateTimeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="M:LinFx.Utils.JsonUtilsExtensions.ToJson(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Converts given object to JSON string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.JsonUtilsExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Converts given object to JSON string.
            </summary>
            <param name="value"></param>
            <param name="camelCase"></param>
            <param name="indented"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.MoneyUtils.ToFen(System.Decimal)">
            <summary>
            元转分
            </summary>
            <param name="yuan"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.MoneyUtils.ToYuan(System.Int32)">
            <summary>
            分转元
            </summary>
            <param name="fen"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.MoneyUtils.ToN2String(System.Decimal)">
            <summary>
            保留两位小数
            </summary>
            <param name="amt"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.MoneyUtils.Truncate(System.Decimal)">
            <summary>
            截取两位小数
            </summary>
            <param name="amt"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.MoneyEx.ToMoneyString(System.Decimal)">
            <summary>
            货币表示，带有逗号分隔符，默认小数点后保留两位，四舍五入
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.RandomUtils.GetRandom(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue; 
            that is, the range of return values includes minValue but not maxValue. 
            If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="M:LinFx.Utils.RandomUtils.GetRandom(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero.</param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; 
            that is, the range of return values ordinarily includes zero but not maxValue. 
            However, if maxValue equals zero, maxValue is returned.
            </returns>
        </member>
        <member name="M:LinFx.Utils.RandomUtils.GetRandom">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.</returns>
        </member>
        <member name="M:LinFx.Utils.RandomUtils.GetRandomOf``1(``0[])">
            <summary>
            Gets random of given objects.
            </summary>
            <typeparam name="T">Type of the objects</typeparam>
            <param name="objs">List of object to select a random one</param>
        </member>
        <member name="M:LinFx.Utils.RandomUtils.GenerateRandomizedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates a randomized list from given enumerable.
            </summary>
            <typeparam name="T">Type of items in the list</typeparam>
            <param name="items">items</param>
        </member>
        <member name="M:LinFx.Utils.ReflectionUtils.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Checks whether <paramref name="givenType"/> implements/inherits <paramref name="genericType"/>.
            </summary>
            <param name="givenType">Type to check</param>
            <param name="genericType">Generic type</param>
        </member>
        <member name="M:LinFx.Utils.ReflectionUtils.GetSingleAttributeOrDefault``1(System.Reflection.MemberInfo,``0,System.Boolean)">
            <summary>
            Tries to gets an of attribute defined for a class member and it's declaring type including inherited attributes.
            Returns default value if it's not declared at all.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="defaultValue">Default value (null as default)</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:LinFx.Utils.ReflectionUtils.GetSingleAttributeOfMemberOrDeclaringTypeOrDefault``1(System.Reflection.MemberInfo,``0,System.Boolean)">
            <summary>
            Tries to gets an of attribute defined for a class member and it's declaring type including inherited attributes.
            Returns default value if it's not declared at all.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="defaultValue">Default value (null as default)</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:LinFx.Utils.ReflectionUtils.GetValueByPath(System.Object,System.Type,System.String)">
            <summary>
            Gets value of a property by it's full path from given object
            </summary>
        </member>
        <member name="M:LinFx.Utils.ReflectionUtils.SetValueByPath(System.Object,System.Type,System.String,System.Object)">
            <summary>
            Sets value of a property by it's full path on given object
            </summary>
        </member>
        <member name="M:LinFx.Utils.StringHelper.EmailEncryption(System.String)">
            <summary>
            邮箱加密***
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.StringHelper.PhoneEncryption(System.String)">
            <summary>
            手机号码加密***
            </summary>
            <param name="phone"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.StringUtils.Filter(System.String)">
            <summary>
            过滤特殊字符
            </summary>
            <param name="str">需要过滤的字符串</param>
            <returns>过滤好的字符串</returns>
        </member>
        <member name="M:LinFx.Utils.StringUtils.EmailEncryption(System.String)">
            <summary>
            邮箱加密***
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:LinFx.Utils.StringUtils.PhoneEncryption(System.String)">
            <summary>
            手机号码加密***
            </summary>
            <param name="phone"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.Utils.TypeUtils">
            <summary>
            Some simple type-checking methods used internally.
            </summary>
        </member>
        <member name="M:LinFx.Utils.TypeExtensions.IsAssignableTo``1(System.Type)">
             <summary>
             Determines whether an instance of this type can be assigned to
             an instance of the <typeparamref name="TTarget"></typeparamref>.
            
             Internally uses <see cref="M:System.Type.IsAssignableFrom(System.Type)"/>.
             </summary>
             <typeparam name="TTarget">Target type</typeparam> (as reverse).
        </member>
        <member name="M:LinFx.Utils.TypeExtensions.IsAssignableTo(System.Type,System.Type)">
             <summary>
             Determines whether an instance of this type can be assigned to
             an instance of the <paramref name="targetType"></paramref>.
            
             Internally uses <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> (as reverse).
             </summary>
             <param name="type">this type</param>
             <param name="targetType">Target type</param>
        </member>
        <member name="M:LinFx.Utils.UriUtils.ToFilter(System.String)">
            <summary>
            返回
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:LinFx.DayOfWeekExtensions">
            <summary>
            Extension methods for <see cref="T:LinFx.DayOfWeekExtensions"/>.
            </summary>
        </member>
        <member name="M:LinFx.DayOfWeekExtensions.IsWeekend(System.DayOfWeek)">
            <summary>
            Check if given <see cref="T:System.DayOfWeek"/> value is weekend.
            </summary>
        </member>
        <member name="M:LinFx.DayOfWeekExtensions.IsWeekday(System.DayOfWeek)">
            <summary>
            Check if given <see cref="T:System.DayOfWeek"/> value is weekday.
            </summary>
        </member>
        <member name="M:System.Linq.PagedResultExtensions.ToPageResultAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            获取分页结果
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <param name="page">当前页</param>
            <param name="limit">页大小</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PagedResultExtensions.ToPageResultAsync``1(System.Linq.IQueryable{``0},LinFx.Application.IPagedResultRequest)">
            <summary>
            获取分页结果
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <param name="request">分页请求</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PagedResultExtensions.ToPageResultAsync``2(System.Linq.IQueryable{``0},LinFx.Application.IPagedResultRequest)">
            <summary>
            获取分页结果
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TModel"></typeparam>
            <param name="query"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.QueryableExtensions">
            <summary>
            Some useful extension methods for <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.PageBy``1(System.Linq.IQueryable{``0},LinFx.Application.IPagedResultRequest)">
            <summary>
            Used for paging. Can be used as an alternative to Skip(...).Take(...) chaining.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="request">分页请求</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.QueryableExtensions.PageBy``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Used for paging. Can be used as an alternative to Skip(...).Take(...) chaining.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="page">页数(eg: 1)</param>
            <param name="limit">页大小</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.QueryableExtensions.PageBy``2(``1,System.Int32,System.Int32)">
            <summary>
            Used for paging. Can be used as an alternative to Skip(...).Take(...) chaining.
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a <see cref="T:System.Linq.IQueryable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="query">Queryable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the query</param>
            <returns>Filtered or not filtered query based on <paramref name="condition"/></returns>
        </member>
        <member name="M:System.Linq.QueryableExtensions.WhereIf``2(``1,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a <see cref="T:System.Linq.IQueryable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="query">Queryable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the query</param>
            <returns>Filtered or not filtered query based on <paramref name="condition"/></returns>
        </member>
        <member name="M:System.Linq.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a <see cref="T:System.Linq.IQueryable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="query">Queryable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the query</param>
            <returns>Filtered or not filtered query based on <paramref name="condition"/></returns>
        </member>
        <member name="M:System.Linq.QueryableExtensions.WhereIf``2(``1,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a <see cref="T:System.Linq.IQueryable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="query">Queryable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the query</param>
            <returns>Filtered or not filtered query based on <paramref name="condition"/></returns>
        </member>
        <member name="T:System.Collections.Generic.CollectionExtensions">
            <summary>
            Extension methods for Collections.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Checks whatever given collection object is null or has no item.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to the collection if it's not already in the collection.
            </summary>
            <param name="source">Collection</param>
            <param name="item">Item to check and add</param>
            <typeparam name="T">Type of the items in the collection</typeparam>
            <returns>Returns True if added, returns False if not.</returns>
        </member>
        <member name="T:System.Collections.Generic.DictionaryExtensions">
            <summary>
            Extension methods for Dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            This method is used to try to get a value in a dictionary if it does exists.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="dictionary">The collection object</param>
            <param name="key">Key</param>
            <param name="value">Value of the key (or default value if key not exists)</param>
            <returns>True if key does exists in the dictionary</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <param name="factory">A factory method used to create the value if not found in the dictionary</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <param name="factory">A factory method used to create the value if not found in the dictionary</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="T:System.Collections.Generic.EnumerableExtensions">
            <summary> 
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.JoinAsString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type System.String, using the specified separator between each member.
            This is a shortcut for string.Join(...)
            </summary>
            <param name="source">A collection that contains the strings to concatenate.</param>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if values has more than one element.</param>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty.</returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            This is a shortcut for string.Join(...)
            </summary>
            <param name="source">A collection that contains the objects to concatenate.</param>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if values has more than one element.</param>
            <typeparam name="T">The type of the members of values.</typeparam>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty.</returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Filters a <see cref="T:System.Collections.Generic.IEnumerable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="source">Enumerable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the enumerable</param>
            <returns>Filtered or not filtered enumerable based on <paramref name="condition"/></returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a <see cref="T:System.Collections.Generic.IEnumerable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="source">Enumerable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the enumerable</param>
            <returns>Filtered or not filtered enumerable based on <paramref name="condition"/></returns>
        </member>
        <member name="T:System.Collections.Generic.ListExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.SortByDependencies``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Sort a list by a topological sorting, which consider their  dependencies
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="source">A list of objects to sort</param>
            <param name="getDependencies">Function to resolve the dependencies</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.SortByDependenciesVisit``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.List{``0},System.Collections.Generic.Dictionary{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="item">Item to resolve</param>
            <param name="getDependencies">Function to resolve the dependencies</param>
            <param name="sorted">List with the sortet items</param>
            <param name="visited">Dictionary with the visited items</param>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.ReThrow(System.Exception)">
            <summary>
            Uses <see cref="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)"/> method to re-throws exception
            while preserving stack trace.
            </summary>
            <param name="exception">Exception to be re-thrown</param>
        </member>
        <member name="M:System.ObjectExtensions.As``1(System.Object)">
            <summary>
            Used to simplify and beautify casting an object to a type. 
            </summary>
            <typeparam name="T">Type to be casted</typeparam>
            <param name="obj">Object to cast</param>
            <returns>Casted object</returns>
        </member>
        <member name="M:System.ObjectExtensions.To``1(System.Object)">
            <summary>
            Converts given object to a value type using <see cref="M:System.Convert.ChangeType(System.Object,System.TypeCode)"/> method.
            </summary>
            <param name="obj">Object to be converted</param>
            <typeparam name="T">Type of the target object</typeparam>
            <returns>Converted object</returns>
        </member>
        <member name="M:System.ObjectExtensions.IsIn``1(``0,``0[])">
            <summary>
            Check if an item is in a list.
            </summary>
            <param name="item">Item to check</param>
            <param name="list">List of items</param>
            <typeparam name="T">Type of the items</typeparam>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Extension methods for String class.
            </summary>
        </member>
        <member name="M:System.StringExtensions.EnsureEndsWith(System.String,System.Char,System.StringComparison)">
            <summary>
            Adds a char to end of given string if it does not ends with the char.
            </summary>
        </member>
        <member name="M:System.StringExtensions.EnsureStartsWith(System.String,System.Char,System.StringComparison)">
            <summary>
            Adds a char to beginning of given string if it does not starts with the char.
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            indicates whether this string is null, empty, or consists only of white-space characters.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="len"/> is bigger that string's length</exception>
        </member>
        <member name="M:System.StringExtensions.NormalizeLineEndings(System.String)">
            <summary>
            Converts line endings in the string to <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:System.StringExtensions.NthIndexOf(System.String,System.Char,System.Int32)">
            <summary>
            Gets index of nth occurence of a char in a string.
            </summary>
            <param name="str">source string to be searched</param>
            <param name="c">Char to search in str</param>
            <param name="n">Count of the occurence</param>
        </member>
        <member name="M:System.StringExtensions.RemovePostFix(System.String,System.String[])">
            <summary>
            Removes first occurrence of the given postfixes from end of the given string.
            </summary>
            <param name="str">The string.</param>
            <param name="postFixes">one or more postfix.</param>
            <returns>Modified string or the same string if it has not any of given postfixes</returns>
        </member>
        <member name="M:System.StringExtensions.RemovePostFix(System.String,System.StringComparison,System.String[])">
            <summary>
            Removes first occurrence of the given postfixes from end of the given string.
            </summary>
            <param name="str">The string.</param>
            <param name="comparisonType">String comparison type</param>
            <param name="postFixes">one or more postfix.</param>
            <returns>Modified string or the same string if it has not any of given postfixes</returns>
        </member>
        <member name="M:System.StringExtensions.RemovePreFix(System.String,System.String[])">
            <summary>
            Removes first occurrence of the given prefixes from beginning of the given string.
            </summary>
            <param name="str">The string.</param>
            <param name="preFixes">one or more prefix.</param>
            <returns>Modified string or the same string if it has not any of given prefixes</returns>
        </member>
        <member name="M:System.StringExtensions.RemovePreFix(System.String,System.StringComparison,System.String[])">
            <summary>
            Removes first occurrence of the given prefixes from beginning of the given string.
            </summary>
            <param name="str">The string.</param>
            <param name="comparisonType">String comparison type</param>
            <param name="preFixes">one or more prefix.</param>
            <returns>Modified string or the same string if it has not any of given prefixes</returns>
        </member>
        <member name="M:System.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from end of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="len"/> is bigger that string's length</exception>
        </member>
        <member name="M:System.StringExtensions.Split(System.String,System.String)">
            <summary>
            Uses string.Split method to split given string by given separator.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
            Uses string.Split method to split given string by given separator.
            </summary>
        </member>
        <member name="M:System.StringExtensions.SplitToLines(System.String)">
            <summary>
            Uses string.Split method to split given string by <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:System.StringExtensions.SplitToLines(System.String,System.StringSplitOptions)">
            <summary>
            Uses string.Split method to split given string by <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String,System.Boolean)">
            <summary>
            Converts PascalCase string to camelCase string.
            </summary>
            <param name="str">String to convert</param>
            <param name="useCurrentCulture">set true to use current culture. Otherwise, invariant culture will be used.</param>
            <returns>camelCase of the string</returns>
        </member>
        <member name="M:System.StringExtensions.ToSentenceCase(System.String,System.Boolean)">
            <summary>
            Converts given PascalCase/camelCase string to sentence (by splitting words by space).
            Example: "ThisIsSampleSentence" is converted to "This is a sample sentence".
            </summary>
            <param name="str">String to convert.</param>
            <param name="useCurrentCulture">set true to use current culture. Otherwise, invariant culture will be used.</param>
        </member>
        <member name="M:System.StringExtensions.ToEnum``1(System.String)">
            <summary>
            Converts string to enum value.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">String value to convert</param>
            <returns>Returns enum object</returns>
        </member>
        <member name="M:System.StringExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Converts string to enum value.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">String value to convert</param>
            <param name="ignoreCase">Ignore case</param>
            <returns>Returns enum object</returns>
        </member>
        <member name="M:System.StringExtensions.ToPascalCase(System.String,System.Boolean)">
            <summary>
            Converts camelCase string to PascalCase string.
            </summary>
            <param name="str">String to convert</param>
            <param name="useCurrentCulture">set true to use current culture. Otherwise, invariant culture will be used.</param>
            <returns>PascalCase of the string</returns>
        </member>
        <member name="M:System.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:System.StringExtensions.TruncateFromBeginning(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from Ending of the string if it exceeds maximum length.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:System.StringExtensions.TruncateWithPostfix(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            It adds a "..." postfix to end of the string if it's truncated.
            Returning string can not be longer than maxLength.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:System.StringExtensions.TruncateWithPostfix(System.String,System.Int32,System.String)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            It adds given <paramref name="postfix"/> to end of the string if it's truncated.
            Returning string can not be longer than maxLength.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:System.StringExtensions.GetBytes(System.String)">
            <summary>
            Converts given string to a byte array using <see cref="P:System.Text.Encoding.UTF8"/> encoding.
            </summary>
        </member>
        <member name="M:System.StringExtensions.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts given string to a byte array using the given <paramref name="encoding"/>
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.RedisCacheServiceCollectionExtensions">
            <summary>
            Extension methods for setting up Redis distributed cache related services in an <see cref="T:Microsoft.Extensions.DependencyInjection.LinFxBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RedisCacheServiceCollectionExtensions.AddDistributedRedisCache(Microsoft.Extensions.DependencyInjection.LinFxBuilder,System.Action{Microsoft.Extensions.Caching.Redis.RedisCacheOptions})">
            <summary>
            Adds Redis distributed caching services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.LinFxBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.LinFxBuilder" /> to add services to.</param>
            <param name="setupAction">An <see cref="T:System.Action`1"/> to configure the provided
            <see cref="T:Microsoft.Extensions.Caching.Redis.RedisCacheOptions"/>.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.LinFxBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DependencyInjectionServiceCollectionExtensions.AddAssembly(Microsoft.Extensions.DependencyInjection.LinFxBuilder,System.Reflection.Assembly)">
            <summary>
            注册程序集下实现依赖注入接口的类型
            </summary>
            <param name="builder"></param>
            <param name="assembly"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LinFxBuilder">
            <summary>
            Helper functions for configuring LinFx services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LinFxBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Extensions.DependencyInjection.LinFxBuilder"/>
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to attach to.</param>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.LinFxBuilder.Services">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> services are attached to.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> services are attached to.
            </value>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LinFxOptions">
            <summary>
            Represents all the options you can use to configure the identity system.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LinFxServiceCollectionExtensions.AddLinFx(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.LinFxOptions})">
            <summary>
            AddLinFx Code
            </summary>
            <param name="services"></param>
            <param name="optionsAction"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions">
            <summary>
            授权
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.LinFxBuilder,System.Action{LinFx.Security.Authorization.AuthorizationOptions})">
            <summary>
            Adds authorization services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.LinFxBuilder" />. 
            </summary>
            <param name="builder">The current <see cref="T:Microsoft.Extensions.DependencyInjection.LinFxBuilder" /> instance. </param>
            <param name="configure">An action delegate to configure the provided <see cref="T:LinFx.Security.Authorization.AuthorizationOptions"/>.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.GetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a value with the given key.
            </summary>
            <typeparam name="TCacheItem"></typeparam>
            <param name="cache"><see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/></param>
            <param name="key">A string identifying the requested value.</param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,System.Func{Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Sets a avlue with the given key.
            </summary>
            <typeparam name="TCacheItem"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="item"></param>
            <param name="optionsFactory"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.GetOrAddAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Func{Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Gets a value or add a value with the given key.
            </summary>
            <typeparam name="TCacheItem"></typeparam>
            <param name="cache"><see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/></param>
            <param name="key">A string identifying the requested value.</param>
            <param name="factory"></param>
            <param name="optionsFactory"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
    </members>
</doc>
